
MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 1
MC68HC908GP32 User Bootloader


                        1  ;***************************************************
                                                      *************************
                        2  ;
                        3  ;                     MS_TECA_V12_E150_03_02_10a.asm
                                                                        3/02/10
                        4  ;                              MT V2.25 compatable
                        5  ;      External Axiomatic proportional solonoid 
                                                     driver EPC control version
                        6  ;
                        7  ;           Semi automatic controller for the Ford 
                                                              E4OD transmission
                        8  ;
                        9  ;         By Robert Hiebert with technical assistanc
                                                            e from Dan Williams
                       10  ;           and all those who contributed to the 
                                                            Megasquirt projects
                       11  ;
                       12  ;***************************************************
                                                      *************************
                       13  
                       14  ; rename MS_TECA_TS for tuner studio 9/28/12
                       15  
                       16  ****************************************************
                                                      *************************
                       17  ****************************************************
                                                      *************************
                       18  **   M E G A S Q U I R T - 2 0 0 1 - V2.00
                       19  **
                       20  **   (C) 2002 - B. A. Bowling And A. C. Grippo
                       21  **
                       22  **   This header must appear on all derivatives of 
                                                                     this code.
                       23  **
                       24  ****************************************************
                                                      *************************
                       25  ****************************************************
                                                      *************************
                       26  
                       27  ;***************************************************
                                                      *************************
                       28  ;  _V11:
                       29  ;  This version of code utilizes the Axiomatic 
                                                     model 4000174 proportional
                       30  ;  solenoid driver for EPC control. It has current 
                                                         regulation for varying
                       31  ;  supply voltages and solenoid resistance. It also 
                                                          has adjustable dither
                       32  ;  from 0-10% max current amplitude and 70-350HZ 
                                                                     frequency.
                       33  ;  Full output is 1.2 amps, but can be trimmed for 
                                                         the desired 1 amp max.
                       34  ;  Control input is 0-5 volts, with full input 
                                                      resulting in full output.
                       35  ;
                       36  ;  Attempts to provide current control with voltage 
                                                                and temperature
                       37  ;  compensation of EPC PWM on V10 proved to be 
                                                  unsatisfactory. All reference


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 2
MC68HC908GP32 User Bootloader


                       38  ;  to EPC PWM in this version is to be taken as PWM 
                                                          to produce the analog
                       39  ;  0-5 volts for the EPC controller.
                       40  ;
                       41  ;  This version also changes the shift up logic so 
                                                           that it is no longer
                       42  ;  necessary to wait until the EPC pressure rise 
                                                         sequence has timed out
                       43  ;  before the next up shift can be made. TCC apply 
                                                       is also modified in this
                       44  ;  way.
                       45  ;***************************************************
                                                      *************************
                       46  ;***************************************************
                                                      *************************
                       47  ;  _V12:
                       48  ;  This version adds an EPC table for Man1, and a 
                                                    decel EPC variable for Man1
                       49  ;  to keep the pressures within stock limits. The 
                                                         shift up/down debounce
                       50  ;  timer values are now flash configurable to try 
                                                      eliminate skipped shifts.
                       51  ;***************************************************
                                                      *************************
                       52  ;***************************************************
                                                      *************************
                       53  ;  _V12_E150_03_02_10a:
                       54  ;  This version just has latest configuration 
                                                               constants coded.
                       55  ;***************************************************
                                                      *************************
                       56  
                       57  ;***************************************************
                                                      *************************
                       58  ; - E4OD Information:
                       59  ;
                       60  ;  MLPS is a special segmented variable resistor 
                                                                 mounted on the
                       61  ;  Manual Gear Selector Lever Shaft. It is supplied 
                                                                 with regulated
                       62  ;  5 volts and is in series with a 560 ohm resistor.
                                                                        The ADC
                       63  ;  reads the voltage drop across the variable 
                                                   resistor, values as follows:
                       64  ;
                       65  ;  Park     4607 ohms  4.458 volts  228 ADC counts
                       66  ;           3770 ohms  4.353 volts  223 ADC counts  
                                                                        P (226)
                       67  ;  Reverse  1593 ohms  3.7 volts    189 ADC counts
                       68  ;           1304 ohms  3.498 volts  179 ADC counts  
                                                                        R (184)
                       69  ;  Neutral  807 ohms   2.952 volts  151 ADC counts
                       70  ;           660 ohms   2.705 volts  138 ADC counts  
                                                                        N (144)
                       71  ;  Drive    442 ohms   2.206 volts  113 ADC counts
                       72  ;           361 ohms   1.96 volts   100 ADC counts  
                                                                        D (106)
                       73  ;  Man2     232 ohms   1.465 volts   75 ADC counts


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 3
MC68HC908GP32 User Bootloader


                       74  ;           190 ohms   1.267 volts   65 ADC counts  
                                                                        M2 (70)
                       75  ;  Man1     95 ohms    0.725 volts   37 ADC counts
                       76  ;           78 ohms    0.612 volts   31 ADC counts  
                                                                        M1 (34)
                       77  ;
                       78  ;  TPS input 0-5 volts potentiometer equivilent to
                       79  ;  560 ohm plus 3k pot plus 560 ohm
                       80  :
                       81  ;  Throttle Plate Angle Chart:
                       82  ;  TPS ANGLE Volts   A/D counts (.004887 volt per 
                                                                         count)
                       83  ;    0'     0.601    31
                       84  ;    13'    1.201    61
                       85  ;    26'    1.820    93
                       86  ;    39'    2.429    124
                       87  ;    52'    3.039    156
                       88  ;    65'    3.648    187
                       89  ;    78'    4.257    218
                       90  ;    84'    4.538    232
                       91  ;    91'    4.866    249
                       92  ;
                       93  ;  4.9L Engine:
                       94  ;   Closed Throttle = 0.83V = 42 counts
                       95  ;   WOT             = 4.45V = 228 counts
                       96  ;
                       97  ;  7.5L Engine:
                       98  ;   Closed Throttle = 0.92V = 47 counts
                       99  ;   WOT             = 4.53V = 232 counts
                      100  ;
                      101  ;  Line Pressure chart:
                      102  ;  Gear IDLEpsi     WOT     STALLpsi
                      103  ;  p     55-65                ---
                      104  ;  R     75-99    240-265    (100%)
                      105  ;  N     55-65                ---
                      106  ;  D     55-65    156-174    (66%)
                      107  ;  M2    55-65    156-174    (66%)
                      108  ;  M1    75-99    157-186    (70%)
                      109  ;  TCC regulated at 125 max  (48%)
                      110  ;
                      111  ;  Solonoid Application Chart:
                      112  ;  MLPS   GEAR   SS1   SS2   CCS   TCC
                      113  ;  P,R,N  1      on    off   off   off
                      114  ;  D      1      on    off   on    on/off
                      115  ;  D      2      on    on    on    on/off
                      116  ;  D      3      off   on    on    on/off
                      117  ;  D      4      off   off   off   on/off
                      118  ;  Man2   2      off   off   on    on/off
                      119  ;  Man1   1      on    off   on    off
                      120  ;
                      121  ;  Solonoid resistance(depending on temperature and 
                                                        production differences)
                      122  ;  SS1,SS2,TCC,CCS, 20-30 ohms
                      123  ;  EPC, 4.0-6.5 ohms
                      124  ;
                      125  ;  The Electronic Pressure Control Solonoid is a 
                                                      "variable force" solonoid
                      126  ;  that operates on a current control of between 0 


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 4
MC68HC908GP32 User Bootloader


                                                     and 1 amp. Maximum current
                      127  ;  of 1 amp produces a line pressure of ~0PSI. No 
                                                   current will produce maximum
                      128  ;  line pressure depending on engine speed and gear 
                                                         selection. Loss of EPC
                      129  ;  signal will result in maximum pressure.
                      130  ;
                      131  ;  Observations of OEM EPC PWM proved very difficult
                                                             to determine. Best
                      132  ;  estimate is a frequency of between ~1.4KHZ at 
                                                        max current, to ~20KHZ.
                      133  ;  at min current With amplitude dither to prevent 
                                                           solonoid "stiction",
                      134  ;  of between 160HZ and 210HZ. Dither amplitude 
                                                    proved unable to determine.
                      135  ;  The first model of this controller successfully 
                                                              used a commercial
                      136  ;  proportioning solonoid driver that had a 
                                                 frequency of 10KHZ with dither
                      137  ;  frequency set at ~200HZ and amplitude set at max 
                                                                   value of 10%
                      138  ;
                      139  ;  Generally speaking, Line pressure is proportional
                                                          to throttle position,
                      140  ;  the exception being steady throttle state above 
                                                             stall. Under these
                      141  ;  conditions, line pressure is determined from a 
                                                      "torque table", to taylor
                      142  ;  pressure to engine torque output.
                      143  ;  Separate "curves" are provided for the following 
                                                                    conditions:
                      144  ;  - Stall speed (below ~ 4MPH)
                      145  ;  - Above stall speed
                      146  ;  - 1-2 shift
                      147  ;  - 2-3 shift
                      148  ;  - 3-4 shift
                      149  ;  A constant line pressure of ~125 PSI (regulated 
                                                           maximum) is used for
                      150  ;  Torque Converter Clutch applications and Decel 
                                                        conditions when the TCC
                      151  ;  is applied.
                      152  ;
                      153  ;  Note! SS2 takes longer to apply than SS1, so SS1 
                                                                is delayed in a
                      154  ;  Manual Lever change from Man2 to Drive. (Stays 
                                                                in second gear)
                      155  ;
                      156  ;  It is necessay to use time delays for the 
                                                     following four conditions:
                      157  ;  - During gear changes and TCC application to 
                                                            allow line pressure
                      158  ;    to build up before solonoid state changes.
                      159  ;  - To provide a time delay off to make sure line 
                                                             pressure is raised
                      160  ;    for a sufficient length of time to ensure 
                                                         completion of friction
                      161  ;    element state changes.
                      162  ;  - To ensure that CCS is not energised in forth 


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 5
MC68HC908GP32 User Bootloader


                                                                          gear.
                      163  ;  - To allow for the shift solonoid rate change on 
                                                       the Man2 to Drive shift.
                      164  ;
                      165  ;  TCC application is prohibited below engine 
                                                             speeds of ~1200RPM
                      166  ;
                      167  ;  Sequential Gear Selector Joy Stick contacts 
                                                                     active low
                      168  ;  (downstate = 0)
                      169  ;
                      170  ;  Torque Converter Clutch Selector Joy Stick 
                                                            contacts active low
                      171  ;  (downstate = 0)
                      172  ;
                      173  ;  Outputs active low
                      174  ;
                      175  ; - OEM Observations:
                      176  ;
                      177  ;  - In Park, Neutral, and Reverse, EPC-sol voltage 
                                                       is inversly proportional
                      178  ;    to TPS voltage (OEM TPS max 3.8v).
                      179  ;  - In stall conditions (below aprox 4MPH), in 
                                                        Drive and Man2, EPC-sol
                      180  ;    voltage is inversly proportional to TPS 
                                                    voltage (OEM TPS max 3.8v).
                      181  ;  - Above stall conditions, in D and Man2, EPC-sol 
                                                            voltage is inversly
                      182  ;    proportional to TPS voltage (OEM TPS max 
                                                     3.8v), but EPC-sol voltage
                      183  ;    min 3.8v (76%).
                      184  ;  - In Man1, EPC-sol voltage is inversly proportion
                                                              al to TPS voltage
                      185  ;    (OEM TPS max 3.8v), but EPC-sol voltage min 
                                                                    2.5v (50%).
                      186  ;  - During upshifts, EPC-sol voltage is increased 
                                                            for a time duration
                      187  ;    sufficient to complete the shift, then returns 
                                                                 to above stall
                      188  ;    condition.
                      189  ;  - During TCC application, EPC-sol voltage is 
                                                  increased for a time duration
                      190  ;    duration sufficient to complete the application
                                                                              .
                      191  ;  - Above aprox 1200RPM, and at closed throttle, 
                                                                EPC-sol current
                      192  ;    is reduced enough to result in 125 PSI line 
                                                         pressure to accomodate
                      193  ;    engine braking in D4, D3 and Man2.
                      194  ;
                      195  ;  - PIP inputs ~12v,3 pulse per engine revolution 
                                                               for 6 cyl engine
                      196  ;  - PIP inputs ~12v,4 pulse per engine revolution 
                                                               for 8 cyl engine
                      197  ;
                      198  ;  - VSS inputs >12v square wave AC peak to peak, 
                                                            8000 pulse per mile
                      199  ;


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 6
MC68HC908GP32 User Bootloader


                      200  ;***************************************************
                                                      *************************
                      201  
                      202  ;***************************************************
                                                      *************************
                      203  ; - OEM Idle Air Control Solonoid information:
                      204  ;
                      205  ;  - IAC Solonoid resistance 6.0-13.0 ohms (internal
                                                                fly back diode)
                      206  ;    Observations of IAC solonoid PWM was a 
                                                            frequency of 161HZ.
                      207  ;***************************************************
                                                      *************************
                      208  
                      209  ;***************************************************
                                                      *************************
                      210  ; - Decel Fuel Cut permissive and Exhaust Brake 
                                                                   information:
                      211  ;
                      212  ;   The engine controller has provision to limit 
                                                       the injector pulse width
                      213  ;   to a low enough value that it doesn't have time 
                                                         to exceed the injector
                      214  ;   dead band, so no fuel will be injected. The 
                                                    transmission controller has
                      215  ;   a permissive for this condition. The transmissio
                                                       n must be in a gear that
                      216  ;   supports engine braking, the TPS must be at 
                                                   closed throttle, engine RPMs
                      217  ;   must be above the "RPMtcc" set point, and the 
                                                        torque converter clutch
                      218  ;   must be applied.
                      219  ;   If the permissives for the TCC are met, and it 
                                                            is applied, the DFC
                      220  ;   permissive can be enabled by depressing the 
                                                    "DFCen" switch momentarely.
                      221  ;   It will be disabled automatically if any of the 
                                                             permissives are no
                      222  ;   longer met, or the "DFCdis" switch is pressed 
                                                                   momentarely.
                      223  ;   The exhaust brake has the same permissive 
                                                requirements as the DFC enable.
                      224  ;   It can only be applied after the DFC permissive 
                                                           has been enabled, by
                      225  ;   keeping the "DFCen" switch depressed for the 
                                                      "DFCdel" time period. The
                      226  ;   Exhaust brake is released in the same manner as 
                                                            the DFC permissive.
                      227  ;***************************************************
                                                      *************************
                      228  
                      229  
                      230  ;***************************************************
                                                      *************************
                      231  
                      232  ;***************************************************
                                                      *************************
                      233  ;


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 7
MC68HC908GP32 User Bootloader


                      234  ; ------------------------- MS_TECA Hardware Wiring 
                                                        -----------------------
                      235  ;
                      236  ;***************************************************
                                                      *************************
                      237  ;
                      238  ; ----- Power connections -----
                      239  ;
                      240  ;  12 Volt input   - Pin 19
                      241  ;  Vref 5V output  - Pin 8
                      242  ;  Common ground   - Pins 22,23,24,26,27,29,32,33,34
                                                                            ,35
                      243  ;
                      244  ; ----- Inputs [Port Name - Function - Pin#] -----
                      245  ;
                      246  ;  IRQ        - Engine Speed Sensor,(invert to IRQ) 
                                                                       - Pin 21
                      247  ;  PTB0/AD0  - Manifold Absolute Pressure           
                                                                       - No Pin
                      248  ;  PTB1/AD1  - Manual Lever Position Switch         
                                                                        - Pin 3
                      249  ;  PTB2/AD2  - Transmisssion Oil Temperature        
                                                                        - Pin 4
                      250  ;  PTB3/AD3  - Line Pressure                        
                                                                        - Pin 5
                      251  ;  PTB4/AD4  - Battery Voltage/Boot Loader Entry    
                                                                       - No Pin
                      252  ;  PTB5/AD5  - Idle Air Control Input               
                                                                        - Pin 6
                      253  ;  PTB6/AD6  - Electronic Pressure Control Trim     
                                                                       - Pin 25
                      254  ;  PTB7/AD7  - Throttle Position Switch             
                                                                        - Pin 7
                      255  ;  PTA0/KBD0 - Vehicle Speed Sensor                 
                                                                       - Pin 20
                      256  ;  PTA1      - Exhaust Pressure Switch              
                                                                        - Pin 9
                      257  ;  PTA2      - DFC/Disable/Exhaust Brake release 
                                                             contacts  - Pin 28
                      258  ;  PTA3      - DFC Enable/Exhaust Brake apply 
                                                          contacts     - Pin 10
                      259  ;  PTA4      - Torque Converter Clutch release 
                                                           contacts    - Pin 11
                      260  ;  PTA5      - Torque Converter Clutch apply 
                                                         contacts      - Pin 30
                      261  ;  PTA6      - Shift down contacts                  
                                                                       - Pin 12
                      262  ;  PTA7      - Shift up contacts                    
                                                                       - Pin 31
                      263  ;
                      264  ; ----- Outputs [Port Name - Function - Pin#] -----
                      265  ;
                      266  ;  PTD2/MOSI  - Decel Fuel Cut Permissive for 
                                                      engine           - Pin 13
                      267  ;  PTD3/SPSCK - Program Loop Counter LED            
                                                                       - No Pin
                      268  ;  PTD4/T1CH0 - Electronic Pressure Control voltage 
                                                                       - Pin 37


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 8
MC68HC908GP32 User Bootloader


                      269  ;  PTD5/T1CH1 - Idle Air Control Solonoid           
                                                                       - Pin 36
                      270  ;  PTC0       - Shift Solonoid 2                    
                                                                       - Pin 17
                      271  ;  PTC1       - Shift Solonoid 1                    
                                                                       - Pin 18
                      272  ;  PTC2       - Torque Converter Clutch Solonoid    
                                                                       - Pin 16
                      273  ;  PTC3       - Coast Clutch Solonoid               
                                                                       - Pin 15
                      274  ;  PTC4       - Exhaust Brake air and secondary air 
                                                            solonoids  - Pin 14
                      275  ;
                      276  ; ----- Spares [Port name/Pin# - Header Socket#] 
                                                                          -----
                      277  ;
                      278  ;  PTD0/SS    - H1
                      279  ;  PTD1/MISO  - H2
                      280  ;  Pin 1      - H3
                      281  ;  Pin 2      - H4
                      282  ;
                      283  ;***************************************************
                                                      *************************
                      284  
                      285  ;***************************************************
                                                      *************************
                      286  
                      287  
                      288  
 0040                 289       org      ram_start           ; Origin  Memory location $0040=64
 0040                 290       include "MS_TECA_V12.inc"    ; Include definitions for MS_TECA_V12.asm
                      291  ;****************************************************************************
                      292  ;
                      293  ;         MS_TECA_V12.inc (header file for MS_TECA_V12.asm)  3/01/10
                      294  ;
                      295  ;           Semi automatic controller for the Ford E4OD transmission
                      296  ;
                      297  ;         By Robert Hiebert with technical assistance from Dan Williams
                      298  ;           and all those who contributed to the Megasquirt projects
                      299  ;
                      300  ;****************************************************************************
                      301  
                      302  *****************************************************************************
                      303  *****************************************************************************
                      304  **   M E G A S Q U I R T - 2 0 0 1 - V2.00
                      305  **
                      306  **   (C) 2002 - B. A. Bowling And A. C. Grippo
                      307  **
                      308  **   This header must appear on all derivatives of this code.
                      309  **
                      310  *****************************************************************************
                      311  *****************************************************************************
                      312  
                      313  ;****************************************************************************
                      314  ;
                      315  ; ------------------------- MS_TECA Hardware Wiring  -----------------------
                      316  ;
                      317  ;****************************************************************************
                      318  ;
                      319  ; ----- Power connections -----
                      320  ;
                      321  ;  12 Volt input   - Pin 19
                      322  ;  Vref 5V output  - Pin 8
                      323  ;  Common ground   - Pins 22,23,24,26,27,29,32,33,34,35
                      324  ;
                      325  ; ----- Inputs [Port Name - Function - Pin#] -----
                      326  ;
                      327  ;  IRQ       - Engine Speed Sensor,(invert to IRQ)         - Pin 21
                      328  ;  PTB0/AD0  - Manifold Absolute Pressure                  - No Pin
                      329  ;  PTB1/AD1  - Manual Lever Position Switch                - Pin 3
                      330  ;  PTB2/AD2  - Transmisssion Oil Temperature               - Pin 4
                      331  ;  PTB3/AD3  - Line Pressure                               - Pin 5
                      332  ;  PTB4/AD4  - Battery Voltage/Boot Loader Entry           - No Pin
                      333  ;  PTB5/AD5  - Idle Air Control Input                      - Pin 6
                      334  ;  PTB6/AD6  - Electronic Pressure Control Trim            - Pin 25
                      335  ;  PTB7/AD7  - Throttle Position Switch                    - Pin 7
                      336  ;  PTA0/KBD0 - Vehicle Speed Sensor                        - Pin 20
                      337  ;  PTA1      - Exhaust Pressure Switch                     - Pin 9
                      338  ;  PTA2      - DFC/Disable/Exhaust Brake release contacts  - Pin 28
                      339  ;  PTA3      - DFC Enable/Exhaust Brake apply contacts     - Pin 10
                      340  ;  PTA4      - Torque Converter Clutch release contacts    - Pin 11
                      341  ;  PTA5      - Torque Converter Clutch apply contacts      - Pin 30
                      342  ;  PTA6      - Shift down contacts                         - Pin 12
                      343  ;  PTA7      - Shift up contacts                           - Pin 31
                      344  ;
                      345  ; ----- Outputs [Port Name - Function - Pin#] -----
                      346  ;
                      347  ;  PTD2/MOSI  - Decel Fuel Cut Permissive for engine           - Pin 13
                      348  ;  PTD3/SPSCK - Program Loop Counter LED                       - No Pin
                      349  ;  PTD4/T1CH0 - Electronic Pressure Control Voltage           - Pin 37
                      350  ;  PTD5/T1CH1 - Idle Air Control Solonoid                      - Pin 36
                      351  ;  PTC0       - Shift Solonoid 2                               - Pin 17
                      352  ;  PTC1       - Shift Solonoid 1                               - Pin 18
                      353  ;  PTC2       - Torque Converter Clutch Solonoid               - Pin 16
                      354  ;  PTC3       - Coast Clutch Solonoid                          - Pin 15
                      355  ;  PTC4       - Exhaust Brake air and secondary air solonoids  - Pin 14
                      356  ;
                      357  ; ----- Spares [Port name/Pin# - Header Socket#] -----
                      358  ;
                      359  ;  PTD0/SS    - H1
                      360  ;  PTD1/MISO  - H2
                      361  ;  Pin 1      - H3
                      362  ;  Pin 2      - H4
                      363  ;
                      364  ;****************************************************************************
                      365  
                      366  ;****************************************************************************
                      367  ; ------------------------ Input Port Equates -------------------------------
                      368  ;****************************************************************************
                      369  
 0040                 370  VehSpd      equ 0     ; Vehicle Speed input on Port A0
 0040                 371  ExhPS       equ 1     ; Exhaust Pressure Switch on Port A1
 0040                 372  DFCdis      equ 2     ; DFC/Exhaust Brake release contacts on Port A2
 0040                 373  DFCen       equ 3     ; DFC/Exhaust Brake apply contacts on Port A3
 0040                 374  TCCrel      equ 4     ; TCC release contacts on Port A4
 0040                 375  TCCapp      equ 5     ; TCC apply contacts on Port A5
 0040                 376  ShiftDn     equ 6     ; Shift Down contacts on Port A6
 0040                 377  ShiftUp     equ 7     ; Shift Up contacts on Port A7
                      378  
                      379  ;****************************************************************************
                      380  ; ------------------------ Output Port Equates ------------------------------
                      381  ;****************************************************************************
                      382  
 0040                 383  SS2      equ 0     ; Shift Solonoid #2 on Port C0
 0040                 384  SS1      equ 1     ; Shift Solonoid #1 on Port C1
 0040                 385  TCC      equ 2     ; Torque Converter Clutch Solonoid on Port C2
 0040                 386  CCS      equ 3     ; Coast Clutch Solonoid #1 on Port C3
 0040                 387  ExhBrk   equ 4     ; Exhaust Brake air and secondary air solonoids Port C4
 0040                 388  DFCper   equ 2     ; Decel Fuel Cut permissive for Engine Control on Port D2
 0040                 389  LoopFrq  equ 3     ; Loop frequency counter on Port D3
 0040                 390  EPC      equ 4     ; EPC PWM on Port D4
 0040                 391  IACpwm   equ 5     ; IAC PWM on Port D5
                      392  
                      393  ;****************************************************************************
                      394  ; ------------------ "mlpsp","mlpsp_cur" Status equates ---------------------
                      395  ;****************************************************************************


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 9
MC68HC908GP32 User Bootloader


                      396  
 0040                 397  P      equ 1     ; MLPS in "Park" position             0 = out of range
 0040                 398  R      equ 2     ; MLPS in "Reverse" position          0 = out of range
 0040                 399  N      equ 3     ; MLPS in "Neutral" position          0 = out of range
 0040                 400  D      equ 4     ; MLPS in "Drive" position            0 = out of range
 0040                 401  M2     equ 5     ; MLPS in "Manual Second" position    0 = out of range
 0040                 402  M1     equ 6     ; MLPS in "Manual First" position     0 = out of range
 0040                 403  SF     equ 7     ; MLPS Sensor Failure                 0 = out of range
                      404  
                      405  ;****************************************************************************
                      406  ; ----- "gearcnt","gearcnt_prv","gear_cur","gear_com" Status equates --------
                      407  ;****************************************************************************
                      408  
 0040                 409  first     equ 1     ; Drive 1
 0040                 410  second    equ 2     ; Drive 2
 0040                 411  third     equ 3     ; Drive 3
 0040                 412  forth     equ 4     ; Drive 4
                      413  
                      414  ;****************************************************************************
                      415  ; ---------------- "inputs" Operating Status bit field equates --------------
                      416  ;****************************************************************************
                      417  
 0040                 418  tachrise    equ 0     ; 1 = tach rising edge flag    0 = "tachrise" cleared
 0040                 419  clk100k     equ 1     ; 1 = 0.1S   clock tick flag   0 = "clk100k" cleared
 0040                 420  adcc        equ 2     ; 1 = ADC complete flag        0 = "adcc" cleared
 0040                 421  vssp        equ 3     ; 1 = Veh Spd rising edge flag 0 = "vssp" cleared
 0040                 422  iacon       equ 4     ; 1 = IAC pulse width on flag  0 = "iacon" cleared
 0040                 423  SUhi        equ 5     ; 1 = Shift Up last pass Hi    0 = Shift Up lst pss Lo
 0040                 424  SDhi        equ 6     ; 1 = Shift Dn last pass Hi    0 = Shift Dn lst pss Lo
                      425  
                      426  ;****************************************************************************
                      427  ; ---------------- "trans" Operating Status bit field equates ---------------
                      428  ;****************************************************************************
                      429  
 0040                 430  Estop     equ 0     ; 1 = Engine stopped             0 = Engine not stopped
 0040                 431  Vstop     equ 1     ; 1 = Vehicle stopped            0 = Vehicle not stopped
 0040                 432  ClsThrt   equ 2     ; 1 = TPS at closed throttle     0 = TPS not Close Throt
 0040                 433  RPMtcc    equ 3     ; 1 = RPM TCC app permissive     0 = No RPM TCC perm.
 0040                 434  MPHstall  equ 4     ; 1 = MPH at stall condition     0 = MPH above stall
 0040                 435  accel     equ 5     ; 1 = TPS DOT EPC mode           0 = No TPS DOT EPC mode
 0040                 436  PSIbrk    equ 6     ; 1 = Exh Brk Exh prs permissive 0 = No ExhBrk prs perm.
                      437  
                      438  ;****************************************************************************
                      439  ; --------------- "trans2" Operating Status bit field equates ---------------
                      440  ;****************************************************************************
                      441  
 0040                 442  CCSon     equ 0     ; 1 = CCS on                     0 = CCS off
 0040                 443  TCCon     equ 1     ; 1 = TCC on                     0 = TCC off
 0040                 444  DFCon     equ 2     ; 1 = DFC permissive             0 = No DFC permissive
 0040                 445  Brkon     equ 3     ; 1 = Exhaust Brake on           0 = Exh Brk off
 0040                 446  SSprog    equ 4     ; 1 = Gear Change in progress    0 = No GC in progress
 0040                 447  TCprog    equ 5     ; 1 = TCC apply in progress      0 = No TCC in progress
 0040                 448  D1D2      equ 6     ; 1 = In Drive 1 or 2            0 = Not in Drive 1 or 2
                      449  
                      450  
                      451  ;****************************************************************************
                      452  ; --------------- "shift" Operating Status bit field equates ---------------
                      453  ;****************************************************************************
                      454  
 0040                 455  EPCrTCC   equ 0     ; 1 = EPC rising for TCC app   0 = No EPC rise for TCC
 0040                 456  EPChTCC   equ 1     ; 1 = EPC holding for TCC app  0 = No EPC hold for TCC
 0040                 457  EPCrSS    equ 2     ; 1 = EPC rising for shift     0 = No EPC rise for shift
 0040                 458  EPChSS    equ 3     ; 1 = EPC holding for shift    0 = No EPC hold for shift
 0040                 459  SS1del    equ 4     ; 1 = SS1 apply delay          0 = No SS1 delay
 0040                 460  CCSdel    equ 5     ; 1 = CCS apply delay          0 = No CCS delay
 0040                 461  SSsdel    equ 6     ; 1 = SSs apply delay(both)    0 = No SSs delay
 0040                 462  Brkdel    equ 7     ; 1 = ExhBrk apply delay       0 = No ExhBrk delay
                      463  
                      464  
                      465  ;****************************************************************************
                      466  ; ------------- "tconf" Tuning Configuration bit field equates --------------
                      467  ;****************************************************************************
                      468  
 0040                 469  tt      equ 0     ; 1 = TOT cor enabled        0 = TOT cor disabled
 0040                 470  tr      equ 1     ; 1 = Trim cor enabled       0 = Trim cor disabled
 0040                 471  cyl     equ 2     ; 1 = 8 cylinder             0 = 6 cylinder
                      472  
                      473  ;****************************************************************************
                      474  ; --------------------- "TuneConfig" Status equates -------------------------
                      475  ;****************************************************************************
                      476  
                      477  ;TOTon    equ 0     ; 1 = TOT cor enabled        0 = TOT cor disabled
                      478  ;Trimon   equ 1     ; 1 = Trim cor enabled       0 = Trim cor disabled
                      479  ;Cylno    equ 2     ; 1 = 8 cylinder             0 = 6 cylinder
                      480  
                      481  
                      482  ;****************************************************************************
                      483  ; ------------------------ "dfSel" Status equates --------------------------
                      484  ;****************************************************************************
                      485  
 0040                 486  selTO      equ 0     ; Select "TO" Duty Factor            0 = not selected
 0040                 487  selStl     equ 1     ; Select "EPC_stall" Duty Factor     0 = not selected
 0040                 488  sel12      equ 2     ; Select "EPC_12" Duty Factor        0 = not selected
 0040                 489  sel23      equ 3     ; Select "EPC_23" Duty Factor        0 = not selected
 0040                 490  sel34      equ 4     ; Select "EPC_34" Duty Factor        0 = not selected
 0040                 491  selTCC     equ 5     ; Select "EPC_TCC" Duty Factor       0 = not selected
 0040                 492  selDcl     equ 6     ; Select "EPC_Decel" Duty Factor     0 = not selected
 0040                 493  selM1      equ 7     ; Select "EPC_M1" Duty Factor        0 = not selected
                      494  
                      495  
                      496  ;****************************************************************************
                      497  ; ----------------- RAM Variables (512 bytes available) ---------------------
                      498  ; I/O registers from $0000 to $0039 (decimal 0 to 63)
                      499  ; Direct page addressing from $0000 to $00FF (decimal 0 to 255)
                      500  ; Ram end at $023F (decimal 575)
                      501  ;****************************************************************************
                      502  
                      503  ;Memory Location $0040 (decimal 64)
                      504  
                      505  ms_ram_start:
                      506  
                      507  ;****************************************************************************
                      508  ; ------------ RS232 Real Time Download and Datalog Variables ---------------
                      509  ;****************************************************************************
                      510  
 0040                 511  secH:           ds 1     ; Seconds counter, Hi byte
 0041                 512  secL:           ds 1  ; Seconds counter, Lo byte
 0042                 513  RPM:            ds 1     ; Engine RPM/20 (0 to 5100 rpm in byte variable)
 0043                 514  MPH:            ds 1     ; MPH*2 (0 to 128 MPH in byte variable)
 0044                 515  trans:          ds 1     ; Transmission status bit field variable(1 of 2)
 0045                 516  trans2:         ds 1     ; Transmission status bit field variable(2 of 2)
 0046                 517  gearcnt:        ds 1     ; Current gear count(sequential gear selector)
 0047                 518  MAP:            ds 1     ; Manifold Absolute Pressure 8 bit ADC reading
 0048                 519  MLPS:           ds 1     ; Manual Lever Position Switch 8 bit ADC reading
 0049                 520  TOT:            ds 1     ; Transmission Oil Temperature 8 bit ADC reading
 004A                 521  Lprs:           ds 1     ; Line Pressure 8 bit ADC reading
 004B                 522  BAT:            ds 1     ; Battery Voltage 8 bit ADC reading
 004C                 523  IAC:            ds 1     ; Engine Idle Air Control Sensor 8 bit ADC reading
 004D                 524  Trim:           ds 1     ; Electronic Pressure Control trim 8 bit ADC rdng
 004E                 525  TPS:            ds 1     ; Throttle Position Sensor 8 bit ADC reading
 004F                 526  KPA:            ds 1     ; Manifold Absolute Pressure in KPA
                      527  
                      528  ;Memory Location $0050 (decimal 80)
                      529  
 0050                 530  MLPSp:          ds 1     ; Manual Lever Position Switch position
 0051                 531  TOTemp:         ds 1     ; Transmission Oil Temperature variable


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 10
MC68HC908GP32 User Bootloader


                      532                           ; (degrees F to fit range in byte variable)
 0052                 533  Lpsi:           ds 1     ; Line pressure in PSI
 0053                 534  Volts:          ds 1     ; Battery voltage to 0.1V resolution
 0054                 535  IACpw:          ds 1     ; IAC pulse width variable(0-60, 100uS resolution)
 0055                 536  TPSp:           ds 1     ; TPSscale * 100 / TPSspan = TPSp(TPS percent)
 0056                 537  TOTempDif:      ds 1     ; Difference between "TOTemp" and 180(140F)
 0057                 538  TOTempP:        ds 1     ; TOTemp percent calculation value (TOTemp/180)
 0058                 539  TOTAdd:         ds 1     ; Trans Oil Temp correction Add/Subtract value
 0059                 540  TrimDif:        ds 1     ; Difference between "Trim" and 128(mid point)
 005A                 541  TrimP:          ds 1     ; Trim percent calculation value (TrimDif/128)
 005B                 542  TrimAdd:        ds 1     ; EPC Trim correction Add/Subtract value
 005C                 543  df:             ds 1     ; EPC Duty Factor from "TO" table, stall or shift
                      544                           ; tables, or, absolute values "EPC_TCC", or
                      545                           ; "EPC_decel" (scaled to 256)
 005D                 546  df1:            ds 1     ; "df" after TOT cor, before Trim cor
 005E                 547  dff:            ds 1     ; "df1" after Trim cor(Final EPC Duty Factor)
 005F                 548  EPCpwH:         ds 1     ; EPC Pulse Width Hi byte
                      549  
                      550  ;Memory Location $0060 (decimal 96)
                      551  
 0060                 552  EPCpwL:         ds 1     ; EPC Pulse Width Lo byte
                      553  
                      554  
                      555  ;****************************************************************************
                      556  ; This marks the end of the real time download variables, 33 in total
                      557  ;****************************************************************************
                      558  ;****************************************************************************
                      559  ; --------------------- Status Bit Field Variables --------------------------
                      560  ; - NOTE! ";*"  denotes that this variable is listed with RS232 variables
                      561  ;****************************************************************************
                      562  
                      563  ;*trans:          ds 1     ; Transmission status bit field variable(1 of 2)
                      564  ;*trans2:         ds 1     ; Transmission status bit field variable(2 of 2)
 0061                 565  shift:          ds 1     ; Gear change status bit field variable
 0062                 566  tconf:          ds 1     ; Tuning Configuration status bit field variable
 0063                 567  inputs:         ds 1     ; Input status bit field variable(1 of 2)
                      568  
                      569  ;****************************************************************************
                      570  ; --------------------- TPS Calibration Variables ---------------------------
                      571  ; - NOTE! ";*"  denotes that this variable is listed with RS232 variables
                      572  ;****************************************************************************
                      573  
 0064                 574  TPSscale    ds 1     ; TPS - CT_cnt = TPSscale
                      575  ;*TPSp        ds 1     ; TPSscale * 100 / TPSspan = TPSp(TPS %)
                      576  
                      577  ;****************************************************************************
                      578  ; ----------------------- Time Clock Variables ------------------------------
                      579  ; - NOTE! ";*"  denotes that this variable is listed with RS232 variables
                      580  ;****************************************************************************
                      581  
 0065                 582  uSx100:         ds 1  ; 100 Microseconds counter
 0066                 583  mS:             ds 1  ; Milliseconds counter
 0067                 584  mSx5:           ds 1     ; 5 Milliseconds counter
 0068                 585  mSx20:          ds 1     ; 20 Milliseconds counter
 0069                 586  mSx100:         ds 1     ; 100 Milliseconds counter
                      587  ;*secL:           ds 1     ; Seconds counter, Lo byte
                      588  ;*secH:           ds 1     ; Seconds counter, Hi byte
                      589  
                      590  
                      591  ;****************************************************************************
                      592  ; --------------------- 8 bit ADC input Variables --------------------------
                      593  ; ----------------- (ordered list from "MAP" to "TPS") --------------------
                      594  ; - NOTE! ";*"  denotes that this variable is listed with RS232 variables
                      595  ;****************************************************************************
                      596  
                      597  ;*MAP:            ds 1     ; Manifold Absolute Pressure 8 bit ADC reading
                      598  ;*MLPS:           ds 1     ; Manual Lever Position Switch 8 bit ADC reading
                      599  ;*TOT:            ds 1     ; Transmission Oil Temperature 8 bit ADC reading
                      600  ;*Lprs:           ds 1     ; Line Pressure 8 bit ADC reading
                      601  ;*BAT:            ds 1     ; Battery Voltage 8 bit ADC reading
                      602  ;*IAC:            ds 1     ; Engine Idle Air Control Sensor 8 bit ADC reading
                      603  ;*Trim:           ds 1     ; Electronic Pressure Control trim 8 bit ADC rdng
                      604  ;*TPS:            ds 1     ; Throttle Position Sensor 8 bit ADC reading
 006A                 605  adsel:          ds 1     ; ADC Selector Variable
                      606  
                      607  ;****************************************************************************
                      608  ; --------------------- ADC Conversion Variables --------------------------
                      609  ; - NOTE! ";*"  denotes that this variable is listed with RS232 variables
                      610  ;****************************************************************************
                      611  
                      612  ;*KPA:            ds 1     ; Manifold Absolute Pressure in KPA
                      613  ;*MLPSp:          ds 1     ; Manual Lever Position Switch position
                      614  ;*TOTemp:         ds 1     ; Transmission Oil Temperature variable
                      615                             ;(degrees F - 40 to fit range in byte variable)
                      616  ;*Lpsi:           ds 1     ; Line pressure in PSI
                      617  ;*Volts:          ds 1     ; Battery voltage to 0.1V resolution
                      618  ;*IACpw:          ds 1     ; IAC pulse width variable(0-60, 100uS resolution)
                      619  
                      620  ;****************************************************************************
                      621  ; --------------------- Gear Selection Variables --------------------------
                      622  ; - NOTE! ";*"  denotes that this variable is listed with RS232 variables
                      623  ;****************************************************************************
                      624  
 006B                 625  mlpsp_cur:      ds 1     ; MLPS position current
                      626  ;*gearcnt:        ds 1     ; Current gear count(sequential gear selector)
 006C                 627  gearcnt_prv:    ds 1     ; Previous gear count
 006D                 628  gear_cur:       ds 1     ; Current gear
 006E                 629  gear_com:       ds 1     ; Commanded gear
                      630  
                      631  ;***************************************************************************
                      632  ; -------------------- Engine RPM Calculation Variables -------------------
                      633  ; - NOTE! ";*"  denotes that this variable is listed with RS232 variables
                      634  ;***************************************************************************
                      635  
 006F                 636  RPMcH:          ds 1     ; RPM period counter Hi byte (100uS resolution)
                      637  
                      638   ;Memory Location $0070 (decimal 112)
                      639  
 0070                 640  RPMcL:          ds 1     ; RPM period counter Lo byte (100uS resolution)
 0071                 641  RPMpH:          ds 1     ; RPM period Hi byte (100 uSresolution)
 0072                 642  RPMpL:          ds 1     ; RPM period Lo byte (100 uSresolution)
                      643  ;*RPM:            ds 1     ; Engine RPM/20 (0 to 5100 rpm in byte variable)
                      644  
                      645  ;****************************************************************************
                      646  ; ----------------- Vehicle Speed Calculation Variables --------------------
                      647  ; - NOTE! ";*"  denotes that this variable is listed with RS232 variables
                      648  ;****************************************************************************
                      649  
 0073                 650  MPHcH:          ds 1     ; MPH period counter Hi byte (100uS resolution)
 0074                 651  MPHcL:          ds 1     ; MPH period counter Lo byte (100uS resolution)
 0075                 652  MPHpH:          ds 1     ; MPH period Hi byte (100uS resolution)
 0076                 653  MPHpL:          ds 1     ; MPH period Lo byte (100uS resolution)
                      654  ;*MPH:            ds 1     ; MPH/2 (0 to 128 MPH in byte variable)
                      655  
                      656  ;****************************************************************************
                      657  ; --------------------- EPC PW Calculation Variables ------------------------
                      658  ; - NOTE! ";*"  denotes that this variable is listed with RS232 variables
                      659  ;****************************************************************************
                      660  
 0077                 661  dfSel:         ds 1     ; Duty Factor Select variable bit field
                      662  ;*TOTempDif:      ds 1     ; Difference between "TOTemp" and 180(140F)
                      663  ;*TOTempP:        ds 1     ; TOTemp percent calculation value (TOTemp/180)
                      664  ;*TOTAdd:         ds 1     ; Trans Oil Temp correction Add/Subtract value
                      665  ;*TrimDif:        ds 1     ; Difference between "Trim" and 128(mid point)
                      666  ;*TrimP:          ds 1     ; Trim percent calculation value (TrimDif/128)
                      667  ;*TrimAdd:        ds 1     ; EPC Trim correction Add/Subtract value


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 11
MC68HC908GP32 User Bootloader


                      668  ;*df:             ds 1     ; EPC Duty Factor from "TO" table, stall or shift
                      669                             ; tables, or, absolute values "EPC_TCC", or
                      670                             ; "EPC_decel" (scaled to 256)
                      671  ;*df1:            ds 1     ; "df" after TOT cor, before Trim cor
                      672  ;*dff:            ds 1     ; "df1" after Trim cor(Final EPC Duty Factor)
                      673  ;*EPCpwH:         ds 1     ; EPC Pulse Width Hi byte
                      674  ;*EPCpwL:         ds 1     ; EPC Pulse Width Lo byte
                      675  
                      676  ;****************************************************************************
                      677  ; ----------------------- Variables for integer math ------------------------
                      678  ;****************************************************************************
                      679  
 0078                 680  INTACC1:      rmb 4
 007C                 681  INTACC2:      rmb 4
                      682  
                      683  ;Memory Location $0080 (decimal 128)(at INTACC1+1)
                      684  
                      685  ;****************************************************************************
                      686  ; ------------------------ Temporary variables ------------------------------
                      687  ;****************************************************************************
                      688  
 0080                 689  tmp1          ds     1
 0081                 690  tmp2          ds     1
 0082                 691  tmp3          ds     1
 0083                 692  tmp4          ds     1
 0084                 693  tmp5          ds     1
 0085                 694  tmp6          ds     1
 0086                 695  tmp7          ds     1
 0087                 696  tmp8          ds     1
 0088                 697  tmp9          ds     1
 0089                 698  tmp10         ds     1
 008A                 699  tmp11         ds     1
 008B                 700  tmp12         ds     1
 008C                 701  tmp13         ds     1
 008D                 702  tmp14         ds     1
 008E                 703  tmp15         ds     1
 008F                 704  tmp16         ds     1
                      705  
                      706  ;Memory Location $0090 (decimal 144)
                      707  
 0090                 708  tmp17         ds     1
 0091                 709  tmp18         ds     1
 0092                 710  tmp19         ds     1
 0093                 711  tmp20         ds     1
 0094                 712  tmp21         ds     1
 0095                 713  local_tmp     ds     1
                      714  
                      715  ;****************************************************************************
                      716  ; ------- Serial Communications Interface Parameters and Variables ---------
                      717  ;****************************************************************************
                      718  
 0096                 719  txcnt:        ds 1     ; SCI transmitter count (incremented)
 0097                 720  txgoal:       ds 1     ; SCI number of bytes to transmit
 0098                 721  txmode:       ds 1     ; Transmit mode flag
 0099                 722  rxoffset:     ds 1     ; Offset placeholder when receiving VE/constants
                      723                         ; vis. SCI
                      724  
                      725  ;****************************************************************************
                      726  ; --------------------- Flash Burner Routine Variables ----------------------
                      727  ;****************************************************************************
                      728  
 009A                 729  burnSrc:      ds 2T    ; Burn routine variable
 009C                 730  burnDst:      ds 2T    ; Burn routine variable
 009E                 731  burnCount:    ds 1T    ; Burn routine variable
                      732  
                      733  ;****************************************************************************
                      734  ; ----------------------------- Misc. Variables -----------------------------
                      735  ;****************************************************************************
                      736  
 009F                 737  LoopCntr:      ds 1     ; Loop counter for main loop frequency check
                      738  
                      739  ;Memory Location $00A0 (decimal 160)
                      740  
 00A0                 741  IACcnt:        ds 1     ; IAC counter for IACpw (100uS resolution)
 00A1                 742  TIMcnt:        ds 1     ; 20mS timer counter
 00A2                 743  TPS_prv:       ds 1     ; TPS rdg previous(update every 0.1S for TPS DOT)
 00A3                 744  ShftUpDB:      ds 1     ; Shift Up contacts de-bounce 1mS counter variable
 00A4                 745  ShftDnDB:      ds 1     ; Shift Dn contacts de-bounce 1mS counter variable
 00A5                 746  AIACcnt:       ds 1     ; Auto IAC duration counter value(100mS res)
 00A6                 747  Spare1:        ds 1     ; Blank place holder for 16 byte increments
 00A7                 748  Spare2:        ds 1     ; Blank place holder for 16 byte increments
 00A8                 749  Spare3:        ds 1     ; Blank place holder for 16 byte increments
 00A9                 750  Spare4:        ds 1     ; Blank place holder for 16 byte increments
 00AA                 751  Spare5:        ds 1     ; Blank place holder for 16 byte increments
 00AB                 752  Spare6:        ds 1     ; Blank place holder for 16 byte increments
 00AC                 753  Spare7:        ds 1     ; Blank place holder for 16 byte increments
 00AD                 754  Spare8:        ds 1     ; Blank place holder for 16 byte increments
 00AE                 755  Spare9:        ds 1     ; Blank place holder for 16 byte increments
 00AF                 756  Spare10:       ds 1     ; Blank place holder for 16 byte increments
                      757  
                      758  ;Memory Location $00B0 (decimal 176)
                      759  
                      760  ms_ram_end:
                      761  
                      762  ;****************************************************************************
                      763  ; -------------------- Flash Configuration constants ------------------------
                      764  ;  EPC tables and constants, "TO_table" is entry point, everything is offset
                      765  ;  from this point.
                      766  ;****************************************************************************
                      767  
                      768  ;****************************************************************************
                      769  ; - First group of 64 bytes
                      770  ;****************************************************************************
                      771  
                      772  ms_rf_start:
                      773  
 00B0                 774  TO_table      rmb $40     ; 64 bytes for "TO" Table values
                      775  
                      776  ;Memory Location $00F0 (decimal 240)
                      777  
                      778  ;****************************************************************************
                      779  ; - Second group of 64 bytes
                      780  ;****************************************************************************
                      781  
 00F0                 782  RPM_range     rmb $08     ; RPM bins for 2D interpolation of "TO" table
 00F8                 783  KPA_range     rmb $08     ; KPA bins for 2D interpolation of "TO" table
                      784  
                      785  ;Memory Location $0100 (decimal 256)(end of direct page)
                      786  
 0100                 787  TPS_range     rmb $08     ; TPS bins for 2D interpolation of EPC tables
 0108                 788  EPC_stall     rmb $08     ; EPC stall bins (function of TPS)
                      789  
                      790  ;Memory Location $0110 (decimal 272)
                      791  
 0110                 792  EPC_12        rmb $08     ; EPC 1-2 shift bins (function of TPS)
 0118                 793  EPC_23        rmb $08     ; EPC 2-3 shift bins (function of TPS)
                      794  
                      795  ;Memory Location $0120 (decimal 288)
                      796  
 0120                 797  EPC_34        rmb $08     ; EPC 3-4 shift bins (function of TPS)
 0128                 798  EPC_M1        rmb $08     ; EPC M1 bins (function of TPS)
                      799  
                      800  ;Memory Location $0130 (decimal 304)
                      801  
                      802  ;****************************************************************************
                      803  ; - Third group of 64 bytes


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 12
MC68HC908GP32 User Bootloader


                      804  ;****************************************************************************
                      805  
 0130                 806  EPC_TCC       rmb $01     ; EPC pulse width for TCC application
 0131                 807  EPC_decel     rmb $01     ; EPC pulse width for decel conditions
 0132                 808  EPC_rise      rmb $01     ; EPC rise time delay(20mS resolution)
 0133                 809  EPC_hold      rmb $01     ; EPC hold time delay(20mS resolution)
 0134                 810  SS1_del       rmb $01     ; SS1 apply time delay(20mS res)(M2-D2 shift)
 0135                 811  CCS_del       rmb $01     ; CCS apply time delay(20mS res)(D4-D3 shift)
 0136                 812  SSs_del       rmb $01     ; SSs release time delay(20mS res)(D3-D4 shift)
 0137                 813  ExBrk_del     rmb $01     ; Exhaust Brake apply time delay(20mS res)
 0138                 814  TCC_min_RPM   rmb $01     ; TCC apply minimum RPM permissive
 0139                 815  MPH_stall     rmb $01     ; MPH maximum for stall EPC
 013A                 816  TPSrate       rmb $01     ; TPS DOT rate threshold for EPC stall settings
 013B                 817  CT_cnt        rmb $01     ; Closed throttle position ADC count
 013C                 818  WOT_cnt       rmb $01     ; Wide Open throttle position ADC count
 013D                 819  TPSspan       rmb $01     ; WOT_cnt - CT_cnt = TPSspan
 013E                 820  CT_min        rmb $01     ; Closed throttle position minimum %
 013F                 821  TrimFac       rmb $01     ; EPC Trim adjustment max value
                      822  
                      823  ;Memory Location $0140 (decimal 320)
                      824  
 0140                 825  TuneConfig    rmb $01     ; Tuning configuration variable
 0141                 826  RPMk          rmb $02     ; RPM calculation constant
 0143                 827  TOTempFac     rmb $01     ; Trans Oil Temp adjustment max value
 0144                 828  TOThi         rmb $01     ; TOT correction Hi Limit (degreesF)
 0145                 829  TOTlo         rmb $01     ; TOT correction Lo Limit (degreesF)
 0146                 830  DBup          rmb $01     ; Upshift debounce counter (ms)
 0147                 831  DBdn          rmb $01     ; Downshift debounce counter (ms)
 0148                 832  EPC_M1_decel  rmb $01     ; EPC pulse width for M1 decel conditions
                      833  
                      834  
                      835  
 0149                 836  Blank_2       rmb $27     ; 39 Blank place holders for 64 byte increments
                      837  
                      838  ;Memory Location $0170 (decimal 368)
                      839  
                      840  ms_rf_end:
                      841  
                      842  ;****************************************************************************
                      843  ; ---------------------------- Misc. Equates --------------------------------
                      844  ;****************************************************************************
                      845  
 0170                 846  ms_ram_size       equ {ms_ram_end-ms_ram_start}
 0170                 847  ms_rf_size        equ {ms_rf_end-ms_rf_start}
 0170                 848  ms_total_ram_size equ {ms_rf_end-ms_ram_start}
                      849  
                      850  
                      851  
                      852  
                      853  
                      854  ;***************************************************************************
                      855  ;
                      856  ; Main Routine Here - Initialization and main loop
                      857  ;
                      858  ; Note: Org down 256 bytes below the "rom_start" point
                      859  ;       because of erase bug in bootloader routine
                      860  ;
                      861  ; Note: Items commented out after the Start entry point are
                      862  ;       taken care of in the Boot_R12.asm code
                      863  ;
                      864  ;***************************************************************************
                      865  
                      866  
 8256                 867       org   {rom_start + 256}     ; Origin at memory location
                      868                                   ; $8000+256 = 32,768+256 = 33,024=$8100
                      869  
                      870  Start:
 8256 [03] 4501ED     871       ldhx   #init_stack+1     ; Load index register with value in
                      872                                ; init_stack+1(Set the stack Pointer)
 8259 [02] 94         873       txs                      ; Transfer value in index register Lo byte
                      874                                ; to stack
                      875                                ;(Move before burner to avoid conflict)
                      876  
                      877  ;* Note - uncomment this code if you do not use the Bootloader to initilize *
                      878  ;       clra
                      879  ;    sta     copctl
                      880  ;    mov     #%00000001,config2
                      881  ;    mov     #%00001001,config1
                      882  ;    mov     #%00000001,config1
                      883  ;    ldhx    #ram_last+1             ; Set the stack Pointer
                      884  ;    txs                             ;  to the bottom of RAM
                      885  
                      886  ;****************************************************************************
                      887  ; - Set the phase lock loop for a bus frequency of 8.003584mhz
                      888  ;  (Boot loader initially sets it at 7.3728mhz)
                      889  ;****************************************************************************
                      890  
                      891  ;PllSet:
 825A [04] 1936       892       bclr    BCS,pctl          ; Select external Clock Reference
 825C [04] 1B36       893       bclr    PLLON,pctl        ; Turn Of PLL
 825E [04] 6E0236     894       mov     #$02,pctl         ; Set P and E Bits
 8261 [04] 6ED03A     895       mov     #$D0,pmrs         ; Set L ($C0 for 7.37 MHz)
 8264 [04] 6E0338     896       mov     #$03,pmsh         ; Set N (MSB)
 8267 [04] 6ED139     897       mov     #$D1,pmsl         ; Set N (LSB) ($84 for 7.37 MHz)
 826A [04] 1E37       898       bset    AUTO,pbwc         ; Enable automatic bandwidth control
 826C [04] 1A36       899       bset    PLLON,pctl        ; Turn back on PLL
                      900  PLL_wait:
 826E [05] 0D37FD     901       brclr   LOCK,pbwc,PLL_wait   ; Wait for PLL to lock
 8271 [04] 1836       902       bset    BCS,pctl             ; Select VCO as base clock
                      903  
                      904  ;****************************************************************************
                      905  ; - Set up the port data-direction registers, Set directions,
                      906  ;   Preset state of pins to become outputs
                      907  ;****************************************************************************
                      908  
                      909  ; Port A
 8273 [04] 6EFF0D     910       mov     #$FF,PTAPUE     ; Move %11111111 into Port A pullup register
                      911                               ;(Set all pullups)
 8276 [04] 6EFF00     912       mov     #$FF,PORTA      ; Move %11111111 into Port A Data Register
                      913                               ;(preinit all pins Hi, no input signals)
 8279 [03] 3F04       914       clr     DDRA            ; Clear Port A Data Direction Register
                      915                               ;(Inputs on PTA7,6,5,4,3,2,1,0)
                      916                               ;(= Shiftup,Shiftdn,TCCapp,TCCrel,DFCen,
                      917                               ;(DFCdis,ExhPS,VehSpd,
                      918  
                      919  ; Port B
 827B [03] 3F01       920       clr     PORTB           ; Clear Port B Data Register
                      921                               ;(Preinit all pins low)
 827D [03] 3F05       922       clr     DDRB            ; Clear Port B Data Direction Register
                      923                               ;(Set as ADC inputs, "ADSEL" selects channel)
                      924  
                      925  ; Port C
 827F [04] 6E1F02     926       mov     #$1F,PORTC      ; Move %00011111 into Port C Data Register
                      927                               ;(preinit output pins Hi, no outputs)
 8282 [02] A61F       928       lda     #$1F            ; Load accumulator with %00011111
                      929                               ; (set up port directions, 1 = out)
 8284 [03] B706       930       sta     DDRC            ; Copy to Port C Data Direction Register
                      931                               ; Inputs on PTC7,6,5 = NA,NA,NA
                      932                               ; Outputs on PTC4,3,2,1,0
                      933                               ; = ExhBrk,CCS,TCC,SS1,SS2
                      934  
                      935  ; Port D
 8286 [04] 6EFF0F     936       mov     #$FF,PTDPUE     ; Move %11111111 into Port E pullup register
                      937                               ;(Set all pullups)
 8289 [04] 6E3C03     938       mov     #$3C,PORTD      ; Move %00111100 into Port D Data Register
                      939                               ;(preinit output pins Hi, no outputs)


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 13
MC68HC908GP32 User Bootloader


 828C [02] A6FC       940       lda     #$FC            ; Load accumulator with %11111100
                      941                               ; (init port directions 1 = out)
 828E [03] B707       942       sta     DDRD            ; Copy to Port D Data Direction Register
                      943                               ; Inputs on PTD1,0 = H2,H1
                      944                               ; Outputs on PTD7,6,5,4,3,2
                      945                               ; = NA,NA,IACsol,EPCsol,LoopFrq,DFCper
                      946  
                      947  ; Port E
 8290 [03] 3F08       948       clr     PORTE           ; Clear Port E Data Register (to avoid glitches)
 8292 [02] A601       949       lda     #$01            ; Load accumulator with %00000001
                      950                               ; (set up port directions, 1 = out)
                      951                               ; (Serial Comm Port)
 8294 [03] B70C       952       sta     DDRE            ; Copy to Port E Data Direction Register
                      953  
                      954  
                      955  ;****************************************************************************
                      956  ; Set up TIM2 as a free running ~1us counter. Set Channel 0 output compare
                      957  ; to generate the ~100us(0.1ms) clock tick interupt vector "TIM2CH0_ISR:"
                      958  ;****************************************************************************
                      959  
 8296 [04] 6E332B     960       mov     #$33,T2SC       ; Move %00110011 into Timer2
                      961                               ; Status and Control Register
                      962                               ;(Disable interupts, stop timer)
                      963                               ;(Prescale and counter cleared))
                      964                               ;(Prescale for bus frequency / 8)
 8299 [04] 6EFF2E     965       mov     #$FF,T2MODH     ; Move decimal 255 into T2 modulo reg Hi
 829C [04] 6EFF2F     966       mov     #$FF,T2MODL     ; Move decimal 255 into T2 modulo reg Lo
                      967                               ;(free running timer)
 829F [04] 6E0031     968       mov     #$00,T2CH0H     ; Move decimal 0 into T1CH0 O/C register Hi
 82A2 [04] 6E6432     969       mov     #$64,T2CH0L     ; Move decimal 100 into T1CH0 O/C register Lo
                      970                               ;(~100uS)=(~0.1ms)
 82A5 [04] 6E5430     971       mov     #$54,T2SC0      ; Move %01010100 into Timer2
                      972                               ; channel 0 status and control register
                      973                               ; (Output compare, interrupt enabled)
 82A8 [04] 6E032B     974       mov     #$03,T2SC       ; Move %00000011 into Timer2
                      975                               ; Status and Control Register
                      976                               ; Disable interupts, counter Active
                      977                               ; Prescale for bus frequency / 8
                      978                               ; 8,003584hz/8=1000448hz
                      979                               ; = .0000009995sec
                      980  
                      981  
                      982  ;****************************************************************************
                      983  ; - Set up TIM1 as a ~0.125us counter. Set modulo interrupt to generate the
                      984  ;   ~100us(.1ms) period (10KHZ),for PWM current control of EPC solonoid
                      985  ;   pulse width "on" point. Interrupt vector "TIM1OV_ISR:"
                      986  ;   Set channel 0 port control pin for PWM current control of EPC Solonoid
                      987  ;   pulse width "off" point on PTD4.
                      988  ;   Set channel 1 normal output pin for IAC PWM on PTD5
                      989  ;****************************************************************************
                      990  
 82AB [04] 6E3020     991       mov     #$30,T1SC       ; Move %00110000 into Timer1
                      992                               ; Status and Control Register
                      993                               ;(Disable interupts, stop timer)
                      994                               ;(Prescale and counter cleared))
                      995                               ;(Prescale for bus frequency / 1)
 82AE [04] 6E0323     996       mov     #$03,T1MODH     ; Move decimal 3 into T1 modulo reg Hi
 82B1 [04] 6E2024     997       mov     #$20,T1MODL     ; Move decimal 32 into T1 modulo reg Lo
                      998                               ;( decimal 800 = ~100uS period)=(~10KHZ)
 82B4 [04] 6E0026     999       mov     #$00,T1CH0H     ; Move decimal 0 into T1CH0 O/C register Hi
 82B7 [04] 6E0027    1000       mov     #$00,T1CH0L     ; Move decimal 0 into T1CH0 O/C register Lo
 82BA [04] 6E3025    1001       mov     #$30,T1SC0      ; Move %00110000 into TIM1 CH0 Status and
                     1002                               ; Control Register (PTD4 port control, logic Lo)
                     1003                               ; (PTD5 normal pin)
 82BD [04] 6E4020    1004       mov     #$40,T1SC       ; Move %01000000 into Timer1
                     1005                               ; Status and Control Register
                     1006                               ; Enable interupts, counter Active
                     1007                               ; Prescale for bus frequency / 1
                     1008                               ; 8,003584hz / 1 = 8,003584hz
                     1009                               ; = .0000001249sec
                     1010  
                     1011  
                     1012  ;****************************************************************************
                     1013  ; - Set up Serial Communications Interface Module
                     1014  ;****************************************************************************
                     1015  
 82C0 [02] A630      1016       lda      #$30           ; Load accumulator with %110000
 82C2 [03] B719      1017       sta      SCBR           ; Copy to SCI Baud Rate Register
                     1018                               ; 8003584/(64*13*1)=9619.7 baud
 82C4 [04] 1C13      1019       bset     ensci,SCC1     ; Set enable SCI bit of SCI Control Register 1
                     1020                               ; (Enable SCI)
 82C6 [04] 1414      1021       bset     RE,SCC2        ; Set receiver enable bit of SCI Control Reg. 2
                     1022                               ; (Enable receiver)
 82C8 [04] 1A14      1023       bset     SCRIE,SCC2     ; Set SCI receive interrupt enable bit of
                     1024                               ; SCI Control Register 2 (Enable Rcv. Interrupt)
 82CA [03] B616      1025       lda      SCS1           ; Load accumulator with SCI Status Register 1
                     1026                               ; (Clear SCI transmitter Empty Bit)
 82CC [03] 3F96      1027       clr      txcnt          ; Clear SCI transmitter count
                     1028                               ; (incremented)(characters transmitted)
 82CE [03] 3F97      1029       clr      txgoal         ; Clear SCI number of bytes to transmit
                     1030                               ; (characters to be transmitted)
                     1031  
                     1032  
                     1033  ;****************************************************************************
                     1034  ; - Set up IRQ Interrupt (tach input)
                     1035  ;****************************************************************************
                     1036  
 82D0 [04] 6E041D    1037       mov     #$04,INTSCR     ; Move %00000100 into IRQ Status and Control
                     1038                               ; Register (Enable IRQ (turn on interrupts))
                     1039                               ; (falling edge only)
                     1040  
                     1041  
                     1042  ;****************************************************************************
                     1043  ;  - Set up Keyboard Interrupt on PTA0, Vehicle Speed Sensor
                     1044  ;   (8000 pulse per mile)
                     1045  ;****************************************************************************
                     1046  
                     1047  
 82D3 [04] 6E021A    1048       mov     #$02,INTKBSCR       ; Move %00000010 into Keyboard Status
                     1049                                   ; and Control Register
                     1050                                   ;(Keyboard interrupts masked)
                     1051                                   ;(interrupts on falling edges only)
 82D6 [04] 6E011B    1052       mov     #$01,INTKBIER       ; Move %00000001 into Keyboard Interrupt
                     1053                                   ; Enable Register
                     1054                                   ;(Keyboard interrupts on PTA0
 82D9 [04] 141A      1055       bset    ACKK,INTKBSCR       ; Set the Keyboard Acknowledge bit of
                     1056                                   ; Keyboard Status and Control Register
                     1057                                   ;(clear any false interrupts)
 82DB [04] 131A      1058       bclr    IMASKK,INTKBSCR     ; Clear the Interrupt Mask bit of
                     1059                                   ; Keyboard Status and Control Register
                     1060                                   ;(enable interrupts)
                     1061  
                     1062  ;****************************************************************************
                     1063  ; - Load the configurable constants (TO_Table, etc) from Flash to RAM
                     1064  ;****************************************************************************
                     1065  
 82DD [01] 8C        1066       clrh                        ; Clear index register Hi byte
 82DE [01] 5F        1067       clrx                        ; Clear index register Lo byte
                     1068  
                     1069  load_ram:
 82DF [04] D6E100    1070       lda     ms_rf_start_f,x     ; Load accumulator with value in
                     1071                                   ; "ms_rf_start_f" table, offset in index
                     1072                                   ; register Lo byte
 82E2 [03] E7B0      1073       sta     ms_rf_start,x       ; Copy to "ms_rf_start" table, offset in
                     1074                                   ; index register Lo byte
 82E4 [02] AF01      1075       aix     #1                  ; Add immediate value (1)to index register


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 14
MC68HC908GP32 User Bootloader


                     1076                                   ; H:X<_(H:X)+(16<<M)
 82E6 [03] 6500C0    1077       cphx    #ms_rf_size         ; Compare index register with memory
                     1078                                   ; (H:X)-(M:M+$0001)
 82E9 [03] 26F4      1079       bne     load_ram            ; If the Z bit of CCR is clear, branch to
                     1080                                   ; load_ram:
                     1081  
                     1082  ;****************************************************************************
                     1083  ; - Initialize the variables to 0 or to some acceptable starting value
                     1084  ;****************************************************************************
                     1085  
 82EB [03] 3F40      1086       clr     secH            ; Seconds counter, Hi byte
 82ED [03] 3F41      1087       clr     secL            ; Seconds counter, Lo byte
 82EF [03] 3F42      1088       clr     RPM             ; Engine RPM/20 (0 to 5100 rpm in byte var)
 82F1 [03] 3F43      1089       clr     MPH             ; MPH*2 (0 to 128 MPH in byte variable)
 82F3 [03] 3F44      1090       clr     trans           ; Transmission status bit field variable(1 of 2)
 82F5 [03] 3F45      1091       clr     trans2          ; Transmission status bit field variable(2 of 2)
 82F7 [03] 3F46      1092       clr     gearcnt         ; Current gear count(sequential gear selector)
 82F9 [03] 3F47      1093       clr     MAP             ; Manifold Absolute Pressure 8 bit ADC reading
 82FB [03] 3F48      1094       clr     MLPS            ; Manual Lever Position Switch 8 bit ADC reading
 82FD [03] 3F49      1095       clr     TOT             ; Transmission Oil Temperature 8 bit ADC reading
 82FF [03] 3F4A      1096       clr     Lprs            ; Line Pressure 8 bit ADC reading
 8301 [03] 3F4B      1097       clr     BAT             ; Battery Voltage 8 bit ADC reading
 8303 [03] 3F4C      1098       clr     IAC             ; Engine Idle Air Control Sensor 8 bit ADC rdng
 8305 [03] 3F4D      1099       clr     Trim            ; Electronic Pressure Control trim 8 bit ADC
 8307 [03] 3F4E      1100       clr     TPS             ; Throttle Position Sensor 8 bit ADC reading
 8309 [03] 3F4F      1101       clr     KPA             ; Manifold Absolute Pressure in KPA
 830B [03] 3F50      1102       clr     MLPSp           ; Manual Lever Position Switch position
 830D [03] 3F51      1103       clr     TOTemp          ; Transmission Oil Temperature variable
                     1104                               ; (degrees F to fit range in byte variable)
 830F [03] 3F52      1105       clr     Lpsi            ; Line pressure in PSI
 8311 [03] 3F53      1106       clr     Volts           ; Battery voltage to 0.1V resolution
 8313 [03] 3F54      1107       clr     IACpw           ; IAC pulse width variable(0-60, 100uS res)
 8315 [03] 3F55      1108       clr     TPSp            ; TPSscale * 100 / TPSspan = TPSp(TPS percent)
 8317 [03] 3F56      1109       clr     TOTempDif       ; Difference between "TOTemp" and 180(140F)
 8319 [03] 3F57      1110       clr     TOTempP         ; TOTemp percent calculation value (TOTemp/180)
 831B [03] 3F58      1111       clr     TOTAdd          ; Trans Oil Temp correction Add/Subtract value
 831D [03] 3F59      1112       clr     TrimDif         ; Difference between "Trim" and 128(mid point)
 831F [03] 3F5A      1113       clr     TrimP           ; Trim percent calculation value (TrimDif/128)
 8321 [03] 3F5B      1114       clr     TrimAdd         ; EPC Trim correction Add/Subtract value
 8323 [03] 3F5C      1115       clr     df              ; EPC Duty Factor from "TO" table, stall or shift
                     1116                               ; tables, or, absolute values "EPC_TCC", or
                     1117                               ; "EPC_decel" (scaled to 256)
 8325 [03] 3F5D      1118       clr     df1             ; "df" after TOT cor, before Trim cor
 8327 [03] 3F5E      1119       clr     dff             ; "df1" after Trim cor(Final EPC Duty Factor)
 8329 [03] 3F5F      1120       clr     EPCpwH          ; EPC Pulse Width Hi byte
 832B [03] 3F60      1121       clr     EPCpwL          ; EPC Pulse Width Lo byte
 832D [03] 3F61      1122       clr     shift           ; Gear change status bit field variable
 832F [03] 3F62      1123       clr     tconf           ; Tuning Configuration status bit field variable
 8331 [03] 3F63      1124       clr     inputs          ; Input status bit field variable(1 of 2)
 8333 [03] 3F64      1125       clr     TPSscale        ; TPS - CT_cnt = TPSscale
 8335 [03] 3F65      1126       clr     uSx100          ; 100 Microseconds counter
 8337 [03] 3F66      1127       clr     mS              ; Milliseconds counter
 8339 [03] 3F67      1128       clr     mSx5            ; 5 Milliseconds counter
 833B [03] 3F68      1129       clr     mSx20           ; 20 Milliseconds counter
 833D [03] 3F69      1130       clr     mSx100          ; 100 Milliseconds counter
 833F [03] 3F6A      1131       clr     adsel           ; ADC Selector Variable
 8341 [03] 3F6B      1132       clr     mlpsp_cur       ; MLPS position current
 8343 [03] 3F6C      1133       clr     gearcnt_prv     ; Previous gear count
 8345 [03] 3F6D      1134       clr     gear_cur        ; Current gear
 8347 [03] 3F6E      1135       clr     gear_com        ; Commanded gear
 8349 [03] 3F6F      1136       clr     RPMcH           ; RPM period counter Hi byte (100uS resolution)
 834B [03] 3F70      1137       clr     RPMcL           ; RPM period counter Lo byte (100uS resolution)
 834D [03] 3F71      1138       clr     RPMpH           ; RPM period Hi byte (100 uSresolution)
 834F [03] 3F72      1139       clr     RPMpL           ; RPM period Lo byte (100 uSresolution)
 8351 [03] 3F73      1140       clr     MPHcH           ; MPH period counter Hi byte (100uS res)
 8353 [03] 3F74      1141       clr     MPHcL           ; MPH period counter Lo byte (100uS res)
 8355 [03] 3F75      1142       clr     MPHpH           ; MPH period Hi byte (100uS resolution)
 8357 [03] 3F76      1143       clr     MPHpL           ; MPH period Lo byte (100uS resolution)
 8359 [03] 3F77      1144       clr     dfSel           ; Duty Factor Select variable bit field
 835B [03] 3F96      1145       clr     txcnt           ; SCI transmitter count (incremented)
 835D [03] 3F97      1146       clr     txgoal          ; SCI number of bytes to transmit
 835F [03] 3F98      1147       clr     txmode          ; Transmit mode flag
 8361 [03] 3F99      1148       clr     rxoffset        ; Offset placeholder when receiving constants
                     1149                               ; vis. SCI
 8363 [03] 3F9F      1150       clr     LoopCntr        ; Loop counter for main loop frequency check
 8365 [03] 3FA0      1151       clr     IACcnt          ; IAC counter for IACpw (100uS resolution)
 8367 [03] 3FA1      1152       clr     TIMcnt          ; 20mS timer counter
 8369 [03] 3FA2      1153       clr     TPS_prv         ; TPS rdg previous(update 0.1S for TPS DOT)
 836B [03] 3FA3      1154       clr     ShftUpDB        ; Shift Up contacts de-bounce 1mS counter var
 836D [03] 3FA4      1155       clr     ShftDnDB        ; Shift Dn contacts de-bounce 1mS counter var
 836F [03] 3FA5      1156       clr     AIACcnt         ; Auto IAC duration counter value(100mS res)
 8371 [03] 3FA6      1157       clr     Spare1          ; Blank place holder for 16 byte increments
 8373 [03] 3FA7      1158       clr     Spare2          ; Blank place holder for 16 byte increments
 8375 [03] 3FA8      1159       clr     Spare3          ; Blank place holder for 16 byte increments
 8377 [03] 3FA9      1160       clr     Spare4          ; Blank place holder for 16 byte increments
 8379 [03] 3FAA      1161       clr     Spare5          ; Blank place holder for 16 byte increments
 837B [03] 3FAB      1162       clr     Spare6          ; Blank place holder for 16 byte increments
 837D [03] 3FAC      1163       clr     Spare7          ; Blank place holder for 16 byte increments
 837F [03] 3FAD      1164       clr     Spare8          ; Blank place holder for 16 byte increments
 8381 [03] 3FAE      1165       clr     Spare9          ; Blank place holder for 16 byte increments
 8383 [03] 3FAF      1166       clr     Spare10         ; Blank place holder for 16 byte increments
                     1167  
                     1168  ;****************************************************************************
                     1169  ; - Load "tconf" direct page bit field variables with values according to
                     1170  ;   the "TuneConfig" variable in flash/ram
                     1171  ;****************************************************************************
                     1172  
 8385 [04] C60140    1173       lda     TuneConfig     ; Load accumulator with value in Tuning
                     1174                              ; Configuration variable
 8388 [02] A501      1175       bit      #$01          ; Bit test with %00000001 to see if
                     1176                              ; TOT cor enable bit is set
 838A [03] 2604      1177       bne     SET_TT         ; If Z bit of CCR is clear, branch
                     1178                              ; to SET_TT: (trans temp correction)
 838C [04] 1162      1179       bclr    tt,tconf       ; Clear "tt" bit of "tconf" variable
 838E [03] 2002      1180       bra     CHK_TR         ; Branch to CHK_TR:
                     1181  
                     1182  SET_TT:
 8390 [04] 1062      1183       bset    tt,tconf       ; Set "tt" bit of "tconf" variable
                     1184  
                     1185  CHK_TR:
 8392 [02] A502      1186       bit      #$02          ; Bit test with %00000010 to see if
                     1187                              ; Trim cor enable bit is set
 8394 [03] 2604      1188       bne     SET_TR         ; If Z bit of CCR is clear, branch
                     1189                              ; to SET_TR: (manual trim correction)
 8396 [04] 1362      1190       bclr    tr,tconf       ; Clear "tr" bit of "tconf" variable
 8398 [03] 2002      1191       bra     CHK_CYL        ; Branch to CHK_CYL:
                     1192  
                     1193  SET_TR:
 839A [04] 1262      1194       bset    tr,tconf       ; Set "tr" bit of "tconf" variable
                     1195  
                     1196  CHK_CYL:
 839C [02] A504      1197       bit     #$04           ; Bit test with %00000100 to see if
                     1198                              ; 8 cylinder bit is set
 839E [03] 260F      1199       bne     SET_CYL        ; If Z bit of CCR is clear, branch
                     1200                              ; to SET_CYL:
 83A0 [01] 8C        1201       clrh                   ; Clear index register Hi byte
 83A1 [04] 1562      1202       bclr    cyl,tconf      ; Clear "cyl" bit of "tconf" variable
 83A3 [02] AE27      1203       ldx     #$27           ; Load index register Lo byte with $27 (6 cyl)
 83A5 [04] CF0141    1204       stx     RPMk           ; Copy value in index register Lo byte to RPMk
 83A8 [02] AE10      1205       ldx     #$10           ; Load index register Lo byte with $10
 83AA [04] CF0142    1206       stx     RPMk+1         ; Copy value in index register Lo byte to RPMk+1
 83AD [03] 200D      1207       bra     Stb_ADC        ; Branch to Stb_ADC:
                     1208  
                     1209  SET_CYL:
 83AF [04] 1462      1210       bset    cyl,tconf      ; Set "cyl" bit of "tconf" variable
 83B1 [01] 8C        1211       clrh                   ; Clear index register Hi byte


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 15
MC68HC908GP32 User Bootloader


 83B2 [02] AE1D      1212       ldx     #$1D           ; Load index register Lo byte with $1D
 83B4 [04] CF0141    1213       stx     RPMk           ; Copy value in index register Lo byte to RPMk
 83B7 [02] AE4C      1214       ldx     #$4C           ; Load index register Lo byte with $4C
 83B9 [04] CF0142    1215       stx     RPMk+1         ; Copy value in index register Lo byte to RPMk+1
                     1216  
                     1217  ;****************************************************************************
                     1218  ; - Fire up the ADC, and perform one conversion, Set up clock source for ADC
                     1219  ;   Do an initial conversion just to stabilize the ADC
                     1220  ;****************************************************************************
                     1221  
                     1222  Stb_ADC:
 83BC [02] A670      1223       lda     #$70      ; Load accumulator with %01110000
 83BE [03] B73E      1224       sta     ADCLK     ; Copy to ADC Clock Register
                     1225                         ;( bus clock/8 = ~1mhz )
 83C0 [02] A607      1226       lda     #$07      ; Load accumulator with %00000111
                     1227                         ;(one conversion, no interrupt on channel AD7)
 83C2 [03] B73C      1228       sta     ADSCR     ; Copy to ADC Status and Control Register
                     1229  
                     1230  ADCWait:
 83C4 [05] 0F3CFD    1231       brclr   coco,ADSCR,ADCWait   ; If "conversions complete flag" bit of
                     1232                                    ; ADC Status and Control Register is clear
                     1233                                    ; branch to ADCWait lable
                     1234                                    ;(keep looping while COnversion
                     1235                                    ; COmplete flag = 0)
 83C7 [03] B63D      1236       lda    ADR                   ; Load accumulator with value in ADC Result
                     1237                                    ; Variable (read value from ADc Result)
 83C9 [03] B74D      1238       sta    Trim                  ; Copy to EPC trim ADC Reading
 83CB [03] 3F6A      1239       clr    adsel                 ; Clear ADC channel selector variable
                     1240  
                     1241  ;****************************************************************************
                     1242  ; - Read the state of the Shift Up and Shift Down contacts, and copy state
                     1243  ;   to "pin state last" flags.
                     1244  ;****************************************************************************
                     1245  
 83CD [05] 0E0004    1246       brset   Shiftup,porta,SUFLG_HI     ; if "Shiftup"bit of Port A is
                     1247                                          ; set, branch to SUFLG_HI:
 83D0 [04] 1B63      1248       bclr    SUhi,inputs                ; Clear "SUhi" bit of "inputs" var
 83D2 [03] 2002      1249       bra     READ_SD                    ; Branch to READ_SD:
                     1250  
                     1251  SUFLG_HI:
 83D4 [04] 1A63      1252       bset    SUhi,inputs                ; Set "SUhi" bit of "inputs" var
                     1253  
                     1254  READ_SD:
 83D6 [05] 0C0004    1255       brset   Shiftdn,porta,SDFLG_HI     ; if "Shiftdn"bit of Port A is
                     1256                                          ; set, branch to SDFLG_HI:
 83D9 [04] 1D63      1257       bclr    SDhi,inputs                ; Clear "SDhi" bit of "inputs" var
 83DB [03] 2002      1258       bra     TURN_ON_INTS               ; Branch to TURN_ON_INTS:
                     1259  
                     1260  SDFLG_HI:
 83DD [04] 1C63      1261       bset    SDhi,inputs                ; Set "SDhi" bit of "inputs" var
                     1262  
                     1263  
                     1264  TURN_ON_INTS:
 83DF [02] 9A        1265       cli                          ; Clear intrupt mask
                     1266                                    ;( Turn on all interrupts now )
                     1267  
                     1268  
                     1269  ;****************************************************************************
                     1270  ;****************************************************************************
                     1271  ;********************    M A I N  E V E N T  L O O P     ********************
                     1272  ;****************************************************************************
                     1273  ;****************************************************************************
                     1274  
                     1275  ;****************************************************************************
                     1276  ; - Toggle pin 3 on Port D each program loop so frequency can be checked
                     1277  ;   with a frequency meter or scope. (for program developement)
                     1278  ;****************************************************************************
                     1279  
                     1280  LOOPER:
 83E0 [04] 339F      1281       com     LoopCntr         ; Ones compliment "LoopCntr"
                     1282                                ;(flip state of "LoopCntr")
 83E2 [03] 2604      1283       bne     SET_LOOPCHK      ; If the Z bit of CCR is clear, branch
                     1284                                ; to SET_LOOPCHK
 83E4 [04] 1703      1285       bclr    LoopFrq,PORTD    ; Clear bit 3 of Port D (Program Loop LED)
 83E6 [03] 2002      1286       bra     LOOPCHK_DONE     ; Branch to LOOPCHK_DONE:
                     1287  
                     1288  SET_LOOPCHK:
 83E8 [04] 1603      1289       bset    LoopFrq,PORTD    ; Set bit 3 of Port D (Program Loop LED)
                     1290  
                     1291  LOOPCHK_DONE:
                     1292  
                     1293  ;****************************************************************************
                     1294  ; - Check to see if it's time to turn the IAC PWM off.
                     1295  ;****************************************************************************
                     1296  
 83EA [05] 096308    1297       brclr   iacon,inputs,IAC_CHK_DONE  ; If "iacon" bit of "inputs"
                     1298                              ; variable is clear, branch to IAC_CHK_DONE:
 83ED [03] B6A0      1299       lda     IACcnt         ; Load accumulator with value in IAC counter
 83EF [03] 2604      1300       bne     IAC_CHK_DONE   ; If Z bit of CCR is clear, branch to
                     1301                              ; IAC_CHK_DONE:
 83F1 [04] 1A03      1302       bset    iacpwm,portd   ; Set "iacpwm" bit of Port D (IAC PW "off")
 83F3 [04] 1963      1303       bclr    iacon,inputs   ; Clear "iacon" bit of "inputs" variable
                     1304  
                     1305  IAC_CHK_DONE:
                     1306  
                     1307  ;****************************************************************************
                     1308  ; - Check Exhaust Pressure to see if we have PSI permissive for Exhaust
                     1309  ;   Brake application. Switch is NC to ground, opens @ 32PSI.
                     1310  ;****************************************************************************
                     1311  
 83F5 [05] 030002    1312       brclr   ExhPS,PORTA,PSI_BRK  ; If "ExhPS" bit of Port A is clear,
                     1313                                    ; branch to PSI_BRK: (switch is grounded,
                     1314                                    ; exhaust brake permitted:
 83F8 [03] 2007      1315       bra     NO_PSI_BRK           ; Jump to NO_PSI_BRK:
                     1316  
                     1317  PSI_BRK:
 83FA [05] 0C4409    1318       brset   PSIbrk,trans,PSI_CHK_DONE  ; If "PSIbrk" bit of "trans" variable
                     1319                                ; is set, branch to PSI_CHK_DONE:
                     1320                                ; (bit is already set, so skip over)
 83FD [04] 1C44      1321       bset    PSIbrk,trans     ; Set "PSIbrk" bit of "trans" variable
 83FF [03] 2005      1322       bra     PSI_CHK_DONE     ; Branch to PSI_CHK_DONE:
                     1323  
                     1324  NO_PSI_BRK:
 8401 [05] 0D4402    1325       brclr   PSIbrk,trans,PSI_CHK_DONE  ; If "PSIbrk" bit of "trans" variable
                     1326                                ; is clear, branch to PSI_CHK_DONE:
                     1327                                ; (bit is already clear, so skip over)
 8404 [04] 1D44      1328       bclr    PSIbrk,trans     ; Clear "PSIbrk" bit of "trans" variable
                     1329                                ;(exhaust pressure too high, switch not
                     1330                                ; grounded, exhaust brake not permitted
                     1331  
                     1332  PSI_CHK_DONE:
                     1333  
                     1334  ;****************************************************************************
                     1335  ; - Update the ADC readings and conversions, and check for ADC related
                     1336  ;   permissives. This is done only once per ADC conversion completion, in
                     1337  ;   the first pass through the main loop after the ADC_ISR Interrupt routine
                     1338  ;   has been completed.
                     1339  ;****************************************************************************
                     1340  
 8406 [05] 046303    1341       brset   adcc,inputs,ADC_LOOKUPS  ; If "adcc" bit of "inputs" variable
                     1342                                        ; is set, branch to ADC_LOOKUPS:
 8409 [03] CC847A    1343       jmp     NO_ADC_PASS              ; Jump to NO_ADC_PASS:
                     1344  
                     1345  ADC_LOOKUPS:
 840C [01] 8C        1346       clrh                    ; Clear index register Hi byte
 840D [01] 5F        1347       clrx                    ; Clear index register Lo byte


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 16
MC68HC908GP32 User Bootloader


                     1348  
                     1349  ;KPA_CALC:
 840E [03] B647      1350       lda     MAP             ; Load accumulator with value in Manifold
                     1351                               ; Absolute Pressure 8 bit ADC reading
 8410 [01] 97        1352       tax                     ; Copy to index register Lo byte
 8411 [04] D6F000    1353       lda     KPAfac_RH,x     ; Load accumulator with value in KPAfac_RH
                     1354                               ; table, offset in index register Lo byte
 8414 [03] B74F      1355       sta     KPA             ; Copy to Manifold Absolute Pressure in KPA
                     1356  
                     1357  ;MLPSP_CALC:
 8416 [03] B648      1358       lda     MLPS            ; Load accumulator with value in Manual Lever
                     1359                               ; Position Switch 8 bit ADC reading
 8418 [01] 97        1360       tax                     ; Copy to index register Lo byte
 8419 [04] D6F500    1361       lda     MLPSposit,x     ; Load accumulator with value in MLPS position
                     1362                               ; table, offset in index register Lo byte
 841C [03] B750      1363       sta     MLPSp           ; Copy to Manual Lever Position Switch position
                     1364                               ; variable
                     1365  
                     1366  ;TOTEMP_CALC:
 841E [03] B649      1367       lda     TOT             ; Load accumulator with value in Transmission
                     1368                               ; Oil Temperature sensor 8 bit ADC reading
 8420 [01] 97        1369       tax                     ; Copy to index register Lo byte
 8421 [04] D6F200    1370       lda     TOTdegrees,x    ; Load accumulator with value in Transmission
                     1371                               ; Oil Temp table, offset in index register Lo
 8424 [03] B751      1372       sta     TOTemp          ; Copy to Transmission Oil Temp variable
                     1373  
                     1374  ;LPSI_CALC:
 8426 [03] B64A      1375       lda     Lprs            ; Load accumulator with value in Line Pressure
                     1376                               ; table 8 bit ADC reading
 8428 [01] 97        1377       tax                     ; Copy to index register Lo byte
 8429 [04] D6F300    1378       lda     LinePress,x     ; Load accumulator with value in Line Pressure
                     1379                               ; table, offset in index register Lo byte
 842C [03] B752      1380       sta     Lpsi            ; Copy to Line Pressure in PSI variable
                     1381  
                     1382  ;VOLTS_CALC:
 842E [03] B64B      1383       lda     BAT             ; Load accumulator with value in Battery
                     1384                               ; Voltage 8 bit ADC reading
 8430 [01] 97        1385       tax                     ; Copy to index register Lo byte
 8431 [04] D6F100    1386       lda     BatVolt,x       ; Load accumulator with value in "BatVolt"
                     1387                               ; table, offset in index register Lo byte
 8434 [03] B753      1388       sta     Volts           ; Copy to Battery Voltage to 0.1V resolution
                     1389  
                     1390  ;IACPW_CALC:
 8436 [03] B64C      1391       lda     IAC             ; Load accumulator with value in Idle
                     1392                               ; Position Sensor 8 bit ADC reading
 8438 [01] 97        1393       tax                     ; Copy to index register Lo byte
 8439 [04] D6F400    1394       lda     IACcntrl,x      ; Load accumulator with value in IAC control
                     1395                               ; table, offset in index register Lo byte
 843C [03] B754      1396       sta     IACpw           ; Copy to Idle AIr Control pulse width variable
                     1397  
                     1398  ;TPS_CALC:
 843E [03] B64E      1399       lda     TPS          ; Load accumulator with value in Throttle
                     1400                            ; Position Sensor 8 bit ADC reading
 8440 [04] C1013B    1401       cmp     CT_cnt       ; Compare value in "TPS" to value in "CT_cnt"
 8443 [03] 2502      1402       blo     RAIL_LO      ; If A<M, branch to RAIL_LO:
 8445 [03] 2004      1403       bra     CHK_RAIL_HI  ; Branch to CHK_RAIL_HI:
                     1404  
                     1405  RAIL_LO:
 8447 [03] 3F55      1406       clr     TPSp         ; Clear "TPTp" variable(TPSp = 0)
 8449 [03] 2020      1407       bra     TPSCalc_DONE ; Branch to TPSCalc_DONE:
                     1408  
                     1409  CHK_RAIL_HI:
 844B [04] C1013C    1410       cmp     WOT_cnt      ; Compare value in "TPS" to value in "WOT_cnt"
 844E [03] 2402      1411       bhs     RAIL_HI      ; If A>=M, branch to RAIL_HI:
 8450 [03] 2005      1412       bra     CALC_TPSP    ; Branch to CALC_TPSP:
                     1413  
                     1414  RAIL_HI:
 8452 [04] 6E6455    1415       mov     #$64,TPSp    ; Move decimal 100 into "TPSp" variable
 8455 [03] 2014      1416       bra     TPSCalc_DONE ; Branch to TPSCalc_DONE:
                     1417  
                     1418  CALC_TPSP:
 8457 [01] 8C        1419       clrh                 ; Clear index register Hi byte
 8458 [04] C0013B    1420       sub     CT_cnt       ; Subtract A<-(A)-(M)(TPS - CT_cnt
 845B [03] B764      1421       sta     TPSscale     ; Copy result to "TPSscale" variable
 845D [02] AE64      1422       ldx     #$64         ; Load index register Lo byte with decimal 100
 845F [05] 42        1423       mul                  ; Multiply (X:A)<-(X)*(A)
 8460 [02] 89        1424       pshx                 ; Push value in index register Lo byte to stack
 8461 [02] 8A        1425       pulh                 ; Pull value from stack to index register Hi byte
 8462 [04] CE013D    1426       ldx     TPSspan      ; Load index register Lo byte with value
                     1427                            ; in "TPSspan"
 8465 [07] 52        1428       div                  ; Divide (A)<-(H:A)/(X);(H)rem
 8466 [05] CD8C74    1429       jsr     DIVROUND     ; Jump to "DIVROUND" subroutine,(round result)
 8469 [03] B755      1430       sta     TPSp         ; Copy to Throttle Position Percent variable
                     1431  
                     1432  TPSCalc_DONE:
                     1433  
                     1434  ;****************************************************************************
                     1435  ; - Check Throttle position to see if we have TPS permissive for Decel Fuel
                     1436  ;   Cut and Exhaust Brake application.
                     1437  ;****************************************************************************
                     1438  
                     1439  TPS_CHECK:
 846B [03] B655      1440       lda     TPSp               ; Load accumulator with value in Throttle
                     1441                                  ; Position Percent variable
 846D [04] C1013E    1442       cmp     CT_min             ; Compare it with value in Closed Throttle
                     1443                                  ; minimum % position variable
 8470 [03] 2404      1444       bhs     NO_TPS_BRK         ; If (A)>=(M), branch to NO_TPS_BRK:
 8472 [04] 1444      1445       bset    ClsThrt,trans      ; Set "ClsThrt" bit of "trans" variable
 8474 [03] 2002      1446       bra     TPS_CHECK_DONE     ; Branch to TPS_CHECK_DONE:
                     1447  
                     1448  NO_TPS_BRK:
 8476 [04] 1544      1449       bclr    ClsThrt,trans      ; Clear "ClsThrt" bit of "trans" variable
                     1450  
                     1451  TPS_CHECK_DONE:
 8478 [04] 1563      1452       bclr    adcc,inputs        ; Clear "adcc" bit of "inputs" variable
                     1453  
                     1454  NO_ADC_PASS:
                     1455  
                     1456  
                     1457  ;****************************************************************************
                     1458  ;
                     1459  ; ---------------------------- Computation of RPM ---------------------------
                     1460  ;
                     1461  ; RPM = CONSTANT/PERIOD
                     1462  ; Where:
                     1463  ; RPM         = Engine RPM
                     1464  ; RPM_K = 16 bit constant using .1ms clock tick (10khz)
                     1465  ;               ((10,000tickpsec*60secpmin)/(number of cyl/(stroke/2)))
                     1466  ; RPM_P = 16 bit period count between IRQ pulsed lines in 0.1ms
                     1467  ;               resolution
                     1468  ;   RPM_K
                     1469  ;   ----- = RPM
                     1470  ;   RPM_P
                     1471  ;
                     1472  ; 6cyl 4stroke RPMK = ((10,000*60)/3) = 200,000
                     1473  ; 8cyl 4stroke RPMK = ((10,000*60)/4) = 150,000
                     1474  ;
                     1475  ; We use the 100uS clock tick to calculate RPM/20. This allows us to use an
                     1476  ; 8 bit variable with a range of 0 to 5,100 RPM
                     1477  ; Our formula is now:
                     1478  ;
                     1479  ; rpm = constant/period
                     1480  ; Where:
                     1481  ; rpm         = Engine RPM/20 (0 to 5,100 RPM to fit in 8 bit variable)
                     1482  ; RPMk:RPMk+1 = 16 bit constant using 100uS clock tick (10khz)
                     1483  ;               ((10,000tickpsec*60secpmin)/(number of cyl/(stroke/2)))/20


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 17
MC68HC908GP32 User Bootloader


                     1484  ; RPMpH:RPMpL = 16 bit period count between IRQ pulsed lines in 100uS
                     1485  ;               resolution
                     1486  ;   rpmk:rpmk+1
                     1487  ;   ----------- = rpm
                     1488  ;   RPMpH:RPMpL
                     1489  ;
                     1490  ; 6cyl 4stroke rpmK = ((10,000*60)/3)/20 = 10,000 = $2710
                     1491  ; 8cyl 4stroke rpmK = ((10,000*60)/4)/20 = 7,500  = $1D4C
                     1492  ; 6cyl RPM resolution is ~05@~1000, ~20@~2000, ~76@~3000, and ~128@~5000
                     1493  ; 8cyl RPM resolution is ~06@~1000, ~27@~2000, ~61@~3000, and ~172@~5000
                     1494  ;****************************************************************************
                     1495  
                     1496  ;****************************************************************************
                     1497  ; - Calculate Engine RPM/20. This is done only once per IRQ interrupt in the
                     1498  ;   first pass through the main loop after the interrupt routine has been
                     1499  ;   completed
                     1500  ;****************************************************************************
                     1501  
                     1502  RPM_COMP:
 847A [05] 016350    1503       brclr   tachrise,inputs,NO_TACH_PASS  ; If "tachrise" bit of "inputs"
                     1504                                 ; variable is clear, branch to NO_TACH_PASS:
 847D [04] 5571      1505       ldhx    RPMph             ; Load index register with value in
                     1506                                 ; RPM Period Hy byte variable
 847F [03] 2707      1507       beq     ENG_STOP          ; If Z bit of CCR is set, branch to ENG_STOP:
 8481 [02] 8B        1508       pshh                      ; Push value in index register Hi byte
                     1509                                 ; to stack
 8482 [02] 86        1510       pula                      ; Pull value in stack to accumulator(H to A)
 8483 [01] 4D        1511       tsta                      ; Test accumulator for Z or N
 8484 [03] 2725      1512       beq     FAST_RPM_CALC     ; If the Z bit of CCR is set,
                     1513                                 ; branch to FAST_RPM_CALC:
 8486 [03] 2007      1514       bra     SLOW_RPM_CALC     ; Branch to SLOW_RPM_CALC:
                     1515  
                     1516  ENG_STOP:
 8488 [03] 3F42      1517       clr     RPM               ; Clear "RPM" variable
 848A [04] 1044      1518       bset    Estop,trans       ; Set "Estop" bit of "trans" variable
 848C [03] CC84BE    1519       jmp     RPM_CHECK         ; Jump to RPM_CHECK(engine is not running)
                     1520  
                     1521  SLOW_RPM_CALC:
 848F [03] 3F78      1522       clr     intacc1           ; Clear intacc1 variable
 8491 [03] 3F79      1523       clr     intacc1+1         ; Clear intacc1+1 variable
 8493 [04] 357C      1524       sthx    intacc2           ; Copy value in index register to
                     1525                                 ; intacc2 variable
 8495 [04] C60141    1526       lda     RPMk              ; Load accumulator with value in "RPMk"
 8498 [03] B77A      1527       sta     intacc1+2         ; Copy to "intacc1+2
 849A [04] C60142    1528       lda     RPMk+1            ; Load accumulator with value in "RPMk+1"
 849D [03] B77B      1529       sta     intacc1+3         ; Copy to "intacc1+3"
 849F [05] CD8BE8    1530       jsr     udvd32            ; Jump to subroutine udvd32 (32x16 divide)
 84A2 [03] B67B      1531       lda     intacc1+3         ; Load accumulator with value in intacc1+3
                     1532                                 ; variable (8-bit RPM result)
 84A4 [03] BE7D      1533       ldx     intacc2+1         ; Load index register Lo byte with value in
                     1534                                 ; intacc2+1 (8 bit remainder)
 84A6 [05] CD8C74    1535       jsr     DIVROUND          ; Jump to "DIVROUND" subroutine
                     1536                                 ; (round result)
 84A9 [03] 200C      1537       bra     AV_RPM            ; Branch to AV_RPM:
                     1538  
                     1539  FAST_RPM_CALC:
 84AB [04] C60141    1540       lda     RPMk          ; Load accumulator with value in RPMk variable
 84AE [02] 87        1541       psha                  ; Push value in accumulator to stack
 84AF [02] 8A        1542       pulh                  ; Pull value from stack to index register Hi byte
 84B0 [04] C60142    1543       lda     RPMk+1        ; Load accumulator with value in rpmk+1 variable
 84B3 [07] 52        1544       div                   ; Divide (A = (H:A) / X)
 84B4 [05] CD8C74    1545       jsr     DIVROUND      ; Jump to "DIVROUND" subroutine,(round result)
                     1546  
                     1547  ;****************************************************************************
                     1548  ; - Average the new "RPM" with the last "RPM" to stabilize the readings
                     1549  ;****************************************************************************
                     1550  
                     1551  AV_RPM:
 84B7 [03] BB42      1552       add     RPM           ; Add (A)<-(A)+(M)(last"RPM"+new"RPM")
 84B9 [01] 46        1553       rora                  ; Rotate right accumulator(divide by 2)
 84BA [03] B742      1554       sta     RPM           ; Copy result to "RPM"
 84BC [04] 1144      1555       bclr    Estop,trans   ; Clear "Estop" bit of "trans" variable
                     1556  
                     1557  
                     1558  
                     1559  ;****************************************************************************
                     1560  ; - Check Engine RPM to see if we have RPM permissive for Exhaust Brake
                     1561  ;   and or Torque Converter Clutch application.
                     1562  ;****************************************************************************
                     1563  
                     1564  RPM_CHECK:
 84BE [03] B642      1565       lda     RPM                ; Load accumulator with value in RPM/20
                     1566                                  ; variable
 84C0 [04] C10138    1567       cmp     TCC_min_RPM        ; Compare it with value in TCC minimum
                     1568                                  ; RPM variable
 84C3 [03] 2304      1569       bls     NO_TCC             ; If (A)<=(M), branch to NO_TCC:
 84C5 [04] 1644      1570       bset    RPMtcc,trans       ; Set "RPMtcc" bit of "trans" variable
 84C7 [03] 2002      1571       bra     RPM_CALC_DONE      ; Branch to RPM_CALC_DONE:
                     1572  
                     1573  NO_TCC:
 84C9 [04] 1744      1574       bclr    RPMtcc,trans       ; Clear "RPMtcc" bit of "trans" variable
                     1575  
                     1576  RPM_CALC_DONE:
 84CB [04] 1163      1577       bclr    tachrise,inputs    ; Clear "tachrise" bit of "inputs" variable
                     1578  
                     1579  NO_TACH_PASS:
                     1580  
                     1581  
                     1582  ;****************************************************************************
                     1583  ; - Check the state of Port A to see if the Vehicle Speed Sensor input has
                     1584  ;   returned to Hi state so the interrupt can be re-enabled.
                     1585  ;****************************************************************************
                     1586  
 84CD [05] 010002    1587       brclr   VehSpd,porta,KEYBD_RESET_DONE  ; If "VehSpd" bit of Port A is
                     1588                                   ; clear, branch to KEYBD_RESET_DONE:
 84D0 [04] 131A      1589       bclr    IMASKK,INTKBSCR     ; Clear the Interrupt Mask bit of
                     1590                                   ; Keyboard Status and Control Register
                     1591                                   ;(enable interrupts)
                     1592  
                     1593  KEYBD_RESET_DONE:
                     1594  
                     1595  
                     1596  ;****************************************************************************
                     1597  ;
                     1598  ; --------------------- Computation of Vehicle Speed ------------------------
                     1599  ;
                     1600  ; MPH = CONSTANT/PERIOD
                     1601  ; Where:
                     1602  ; mph           = Vehicle speed in MPH/2 (0 to 128 MPH to fit in 8 bit var)
                     1603  ; MPH_kH:MPH_kL   = 16 bit constant using .1ms clock tick (10khz)
                     1604  ;                 (10,000tickpsec*60secpmin*60minphr)/8000pulsepmile)*2
                     1605  ;                 mphk = 9000 = $2328
                     1606  ; MPH_pH:MPH_pL = 16 bit period count between PTA3 pulsed lines in 0.1ms
                     1607  ;                  resolution
                     1608  ;   MPH_kH:MPH_kL
                     1609  ;   ------------ = mph
                     1610  ;   MPH_pH:MPH_pL
                     1611  ;
                     1612  ; Resolution is ~2@~100MPH, ~1@~65MPH,<1@<65MPH
                     1613  ;
                     1614  ;****************************************************************************
                     1615  
                     1616  ;****************************************************************************
                     1617  ; - Calculate Vehicle Speed in MPH*2. This is done only once per receipt of
                     1618  ;   a VSS pulse on bit 3 of Port A, in the first pass through the main loop
                     1619  ;   after the pulse has been received


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 18
MC68HC908GP32 User Bootloader


                     1620  ;****************************************************************************
                     1621  
                     1622  MPH_CALC:
 84D2 [05] 076346    1623       brclr   vssp,inputs,NO_MPH_PASS  ; If "vssp" bit of "inputs" variable
                     1624                                        ; is clear, branch to NO_MPH_PASS:
 84D5 [04] 5575      1625       ldhx    MPHph             ; Load index register with value in
                     1626                                 ; MPH Period Hy byte variable
 84D7 [03] 2707      1627       beq     VEH_STOP          ; If Z bit of CCR is set, branch to VEH_STOP:
 84D9 [02] 8B        1628       pshh                      ; Push value in index register Hi byte
                     1629                                 ; to stack
 84DA [02] 86        1630       pula                      ; Pull value in stack to accumulator(H to A)
 84DB [01] 4D        1631       tsta                      ; Test accumulator for Z or N
 84DC [03] 2727      1632       beq     FAST_MPH_CALC     ; If the Z bit of CCR is set,
                     1633                                 ; branch to FAST_MPH_CALC:
 84DE [03] 2007      1634       bra     SLOW_MPH_CALC     ; Branch to SLOW_MPH_CALC:
                     1635  
                     1636  VEH_STOP:
 84E0 [03] 3F43      1637       clr     MPH               ; Clear "MPH" variable
 84E2 [04] 1244      1638       bset    Vstop,trans       ; Set "Vstop" bit of "trans" variable
 84E4 [03] CC851B    1639       jmp     MPH_CHK           ; Jump to MPH_CHK(vehicle is not moving)
                     1640  
                     1641  SLOW_MPH_CALC:
 84E7 [03] 3F78      1642       clr     intacc1           ; Clear intacc1 variable
 84E9 [03] 3F79      1643       clr     intacc1+1         ; Clear intacc1+1 variable
 84EB [03] B77C      1644       sta     intacc2           ; Copy to intacc2 variable
 84ED [03] B676      1645       lda     MPHpL             ; Load accumulator with value in
                     1646                                 ; MPH period Lo byte
 84EF [03] B77D      1647       sta     intacc2+1         ; Copy to intacc2+1 variable
 84F1 [02] A623      1648       lda     #$23              ; Load accumulator with value in "MPH_kH"
 84F3 [03] B77A      1649       sta     intacc1+2         ; Copy to "intacc1+2"
 84F5 [02] A628      1650       lda     #$28              ; Load accumulator with value in "MPH_kL"
 84F7 [03] B77B      1651       sta     intacc1+3         ; Copy to "intacc1+3"
 84F9 [05] CD8BE8    1652       jsr     udvd32            ; Jump to subroutine udvd32 (32x16 divide)
 84FC [03] B67B      1653       lda     intacc1+3         ; Load accumulator with value in intacc1+3
                     1654                                 ; variable (8-bit MPH/20 result)
 84FE [03] BE7D      1655       ldx     intacc2+1         ; Load index retgister Lo byte with value in
                     1656                                 ; intacc2+1 (8 bit remainder)
 8500 [05] CD8C74    1657       jsr     DIVROUND          ; Jump to "DIVROUND" subroutine (round result)
 8503 [03] 200D      1658       bra     AV_MPH            ; Branch to AV_MPH:
                     1659  
                     1660  FAST_MPH_CALC:
 8505 [03] B676      1661       lda     MPHpL         ; Load accumulator with value in MPH period
                     1662                             ; Lo byte
 8507 [01] 97        1663       tax                   ; Transfer value in accumulator to index register
                     1664                             ; Lo byte
 8508 [02] A623      1665       lda     #$23          ; Load accumulator with value in "MPH_kH"
 850A [02] 87        1666       psha                  ; Push value in accumulator to stack
 850B [02] 8A        1667       pulh                  ; Pull value from stack to index register Hi byte
 850C [02] A628      1668       lda     #$28          ; Load accumulator with value in "MPH_kL"
 850E [07] 52        1669       div                   ; Divide (A = (H:A) / X)
 850F [05] CD8C74    1670       jsr     DIVROUND      ; Jump to "DIVROUND" subroutine (round result)
                     1671  
                     1672  ;****************************************************************************
                     1673  ; - Average the new "MPH" with the last "MPH" to stabilize the readings
                     1674  ;****************************************************************************
                     1675  
                     1676  AV_MPH:
 8512 [03] BB43      1677       add     MPH           ; Add (A)<-(A)+(M)(last"MPH"+new"MPH")
 8514 [01] 46        1678       rora                  ; Rotate right accumulator(divide by 2)
 8515 [03] B743      1679       sta     MPH           ; Copy result to "MPH"
 8517 [04] 1344      1680       bclr    Vstop,trans   ; Clear "Vstop" bit of "trans" variable
                     1681  
                     1682  MPH_CALC_DONE:
 8519 [04] 1763      1683       bclr    vssp,inputs       ; Clear "vssp" bit of "inputs" variable
                     1684  
                     1685  NO_MPH_PASS:
                     1686  
                     1687  
                     1688  ;****************************************************************************
                     1689  ; - Check Vehicle speed to see if we should use "stall" or "moving"
                     1690  ;   EPC tables.
                     1691  ;****************************************************************************
                     1692  
                     1693  MPH_CHK:
 851B [03] B643      1694       lda     MPH                ; Load accumulator with value in MPH*2
                     1695                                  ; variable
 851D [04] C10139    1696       cmp     MPH_stall          ; Compare it with value in MPH maximum
                     1697                                  ; value for "stall" EPC
 8520 [03] 2404      1698       bhs     NO_STALL           ; If (A)>=(M), branch to NO_STALL:
 8522 [04] 1844      1699       bset    MPHstall,trans     ; Set "MPHstall" bit of "trans" variable
 8524 [03] 2002      1700       bra     MPH_CHK_DONE       ; Branch to MPH_CHK_DONE:
                     1701  
                     1702  NO_STALL:
 8526 [04] 1944      1703       bclr    MPHstall,trans     ; Clear "MPHstall" bit of "trans" variable
                     1704  
                     1705  MPH_CHK_DONE:
                     1706  
                     1707  ;****************************************************************************
                     1708  ; - Compare the current TPS voltage reading with "TPS_prv" to determine if
                     1709  ;   the throttle plates are being opened, and if so, at what rate. If they
                     1710  ;   are being opened, and at a rate equal to or greater than the value in
                     1711  ;   the "TPSrate" variable, set the "accel" flag of "trans3" variable and
                     1712  ;   move the current "TPS" value into "TPS_prv". Otherwise, clear the
                     1713  ;   "accel" flag and move the current "TPS" value into "TPS_prv".
                     1714  ;   This is done only once per 100kuS(0.1S) clock tick in the first pass
                     1715  ;   through the main loop after the 100mS section of the TIM2 CH0 Interrupt
                     1716  ;   service routine has been completed.
                     1717  ;****************************************************************************
                     1718  
                     1719  CHK_TPS_DOT:
 8528 [05] 03631D    1720       brclr   clk100K,inputs,NO_DOT_PASS  ; If "clk100K" bit of "inputs"
                     1721                                 ; variable is clear, branch to NO_DOT_PASS:
 852B [03] B64E      1722       lda     TPS               ; Load accumulator with value in "TPS"
 852D [03] B1A2      1723       cmp     TPS_prv           ; Compare it with value in "TPS_prv"
 852F [03] 2710      1724       beq     NO_ACCEL          ; If (A)=(M), branch to NO_ACCEL:
 8531 [03] 250E      1725       blo     NO_ACCEL          ; If (A)<(M), branch to NO_ACCEL:
 8533 [03] B0A2      1726       sub     TPS_prv           ; Subtract (A)<-(A)-(M)
 8535 [04] C1013A    1727       cmp     TPSrate           ; Compare result to value in "TPSrate"
 8538 [03] 2507      1728       blo     NO_ACCEL          ; If (A)<(M), branch to NO_ACCEL:
 853A [04] 1A44      1729       bset    accel,trans       ; Set "accel" bit of "trans" variable
 853C [05] 4E4EA2    1730       mov     TPS,TPS_prv       ; Move value in "TPS" to "TPS_prv"
 853F [03] 2005      1731       bra     DOT_PASS_DONE     ; Branch to DOT_PASS_DONE:
                     1732  
                     1733  NO_ACCEL:
 8541 [04] 1B44      1734       bclr    accel,trans       ; Clear "accel" bit of "trans" variable
 8543 [05] 4E4EA2    1735       mov     TPS,TPS_prv       ; Move value in "TPS" to "TPS_prv"
                     1736  
                     1737  DOT_PASS_DONE:
 8546 [04] 1363      1738       bclr    clk100k,inputs    ; Clear "clk100k" bit of "inputs" variable
                     1739  
                     1740  NO_DOT_PASS:
                     1741  
                     1742  ;****************************************************************************
                     1743  ; - Determine the Manual Lever Switch position and branch accordingly
                     1744  ;****************************************************************************
                     1745  
 8548 [03] B650      1746       lda     mlpsp         ; Load accumulator with value in MLPS position
 854A [04] 410118    1747       cbeqa   #P,PARK       ; Compare with value #P, if equal,
                     1748                             ; branch to PARK:
 854D [04] 41021C    1749       cbeqa   #R,REVERSE    ; Compare with value #R, if equal,
                     1750                             ; branch to REVERSE:
 8550 [04] 410320    1751       cbeqa   #N,NEUTRAL    ; Compare with value #N, if equal,
                     1752                             ; branch to NEUTRAL:
 8553 [04] 410409    1753       cbeqa   #D,DRIVE_A    ; Compare with value #D, if equal,
                     1754                             ; branch to DRIVE_A:
 8556 [04] 410509    1755       cbeqa   #M2,MAN2_A    ; Compare with value #m2, if equal,


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 19
MC68HC908GP32 User Bootloader


                     1756                             ; branch to MAN2_A:
 8559 [04] 41063D    1757       cbeqa   #M1,MAN1      ; Compare with value #M1, if equal,
                     1758                             ; branch to MAN1:
                     1759  
 855C [03] CC83E0    1760       jmp     LOOPER        ; Jump to LOOPER:
                     1761                             ;(Either the sensor has failed, or we have a
                     1762                             ; non valid reading while changing lever
                     1763                             ; position, in either case, keep looping
                     1764                             ; until we have a valid reading)
                     1765  
                     1766  
                     1767  DRIVE_A:
 855F [03] CC8617    1768       jmp     DRIVE          ; Jump to DRIVE: (long branch)
                     1769  
                     1770  MAN2_A:
 8562 [03] CC85D3    1771       jmp     MAN2           ; Jump to MAN2: (long branch)
                     1772  
                     1773  
                     1774  ;****************************************************************************
                     1775  ; ----------------- "Park", "Reverse", "Neutral" section --------------------
                     1776  ; NOTE! - The gear change variables are not updated in neutral so that
                     1777  ;         MS_TECA will "remember" what gear it was in, primarily for a
                     1778  ;         D->N->D shift.
                     1779  ;****************************************************************************
                     1780  
                     1781  PARK:
 8565 [03] B66B      1782       lda     mlpsp_cur         ; Load accumulator with value in "mlpsp_cur"
 8567 [04] 41012C    1783       cbeqa   #P,PRN_DONE       ; Compare with value #P, if equal, branch
                     1784                                 ; to PRN_DONE:
 856A [03] 200E      1785       bra     PARK_REV          ; Branch to PARK_REV:
                     1786  
                     1787  REVERSE:
 856C [03] B66B      1788       lda     mlpsp_cur         ; Load accumulator with value in "mlpsp_cur"
 856E [04] 410225    1789       cbeqa   #R,PRN_DONE       ; Compare with value #R, if equal, branch
                     1790                                 ; to PRN_DONE:
 8571 [03] 2007      1791       bra     PARK_REV          ; Branch to PARK_REV:
                     1792  
                     1793  NEUTRAL:
 8573 [03] B66B      1794       lda     mlpsp_cur         ; Load accumulator with value in "mlpsp_cur"
 8575 [04] 41031E    1795       cbeqa   #N,PRN_DONE       ; Compare with value #N, if equal, branch
                     1796                                 ; PRN_DONE:
 8578 [03] 2003      1797       bra     NEUT              ; Branch to NEUT:
                     1798  
                     1799  PARK_REV:
 857A [05] CD8F6D    1800       jsr     GEAR1_VARS        ; Jump to subroutine at GEAR1_VARS:
                     1801                                 ;(mov #first to gearcnt, gearcnt_prv,
                     1802                                 ; gear_cur, gear_com)
                     1803  NEUT:
 857D [04] 1402      1804       bset    TCC,portc         ; Set "TCC" bit of Port C (TCC off)
 857F [04] 1802      1805       bset    ExhBrk,portc      ; Set "ExhBrk" bit of Port C (ExhBrk off)
 8581 [04] 1503      1806       bclr    DFCper,portd      ; Clear "DFCper" bit of Port D (DFC prohibit)
 8583 [04] 1302      1807       bclr    SS1,portc         ; Clear "SS1" bit of Port C,(SS1 on)
 8585 [04] 1002      1808       bset    SS2,portc         ; Set "SS2" bit of Port C,(SS2 off)
 8587 [04] 1602      1809       bset    CCS,portc         ; Set "CCS" bit of Port C,(CCS off)
 8589 [03] 3F45      1810       clr     trans2            ; Clear "trans2" variable (Clear "CCSon",
                     1811                                 ; "TCCon", "DFCon", "Brkon", "SSprog",
                     1812                                 ; "TCCprog", "D1D2")
 858B [03] 3F61      1813       clr     shift             ; Clear "shift" variable (Clear "EPCrTCC",
                     1814                                 ; "EPChTCC", "EPCrSS", "EPChSS", "SS1del",
                     1815                                 ; "CCSdel", "SSsdel", "Brkdel"
 858D [03] 3FA1      1816       clr     TIMcnt            ; Clear 20mS timer counter
 858F [03] 3F77      1817       clr     dfSel             ; Clear "dfSel" variable
 8591 [04] 1277      1818       bset    selStl,dfSel      ; Set "selStl" bit of "dfSel"
                     1819                                 ;(EPC set for "stall" condition)
 8593 [05] 4E506B    1820       mov     mlpsp,mlpsp_cur   ; Move value in "mlpsp" into "mlpsp_cur"
                     1821  
                     1822  PRN_DONE:
 8596 [03] CC8835    1823       jmp     DFSEL_DONE        ; Jump to DFSEL_DONE:
                     1824  
                     1825  
                     1826  ;****************************************************************************
                     1827  ; ------------------------ "Manual First" section ---------------------------
                     1828  ;****************************************************************************
                     1829  
                     1830  MAN1:
 8599 [03] B66B      1831       lda     mlpsp_cur         ; Load accumulator with value in "mlpsp_cur"
 859B [04] 41061A    1832       cbeqa   #M1,MAN1_EPC      ; Compare with value #M1, if equal, branch
                     1833                                 ; to MAN1_EPC:
 859E [04] 1402      1834       bset    TCC,portc         ; Set "TCC" bit of Port C (TCC off)
 85A0 [04] 1802      1835       bset    ExhBrk,portc      ; Set "ExhBrk" bit of Port C (ExhBrk off)
 85A2 [04] 1503      1836       bclr    DFCper,portd      ; Clear "DFCper" bit of Port D (DFC prohibit)
 85A4 [04] 1302      1837       bclr    SS1,portc         ; Clear "SS1" bit of Port C,(SS1 on)
 85A6 [04] 1002      1838       bset    SS2,portc         ; Set "SS2" bit of Port C,(SS2 off)
 85A8 [04] 1702      1839       bclr    CCS,portc         ; Clear "CCS" bit of Port C,(CCS on)
 85AA [03] 3F45      1840       clr     trans2            ; Clear "trans2" variable (Clear "CCSon",
                     1841                                 ; "TCCon", "DFCon", "Brkon", "SSprog",
                     1842                                 ; "TCCprog", "D1D2")
 85AC [03] 3F61      1843       clr     shift             ; Clear "shift" variable (Clear "EPCrTCC",
                     1844                                 ; "EPChTCC", "EPCrSS", "EPChSS", "SS1del",
                     1845                                 ; "CCSdel", "SSsdel", "Brkdel"
 85AE [04] 1045      1846       bset    CCSon,trans2      ; Set "CCSon" bit of "trans2" variable
 85B0 [03] 3FA1      1847       clr     TIMcnt            ; Clear 20mS timer counter
 85B2 [05] CD8F6D    1848       jsr     GEAR1_VARS        ; Jump to subroutine at GEAR1_VARS:
                     1849                                 ;(mov #first to gearcnt, gearcnt_prv,
                     1850                                 ; gear_cur, gear_com)
 85B5 [05] 4E506B    1851       mov     mlpsp,mlpsp_cur   ; Move value in "mlpsp" into "mlpsp_cur"
                     1852  
                     1853  MAN1_EPC:
                     1854  
                     1855  ;****************************************************************************
                     1856  ; - Check to see if we are above stall speed and at closed throttle, if so,
                     1857  ;   set EPC pulse width for Decel conditions, otherwise, set EPC according
                     1858  ;   to the "EPC_M1" table.
                     1859  ;****************************************************************************
                     1860  
 85B8 [05] 054405    1861       brclr  ClsThrt,trans,NO_DECEL_M1   ; If "ClsThrt" bit of "trans"
                     1862                                          ; variable is clear, branch to
                     1863                                          ; NO_DECEL_M1:
 85BB [05] 084402    1864       brset  MPHstall,trans,NO_DECEL_M1  ; If "MPHstall" bit of "trans"
                     1865                                          ; variable is set, branch to
                     1866                                          ; NO_DECEL_M1:
 85BE [03] 2009      1867       bra     DECEL_M1                   ; Branch to DECEL_M1:
                     1868  
                     1869  NO_DECEL_M1
 85C0 [05] 0E770D    1870       brset   selM1,dfSel,MAN1_DONE     ; If "selM1" bit of "dfSel"
                     1871                                          ; variable is set, branch to
                     1872                                          ; MAN1_DONE:
 85C3 [03] 3F77      1873       clr     dfSel                      ; Clear "dfSel" variable
 85C5 [04] 1E77      1874       bset    selM1,dfSel               ; Set "selM1" bit of "dfSel"
 85C7 [03] 2007      1875       bra     MAN1_DONE                  ; Branch to MAN1_DONE:
                     1876  
                     1877  DECEL_M1:
 85C9 [05] 0C7704    1878       brset   selDcl,dfSel,MAN1_DONE     ; If "selDcl" bit of "dfSel"
                     1879                                          ; variable is set, branch to
                     1880                                          ; MAN1_DONE:
 85CC [03] 3F77      1881       clr     dfSel                      ; Clear "dfSel" variable
 85CE [04] 1C77      1882       bset    selDcl,dfSel               ; Set "selDcl" bit of "dfSel"
                     1883  
                     1884  MAN1_DONE:
 85D0 [03] CC8835    1885       jmp     DFSEL_DONE                 ; Jump to DFSEL_DONE:
                     1886  
                     1887  
                     1888  ;****************************************************************************
                     1889  ; ------------------------ "Manual Second" section --------------------------
                     1890  ;****************************************************************************
                     1891  


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 20
MC68HC908GP32 User Bootloader


                     1892  MAN2:
 85D3 [03] B66B      1893       lda     mlpsp_cur          ; Load accumulator with value in "mlpsp_cur"
 85D5 [04] 41053C    1894       cbeqa   #M2,DO_EPC_M2      ; Compare with value #M2, if equal, branch
                     1895                                  ; to DO_EPC_M2:
 85D8 [03] B66D      1896       lda     gear_cur           ; Load accumulator with value in "gear_cur"
 85DA [04] 41010F    1897       cbeqa   #first,FIRST_M2    ; Compare with value #first, if equal,
                     1898                                  ; branch to FIRST_M2:
                     1899  
                     1900  ;****************************************************************************
                     1901  ; - "mlps_cur" was something other than Man2, and "gear_cur" was something
                     1902  ;   other than first gear.
                     1903  ;   This means that the manual lever has commanded a downshift from D4 or
                     1904  ;   D3 to Man2, or a solenoid state change from D2 to Man2.
                     1905  ;****************************************************************************
                     1906  
 85DD [05] CD8F23    1907       jsr     M2_SOLS           ; Jump to subroutine at M2_SOLS:
                     1908                                 ;(SS1 off, SS2 off, CCS on, "CCSon" set,
                     1909                                 ; "D1D2" clr)
 85E0 [05] CD8F7A    1910       jsr     GEAR2_VARS        ; Jump to subroutine at GEAR2_VARS:
                     1911                                 ;(mov #second to gearcnt, gearcnt_prv,
                     1912                                 ; gear_cur, gear_com)
 85E3 [03] 3F77      1913       clr     dfSel             ; Clear "dfSel" variable
 85E5 [04] 1077      1914       bset    selTO,dfSel       ; Set "selTO" bit of "dfSel"
                     1915                                 ;(EPC set for torque output)
 85E7 [05] 4E506B    1916       mov     mlpsp,mlpsp_cur   ; Move value in "mlpsp" into "mlpsp_cur"
 85EA [03] 2028      1917       bra     DO_EPC_M2         ; Branch to DO_EPC_M2:
                     1918  
                     1919  
                     1920  ;****************************************************************************
                     1921  ; - "mlps_cur" was something other than Man2, and the last solonoid
                     1922  ;     combination was for first gear. That means we are either upshifting
                     1923  ;     from D1 to M2, or M1 to M2.
                     1924  ;   Upshift sequence is as follows:
                     1925  ;   - Set the "EPCrSS" bit of "shift" variable, start the pressure rise
                     1926  ;     count down timer, and set EPC according to the "EPC_12" table
                     1927  ;   - When the pressure rise counter zeros, clear the "EPCrSS" bit and set
                     1928  ;     the "EPChSS" bit of "shift" variable. Change solonoid state and start
                     1929  ;     the pressure hold timer.
                     1930  ;   - When the pressure hold timer zeros, clear the "EPChSS" bit of "shift"
                     1931  ;     variable and set EPC according to the "EPC_move" table in the next
                     1932  ;     section.
                     1933  ;****************************************************************************
                     1934  
                     1935  FIRST_M2:
 85EC [05] 04610F    1936       brset   EPCrSS,shift,FIRST_M2A    ; If "EPCrSS" bit of "shift" variable
                     1937                                         ; is set, branch to FIRST_M2A:
 85EF [04] 1461      1938       bset    EPCrSS,shift              ; Set "EPCrSS" bit of "shift" variable
 85F1 [04] C60132    1939       lda     EPC_rise                  ; Load accumulator with value in
                     1940                                         ; "EPC_rise"
 85F4 [03] B7A1      1941       sta     TIMcnt                    ; Copy to "TIMcnt"
 85F6 [04] 1845      1942       bset    SSprog,trans2             ; Set "SSprog" bit of "trans2" var
 85F8 [03] 3F77      1943       clr     dfSel                     ; Clear "dfSel" variable
 85FA [04] 1477      1944       bset    sel12,dfSel               ; Set "sel12" bit of "dfSel"
 85FC [03] 2016      1945       bra     DO_EPC_M2                 ; Branch to DO_EPC_M2:
                     1946  
                     1947  FIRST_M2A:
 85FE [03] B6A1      1948       lda     TIMcnt              ; Load accumulator with value in "TIMcnt"
                     1949                                   ; variable
 8600 [03] 2612      1950       bne     DO_EPC_M2           ; If Z bit of CCR is clear, branch to
                     1951                                   ; DO_EPC_M2:
 8602 [04] 1561      1952       bclr    EPCrSS,shift        ; Clear "EPCrSS" bit of "shift" variable
 8604 [04] 1661      1953       bset    EPChSS,shift        ; Set "EPChSS" bit of "shift" variable
 8606 [05] CD8F23    1954       jsr     M2_SOLS             ; Jump to subroutine at M2_SOLS:
                     1955                                   ;(SS1 off, SS2 off, CCS on, "CCSon" set,
                     1956                                   ; "D1D2" clr)
 8609 [05] CD8F7A    1957       jsr     GEAR2_VARS          ; Jump to subroutine at GEAR2_VARS:
                     1958                                   ;(mov #second to gearcnt, gearcnt_prv,
                     1959                                   ; gear_cur, gear_com)
 860C [04] C60133    1960       lda     EPC_hold            ; Load accumulator with value in "EPC_hold"
 860F [03] B7A1      1961       sta     TIMcnt              ; Copy to "TIMcnt"
 8611 [05] 4E506B    1962       mov     mlpsp,mlpsp_cur     ; Move value in "mlpsp" into "mlpsp_cur"
                     1963  
                     1964  DO_EPC_M2:
 8614 [03] CC87C7    1965       jmp     DO_DFSEL            ; Jump to DO_DFSEL:(long branch)
                     1966  
                     1967  
                     1968  ;****************************************************************************
                     1969  ; --------------------------- "Drive" section -------------------------------
                     1970  ;****************************************************************************
                     1971  
                     1972  DRIVE:
 8617 [03] B66B      1973       lda     mlpsp_cur         ; Load accumulator with value in "mlpsp_cur"
 8619 [04] 41040C    1974       cbeqa   #D,SEQ_SEL_CHECK  ; Compare with value #D, if equal, branch
                     1975                                 ; to SEQ_SEL_CHECK:
 861C [04] 410503    1976       cbeqa   #M2,M2_D2_A       ; Compare with value #M1, if equal, branch
                     1977                                 ; to M2_D2_A:
 861F [04] 410303    1978       cbeqa   #N,NEUTRAL_D_A    ; Compare with value #N, if equal, branch
                     1979                                 ; to NEUTRAL_D_A:
                     1980  
                     1981  M2_D2_A:
 8622 [03] CC86B6    1982       jmp     M2_D2             ; Jump to M2_D2:(long branch)
                     1983  
                     1984  NEUTRAL_D_A:
 8625 [03] CC86E1    1985       jmp     NEUTRAL_D         ; Jump to NEUTRAL_D:(long branch)
                     1986  
                     1987  
                     1988  SEQ_SEL_CHECK:
                     1989  
                     1990  ;****************************************************************************
                     1991  ; -  "mlps_prv" was "Drive", so no gear changes have been commanded by the
                     1992  ;    MLPS. Check sequential gear selector to see if a gear change has been
                     1993  ;    commanded by it.
                     1994  ;
                     1995  ;    Because the shift up/shift down contacts control the sequence logic, it
                     1996  ;    is necesary to provide the de-bounce feature. This feature provides a
                     1997  ;    time delay between polls to eliminate the effects of point bounce and
                     1998  ;    make it necesary for the contacts to open again before the next down
                     1999  ;    state is recognized a legitimate command. TCC and exhaust brake
                     2000  ;    contacts are not affected in this way as multiple contact make/break
                     2001  ;    events will have no adverse effect.
                     2002  ;
                     2003  ;    De-bounce works as follows:
                     2004  ;    All contacts use pull ups so normal state is Hi, active is Lo. At start
                     2005  ;    up, the program polls the pins and sets the last pass flag. In the loop
                     2006  ;    the pin is polled to check it's state. If it's Hi, and de-bounce is
                     2007  ;    not in progress, it continues. If it's Lo, it starts the de-bounce timer
                     2008  ;    (125mS initial, increased to 150ms, then flash configurable),
                     2009  ;    clears the flag and proceed to carry out the shift command.
                     2010  ;    The pin is not polled again until the timer times out. If it is still
                     2011  ;    Lo when next polled, and the flag is still clear, it continues on. If it
                     2012  ;    is Hi, the timer is set, and the flag is set. The pin is not polled
                     2013  ;    until the timer times out, and the proces repeats.
                     2014  ;****************************************************************************
                     2015  
 8628 [03] B6A3      2016       lda     ShftUpDB                        ; Load accumulator with value
                     2017                                               ; in Shift Up de-bounce counter
 862A [03] 2619      2018       bne     SHFTUP_CHK_DONE                 ; If Z bit of CCR is clear,
                     2019                                               ; branch to SHFTUP_CHK_DONE:
                     2020                                               ;(de-bounce in progress,
                     2021                                               ; skip over)
 862C [05] 0E000C    2022       brset   Shiftup,porta,SHFTUP_HI         ; If "Shiftup" bit of Porta A
                     2023                                               ; is set, branch toSHFTUP_HI:
                     2024                                               ;(is pin Hi?)
 862F [05] 0B6313    2025       brclr   SUhi,inputs,SHFTUP_CHK_DONE     ; If "SUhi" bit of "inputs"
                     2026                                               ; variable is clear, branch to
                     2027                                               ; SHFTUP_CHK_DONE:


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 21
MC68HC908GP32 User Bootloader


                     2028                                               ;(pin is Lo, if pin state last
                     2029                                               ; pass is Lo, skip over)
                     2030  
                     2031  ;*****************************************************************************
                     2032  ; - Pin state change from Hi to Lo. Start de-bounce timer, clear pin state
                     2033  ;   last pass flag, and proceed to increment gear counter section.
                     2034  ;*****************************************************************************
 8632 [04] C60146    2035       lda     DBup                            ; Load accumulator with value in
                     2036                                               ; "DBup" variable
 8635 [03] B7A3      2037       sta     ShftUpDB                        ; Store in "ShftUpDB" de-bounce
                     2038                                               ; counter
 8637 [04] 1B63      2039       bclr    SUhi,inputs                     ; Clear "SUhi" bit of "inputs"
 8639 [03] 202C      2040       bra     UPSHIFT_COM                     ; Branch to UPSHIFT_COM:
                     2041  
                     2042  SHFTUP_HI:
 863B [05] 0A6307    2043       brset   SUhi,inputs,SHFTUP_CHK_DONE     ; If "SUhi" bit of "inputs"
                     2044                                               ; variable is set, branch to
                     2045                                               ; SHFTUP_CHK_DONE:
                     2046                                               ;(pin is Hi, if pin state last
                     2047                                               ; pass is Hi, skip over)
                     2048  
                     2049  ;*****************************************************************************
                     2050  ; - Pin state change from Lo to Hi. Start de-bounce timer and set pin state
                     2051  ;   last pass flag.
                     2052  ;*****************************************************************************
                     2053  
 863E [04] C60146    2054       lda     DBup                            ; Load accumulator with value in
                     2055                                               ; "DBup" variable
 8641 [03] B7A3      2056       sta     ShftUpDB                        ; Store in "ShftUpDB" de-bounce
                     2057                                               ; counter
 8643 [04] 1A63      2058       bset    SUhi,inputs                     ; Set "SUhi" bit of "inputs" var
                     2059  
                     2060  SHFTUP_CHK_DONE:
 8645 [03] B6A4      2061       lda     ShftDnDB                        ; Load accumulator with value in
                     2062                                               ; Shift Dn de-bounce counter
 8647 [03] 2619      2063       bne     SHFTDN_CHK_DONE                 ; If Z bit of CCR is clear,
                     2064                                               ;  branch to SHFTDN_CHK_DONE:
                     2065                                               ;(de-bounce in progress,
                     2066                                               ; skip over)
 8649 [05] 0C000C    2067       brset   Shiftdn,porta,SHFTDN_HI         ; If "Shiftdn" bit of Porta A is
                     2068                                               ; set, branch to SHFTDN_HI:
                     2069                                               ;(is pin Hi?)
 864C [05] 0D6313    2070       brclr   SDhi,inputs,SHFTDN_CHK_DONE     ; If "SDhi" bit of "inputs"
                     2071                                               ; variable is clear, branch to
                     2072                                               ; SHFTDN_CHK_DONE:
                     2073                                               ;(pin is Lo, if pin state last
                     2074                                               ; pass is Lo, skip over)
                     2075  
                     2076  ;*****************************************************************************
                     2077  ; - Pin state change from Hi to Lo. Start de-bounce timer, clear pin state
                     2078  ;   last pass flag, and proceed to decrement gear counter section.
                     2079  ;*****************************************************************************
                     2080  
 864F [04] C60147    2081       lda     DBdn                            ; Load accumulator with value in
                     2082                                               ; "DBdn" variable
 8652 [03] B7A4      2083       sta     ShftDnDB                        ; Store in "ShftDnDB" de-bounce
                     2084                                               ; counter
 8654 [04] 1D63      2085       bclr    SDhi,inputs                     ; Clear "SDhi" bit of "inputs2"
 8656 [03] 2019      2086       bra     DNSHIFT_COM                     ; Branch to DNSHIFT_COM:
                     2087  
                     2088  SHFTDN_HI:
 8658 [05] 0C6307    2089       brset   SDhi,inputs,SHFTDN_CHK_DONE     ; If "SDhi" bit of "inputs"
                     2090                                               ; variable is set, branch to
                     2091                                               ; SHFTDN_CHK_DONE:
                     2092                                               ;(pin is Hi, if pin state last
                     2093                                               ; pass is Hi, skip over)
                     2094  
                     2095  ;*****************************************************************************
                     2096  ; - Pin state change from Lo to Hi. Start de-bounce timer and set pin state
                     2097  ;   last pass flag.
                     2098  ;*****************************************************************************
                     2099  
 865B [04] C60147    2100       lda     DBdn                            ; Load accumulator with value in
                     2101                                               ; "DBdn" variable
 865E [03] B7A4      2102       sta     ShftDnDB                        ; Store in "ShftDnDB" de-bounce
                     2103                                               ; counter
 8660 [04] 1C63      2104       bset    SDhi,inputs                     ; Set "SDhi" bit of "inputs" var
                     2105  
                     2106  SHFTDN_CHK_DONE:
                     2107  
                     2108  ;*****************************************************************************
                     2109  ; - No gear change has been commanded by the joy stick contacts. Check to see
                     2110  ;   if a shift is in progress, and branch accordingly.
                     2111  ;*****************************************************************************
                     2112  
 8662 [05] 094545    2113       brclr   SSprog,trans2,NOSHIFT_D_A     ; If "SSprog" bit of "trans2"
                     2114                                             ; variable is clear, branch to
                     2115                                             ; NOSHIFT_D_A:
 8665 [03] 2018      2116       bra     SEQ_SEL_CHECK_DONE            ; Branch to SEQ_SEL_CHECK_DONE
                     2117  
                     2118  
                     2119  
                     2120  ;*****************************************************************************
                     2121  ; - A shift has been commanded from Joy stick contacts. Use the flag states
                     2122  ;   to detirmine which shift it should be.
                     2123  ;*****************************************************************************
                     2124  
                     2125  UPSHIFT_COM:
 8667 [03] B66C      2126       lda     gearcnt_prv            ; Load accumulator with value in gear
                     2127                                      ; count previous
 8669 [02] A104      2128       cmp     #forth                 ; Compare it with value #forth
 866B [03] 273D      2129       beq     NOSHIFT_D_A            ; If Z bit of CCR is set, branch to
                     2130                                      ; NOSHIFT_D_A:
 866D [04] 3C46      2131       inc     gearcnt                ; Increment Gear Count variable
 866F [03] 2008      2132       bra     GEARCNT_FLAGS          ; Branch to GEARCNT_FLAGS:
                     2133  
                     2134  DNSHIFT_COM:
 8671 [03] B66C      2135       lda     gearcnt_prv            ; Load accumulator with value in gear
                     2136                                      ; count previous
 8673 [02] A101      2137       cmp     #first                 ; Compare it with value #first
 8675 [03] 2733      2138       beq     NOSHIFT_D_A            ; If Z bit of CCR is set, branch to
                     2139                                      ; NOSHIFT_D_A:
 8677 [04] 3A46      2140       dec     gearcnt                ; Decrement Gear Count variable
                     2141  
                     2142  GEARCNT_FLAGS:
 8679 [05] 4E466C    2143       mov     gearcnt,gearcnt_prv    ; Move value in "gearcnt" to
                     2144                                      ; "gearcnt_prv"
 867C [05] 4E466E    2145       mov     gearcnt,gear_com       ; Move value in "gearcnt" to "gear_com"
                     2146  
                     2147  SEQ_SEL_CHECK_DONE:
 867F [03] B66E      2148       lda     gear_com     ; Load accumulator with value in commanded gear
 8681 [03] B16D      2149       cmp     gear_cur     ; Compare it with value in Current Gear
 8683 [03] 221A      2150       bhi     UPSHIFT      ; If (A)>(M), branch to UPSHIFT:
 8685 [03] 2502      2151       blo     DNSHIFT      ; If (A)<(M), branch to DNSHIFT:
 8687 [03] 2021      2152       bra     NOSHIFT_D_A  ; Branch to NOSHIFT_D_A:
                     2153  
                     2154  
                     2155  ;****************************************************************************
                     2156  ; - A sequential down shift has been commanded, or we have a shift in
                     2157  ;   progress.  The only time that the "SSprog" flag is set for a down shift
                     2158  ;   is the 43, which delays application of the coast clutch in third.
                     2159  ;   No harm will be done if a quick downshift from 4th through 3d to 2nd or
                     2160  ;   even 1st is commanded, so any shift in progress can be cancelled first,
                     2161  ;   then check the commanded gear status to determine which shift event it
                     2162  ;   should be.
                     2163  ;****************************************************************************


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 22
MC68HC908GP32 User Bootloader


                     2164  
                     2165  DNSHIFT:
 8689 [03] B66E      2166       lda     gear_com            ; Load accumulator with value in "gear_com"
 868B [04] 410308    2167       cbeqa   #third,SHIFT43_A    ; Compare with value #third, if equal,
                     2168                                   ; branch to SHIFT43_A:
 868E [04] 410208    2169       cbeqa   #second,SHIFT32_A   ; Compare with value #second, if equal,
                     2170                                   ; branch to SHIFT32_A:
 8691 [04] 410108    2171       cbeqa   #first,SHIFT21_A    ; Compare with value #first, if equal,
                     2172                                   ; branch to SHIFT21_A:
 8694 [03] 2014      2173       bra     NOSHIFT_D_A         ; Branch to NOSHIFT_D_A:
                     2174  
                     2175  SHIFT43_A:
 8696 [03] CC8734    2176       jmp     SHIFT43           ; Jump to SHIFT43:(long branch)
                     2177  
                     2178  SHIFT32_A:
 8699 [03] CC872C    2179       jmp     SHIFT32           ; Jump to SHIFT32:(long branch)
                     2180  
                     2181  SHIFT21_A:
 869C [03] CC8724    2182       jmp     SHIFT21           ; Jump to SHIFT21:(long branch)
                     2183  
                     2184  
                     2185  ;****************************************************************************
                     2186  ; - A sequential up shift has been commanded.  Check the commanded gear
                     2187  ;   status to determine which shift event it should be.
                     2188  ;****************************************************************************
                     2189  
                     2190  UPSHIFT:
 869F [03] B66E      2191       lda     gear_com            ; Load accumulator with value in "gear_com"
 86A1 [04] 410409    2192       cbeqa   #forth,SHIFT34_A    ; Compare with value #forth, if equal,
                     2193                                   ; branch to SHIFT34_A:
 86A4 [04] 410309    2194       cbeqa   #third,SHIFT23_A    ; Compare with value #third, if equal,
                     2195                                   ; branch to SHIFT23_A:
 86A7 [04] 410209    2196       cbeqa   #second,SHIFT12_A   ; Compare with value #second, if equal,
                     2197                                   ; branch to SHIFT12_A:
                     2198  
                     2199  NOSHIFT_D_A:
 86AA [03] CC87C7    2200       jmp     DO_DFSEL           ; Jump to DO_DFSEL:(long branch)
                     2201  
                     2202  SHIFT34_A:
 86AD [03] CC879D    2203       jmp     SHIFT34            ; Jump to SHIFT34:(long branch)
                     2204  
                     2205  SHIFT23_A:
 86B0 [03] CC8775    2206       jmp     SHIFT23            ; Jump to SHIFT23:(long branch)
                     2207  
                     2208  SHIFT12_A:
 86B3 [03] CC874B    2209       jmp     SHIFT12            ; Jump to SHIFT12:(long branch)
                     2210  
                     2211  M2_D2:
                     2212  
                     2213  ;****************************************************************************
                     2214  ; -  "mlps_cur" was "Man 2", so MLPS has commanded a solonoid state change
                     2215  ;     from Man 2 to Drive 2. Because SS2 takes longer to apply than SS1, we
                     2216  ;     have to delay the application of SS1 for a short time. There is no
                     2217  ;     provision for pressure rise as we are not changeing gear ratios.
                     2218  ;     Solonoid state change sequence is as follows:
                     2219  ;   - Set the "SSprog" bit of "trans2" variable. Set the "SS1del" bit of
                     2220  ;     "shift" variable. Energise SS2, CCS, Set "CCSon" bit of "trans2"
                     2221  ;     variable and start the SS1 delay countdown timer with the SS1 delay
                     2222  ;     value.
                     2223  ;   - When the SS1 delay counter zeros, Energise SS1 and update the Gear 2
                     2224  ;     variable, clear "SS1del" and "SSprog" bits. Set EPC according to the
                     2225  ;     "TO" table and move "Mlpsp" into "mlpsp_cur"
                     2226  ;****************************************************************************
                     2227  
 86B6 [05] 086111    2228       brset   SS1del,shift,M2_D2A  ; If "SS1del" bit of "shift" variable is
                     2229                                    ; set, branch to M2_D2A:
 86B9 [04] 1845      2230       bset    SSprog,trans2      ; Set "SSprog" bit of "trans2" var
 86BB [04] 1861      2231       bset    SS1del,shift       ; Set "SS1del" bit of "shift" variable
 86BD [04] 1102      2232       bclr    SS2,portc          ; Clear "SS2" bit of Port C,(SS2 on)
 86BF [04] 1702      2233       bclr    CCS,portc          ; Cleer "CCS" bit of Port C,(CCS on)
 86C1 [04] 1045      2234       bset    CCSon,trans2       ; Set "CCSon" bit of "trans2" variable
 86C3 [04] C60134    2235       lda     SS1_del            ; Load accumulator with value in "SS1_del"
 86C6 [03] B7A1      2236       sta     TIMcnt             ; Copy to "TIMcnt"
 86C8 [03] 2014      2237       bra     M2_D2_DONE         ; Branch to M2_D2_DONE:
                     2238  
                     2239  M2_D2A:
 86CA [03] B6A1      2240       lda     TIMcnt             ; Load accumulator with value in "TIMcnt"
                     2241                                  ; variable
 86CC [03] 2610      2242       bne     M2_D2_DONE         ; If Z bit of CCR is clear, branch to
                     2243                                  ; M2_D2_DONE:
 86CE [04] 1302      2244       bclr    SS1,portc          ; Clear "SS1" bit of Port C(SS1 on)
 86D0 [05] CD8F7A    2245       jsr     GEAR2_VARS         ; Jump to subroutine at GEAR2_VARS:
                     2246                                  ;(mov #second to gearcnt, gearcnt_prv,
                     2247                                  ; gear_cur, gear_com)
 86D3 [04] 1961      2248       bclr    SS1del,shift       ; Clear "SS1del" bit of "shift" variable
 86D5 [04] 1945      2249       bclr    SSprog,trans2      ; Clear "SSprog" bit of "trans2" var
 86D7 [03] 3F77      2250       clr     dfSel              ; Clear "dfSel" variable
 86D9 [04] 1077      2251       bset    selTO,dfSel        ; Set "selTO" bit of "dfSel"
 86DB [05] 4E506B    2252       mov     mlpsp,mlpsp_cur    ; Move value in "mlpsp" into "mlpsp_cur"
                     2253  
                     2254  M2_D2_DONE:
 86DE [03] CC87C7    2255       jmp     DO_DFSEL           ; Jump to DO_DFSEL:(long branch)
                     2256  
                     2257  
                     2258  NEUTRAL_D:
                     2259  
                     2260  ;****************************************************************************
                     2261  ; -  "mlps_cur" was "Neutral" from "Reverse"/"Park", or "Drive". If the
                     2262  ;    Lever is moved from Drive to Neutral, and back to Drive, the TCU will
                     2263  ;    "remember " what gear it was in. This is primaraly used to reduce the
                     2264  ;    rotating mass of the transmission while shifting the auxilliary
                     2265  ;    transmission under way. There is no provision for pressure rise as this
                     2266  ;    should be done at low power settings.
                     2267  ;****************************************************************************
                     2268  
 86E1 [04] 1945      2269       bclr    SSprog,trans2     ; Clear "SSprog" bit of "trans2" variable
 86E3 [04] 1B45      2270       bclr    TCprog,trans2     ; Clear "TCprog" bit of "trans2" variable
 86E5 [03] 3F61      2271       clr     shift             ; Clear "shift" variable (Clear "EPCrTCC",
                     2272                                 ; "EPChTCC", "EPCrSS", "EPChSS", "SS1del",
                     2273                                 ; "CCSdel", "SSsdel"
 86E7 [03] 3FA1      2274       clr     TIMcnt            ; Clear 20mS timer counter
 86E9 [05] CD8F4F    2275       jsr     TCC_BRK_OFF       ; Jump to subroutine at TCC_BRK_OFF:
                     2276                                 ;(TCC off, DFCper off, ExhBrk off,
                     2277                                 ; "EPCrTCC" clr, EPChTCC clr,
                     2278                                 ; "TCCon" clr, "TCprog" clr, "DFCon" clr,
                     2279                                 ; "Brkon" clr, "Brkdel" clr)
 86EC [03] B66D      2280       lda     gear_cur          ; Load accumulator with value in "gear_cur"
 86EE [04] 410409    2281       cbeqa   #forth,FOUR       ; Compare with value #forth, if equal,
                     2282                                 ; branch to FOUR:
 86F1 [04] 41030E    2283       cbeqa   #third,THREE      ; Compare with value #third, if equal,
                     2284                                 ; branch to THREE:
 86F4 [04] 410213    2285       cbeqa   #second,TWO       ; Compare with value #second, if equal,
                     2286                                 ; branch to TWO:
 86F7 [04] 410118    2287       cbeqa   #first,ONE        ; Compare with value #first, if equal,
                     2288                                 ; branch to ONE:
                     2289  
                     2290  FOUR:
 86FA [05] CD8F44    2291       jsr     D4_SOLS             ; Jump to subroutine at D4_SOLS
                     2292                                   ;(SS1 off, SS2 off, CCS off,"CCSon" clr,
                     2293                                   ; "D1D2" clr)
 86FD [05] CD8F94    2294       jsr     GEAR4_VARS          ; Jump to subroutine at GEAR4_VARS:
                     2295                                   ;(mov #forth to gearcnt, gearcnt_prv,
                     2296                                   ; gear_cur, gear_com)
 8700 [03] 2018      2297       bra     NEUTRAL_D_DONE      ; Branch to NEUTRAL_D_DONE:
                     2298  
                     2299  THREE:


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 23
MC68HC908GP32 User Bootloader


 8702 [05] CD8F39    2300       jsr     D3_SOLS             ; Jump to subroutine at D3_SOLS
                     2301                                   ;(SS1 off, SS2 on, CCS on, "CCSon" set,
                     2302                                   ; "D1D2" clr)
 8705 [05] CD8F87    2303       jsr     GEAR3_VARS          ; Jump to subroutine at GEAR3_VARS:
                     2304                                   ;(mov #third to gearcnt, gearcnt_prv,
                     2305                                   ; gear_cur, gear_com)
 8708 [03] 2010      2306       bra     NEUTRAL_D_DONE      ; Branch to NEUTRAL_D_DONE:
                     2307  
                     2308  TWO:
 870A [05] CD8F2E    2309       jsr     D2_SOLS             ; Jump to subroutine at D2_SOLS
                     2310                                   ;(SS1 on, SS2 on, CCS on, "CCSon" set)
 870D [05] CD8F7A    2311       jsr     GEAR2_VARS          ; Jump to subroutine at GEAR2_VARS:
                     2312                                   ;(mov #second to gearcnt, gearcnt_prv,
                     2313                                   ; gear_cur, gear_com)
 8710 [03] 2008      2314       bra     NEUTRAL_D_DONE      ; Branch to NEUTRAL_D_DONE:
                     2315  
                     2316  ONE:
 8712 [05] CD8F1A    2317       jsr     M1D1_SOLS           ; Jump to subroutine at M1D1_SOLS
                     2318                                   ;(SS1 on, SS2 off, CCS on, "CCSon" set)
 8715 [04] 1C45      2319       bset    D1D2,trans2         ; Set"D1D2" bit of "trans2" variable
 8717 [05] CD8F6D    2320       jsr     GEAR1_VARS          ; Jump to subroutine at GEAR1_VARS:
                     2321                                   ;(mov #first to gearcnt, gearcnt_prv,
                     2322                                   ; gear_cur, gear_com)
                     2323  
                     2324  NEUTRAL_D_DONE:
 871A [03] 3F77      2325       clr     dfSel               ; Clear "dfSel" variable
 871C [04] 1077      2326       bset    selTO,dfSel         ; Set "selTO" bit of "dfSel"
 871E [05] 4E506B    2327       mov     mlpsp,mlpsp_cur     ; Move value in "mlpsp" into "mlpsp_cur"
 8721 [03] CC87C7    2328       jmp     DO_DFSEL            ; Jump to DO_DFSEL:(long branch)
                     2329  
                     2330  
                     2331  ;SEQ_DN:
                     2332  
                     2333  ;****************************************************************************
                     2334  ; ---------------------- Sequential Downshift Section ----------------------
                     2335  ; - There is no provision for shift event pressure rise during downshifts
                     2336  ;   as experience has shown it not appear to be necessary. 3-2, and 2-1
                     2337  ;   downshifts just invlove simple state and flag changes. 4-3 downshift is
                     2338  ;   similar except provision must be made to ensure the Coast Clutch does
                     2339  ;   not engage until the shift solonoid state is completed.
                     2340  ;****************************************************************************
                     2341  
                     2342  ;****************************************************************************
                     2343  ; - Drive 2 to Drive 1 shift
                     2344  ;****************************************************************************
                     2345  
                     2346  SHIFT21:
 8724 [04] 1302      2347       bclr    SS1,portc            ; Clear "SS1" bit of Port C,(SS1 on)
 8726 [04] 1002      2348       bset    SS2,portc            ; Set "SS2" bit of Port C,(SS2 off)
 8728 [04] 1C45      2349       bset    D1D2,trans2          ; Set"D1D2" bit of "trans2" variable
 872A [03] 2015      2350       bra     SEQ_DN_DONE          ; Branch to SEQ_DN_DONE:
                     2351  
                     2352  ;****************************************************************************
                     2353  ; - Drive 3 to Drive 2 shift
                     2354  ;****************************************************************************
                     2355  
                     2356  SHIFT32:
 872C [04] 1302      2357       bclr    SS1,portc            ; Clear "SS1" bit of Port C,(SS1 on)
 872E [04] 1102      2358       bclr    SS2,portc            ; Clear "SS2" bit of Port C,(SS2 on)
 8730 [04] 1C45      2359       bset    D1D2,trans2          ; Set"D1D2" bit of "trans2" variable
 8732 [03] 200D      2360       bra     SEQ_DN_DONE          ; Branch to SEQ_DN_DONE:
                     2361  
                     2362  ;****************************************************************************
                     2363  ; - Drive 4 to Drive 3 shift
                     2364  ;****************************************************************************
                     2365  
                     2366  SHIFT43:
 8734 [04] 1202      2367       bset    SS1,portc            ; Set "SS1" bit of Port C,(SS1 off)
 8736 [04] 1102      2368       bclr    SS2,portc            ; Clear "SS2" bit of Port C,(SS2 on)
 8738 [04] 1D45      2369       bclr    D1D2,trans2          ; Clear "D1D2" bit of "trans2" variable
 873A [04] C60135    2370       lda     CCS_del              ; Load accumulator with value in "CCS_del"
 873D [03] B7A1      2371       sta     TIMcnt               ; Copy to "TIMcnt" variable
 873F [04] 1A61      2372       bset    CCSdel,shift         ; Set "CCsdel" bit of "shift" variable
                     2373  
                     2374  SEQ_DN_DONE:
 8741 [05] 4E6E6D    2375       mov     gear_com,gear_cur    ; Move value in "gear_com" to "gear_cur"
 8744 [03] 3F77      2376       clr     dfSel                ; Clear "dfSel" variable
 8746 [04] 1077      2377       bset    selTO,dfSel          ; Set "selTO" bit of "dfSel"
 8748 [03] CC87C7    2378       jmp     DO_DFSEL             ; Jump to DO_DFSEL:(long branch)
                     2379  
                     2380  
                     2381  ;****************************************************************************
                     2382  ; ------------------------ Sequential Upshift Section -----------------------
                     2383  ;  - The upshift events, 1-2,2-3,and 3-4, each have their own EPC tables.
                     2384  ;   Upshift sequence for 1-2, and 2-3 is as follows:
                     2385  ;   - Set the "EPCrSS" bit of "shift" variable, start the pressure rise
                     2386  ;     count down timer, and set EPC according to the "EPC_xx" table.
                     2387  ;   - When the pressure rise counter zeros, clear the "EPCrSS" bit and set
                     2388  ;     the "EPChSS" bit of "shift" variable. Change solonoid state and start
                     2389  ;     the pressure hold timer. Set EPC according to the "EPC_xx" table.
                     2390  ;   - When the pressure hold timer zeros, clear the "EPChSS" bit of "shift"
                     2391  ;     variable and set EPC according to the "EPC_move" table.
                     2392  ;   Upshift sequence for 3-4 is similar, except that provision must be made
                     2393  ;     to ensure the Coast Clutch is completely disengaged before the 3-4
                     2394  ;     solonoid state change takes place.
                     2395  ;   Upshift sequence for 3-4 is as follows:
                     2396  ;    - De-energise the Coast Clutch. Set the "CCSdel" bit of "shift"
                     2397  ;     variable and start the CCS delay timer. When the CCS delay timer
                     2398  ;     zeros, clear the "CCSdel" bit of "shift" variable, set the "EPCrSS"
                     2399  ;     bit of "shift" variable and proceed in the same order as the 1-2,
                     2400  ;     and 2-3 shifts.
                     2401  ;****************************************************************************
                     2402  
                     2403  ;****************************************************************************
                     2404  ; - Drive 1 to Drive 2 shift
                     2405  ;****************************************************************************
                     2406  
                     2407  SHIFT12:
 874B [05] 04610F    2408       brset   EPCrSS,shift,SHIFT12A  ; If "EPCrSS" bit of "shift" variable
                     2409                                      ; is set, branch to SHIFT12A:
 874E [04] 1461      2410       bset    EPCrSS,shift       ; Set "EPCrSS" bit of "shift" variable
 8750 [04] 1845      2411       bset    SSprog,trans2      ; Set "SSprog" bit of "trans2" variable
 8752 [04] C60132    2412       lda     EPC_rise           ; Load accumulator with value in "EPC_rise"
 8755 [03] B7A1      2413       sta     TIMcnt             ; Copy to "TIMcnt"
 8757 [03] 3F77      2414       clr     dfSel              ; Clear "dfSel" variable
 8759 [04] 1477      2415       bset    sel12,dfSel        ; Set "sel12" bit of "dfSel"
 875B [03] 2015      2416       bra     SHIFT12_DONE       ; Branch to SHIFT12__DONE:
                     2417  
                     2418  SHIFT12A:
 875D [03] B6A1      2419       lda     TIMcnt             ; Load accumulator with value in "TIMcnt"
                     2420                                  ; variable
 875F [03] 2611      2421       bne     SHIFT12_DONE       ; If Z bit of CCR is clear, branch to
                     2422                                  ; SHIFT12_DONE:
 8761 [04] 1561      2423       bclr    EPCrSS,shift       ; Clear "EPCrSS" bit of "shift" variable
 8763 [04] 1661      2424       bset    EPChSS,shift       ; Set "EPChSS" bit of "shift" variable
 8765 [05] CD8F2E    2425       jsr     D2_SOLS            ; Jump to subroutine at D2_SOLS
                     2426                                  ;(SS1 on, SS2 on, CCS on, "CCSon" set)
 8768 [04] 1C45      2427       bset    D1D2,trans2        ; Set"D1D2" bit of "trans2" variable
 876A [04] C60133    2428       lda     EPC_hold           ; Load accumulator with value in "EPC_hold"
 876D [03] B7A1      2429       sta     TIMcnt             ; Copy to "TIMcnt"
 876F [05] 4E6E6D    2430       mov     gear_com,gear_cur  ; Move value in "gear_com" to "gear_cur"
                     2431  
                     2432  SHIFT12_DONE:
 8772 [03] CC87C7    2433       jmp     DO_DFSEL           ; Jump to DO_DFSEL:(long branch)
                     2434  
                     2435  


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 24
MC68HC908GP32 User Bootloader


                     2436  ;****************************************************************************
                     2437  ; - Drive 2 to Drive 3 shift
                     2438  ;****************************************************************************
                     2439  
                     2440  SHIFT23:
 8775 [05] 04610F    2441       brset   EPCrSS,shift,SHIFT23A  ; If "EPCrSS" bit of "shift" variable
                     2442                                      ; is set, branch to SHIFT23A:
 8778 [04] 1461      2443       bset    EPCrSS,shift       ; Set "EPCrSS" bit of "shift" variable
 877A [04] 1845      2444       bset    SSprog,trans2      ; Set "SSprog" bit of "trans2" variable
 877C [04] C60132    2445       lda     EPC_rise           ; Load accumulator with value in "EPC_rise"
 877F [03] B7A1      2446       sta     TIMcnt             ; Copy to "TIMcnt"
 8781 [03] 3F77      2447       clr     dfSel              ; Clear "dfSel" variable
 8783 [04] 1677      2448       bset    sel23,dfSel        ; Set "sel23" bit of "dfSel"
 8785 [03] 2013      2449       bra     SHIFT23_DONE       ; Branch to SHIFT23_DONE:
                     2450  
                     2451  SHIFT23A:
 8787 [03] B6A1      2452       lda     TIMcnt             ; Load accumulator with value in "TIMcnt"
                     2453                                  ; variable
 8789 [03] 260F      2454       bne     SHIFT23_DONE       ; If Z bit of CCR is clear, branch to
                     2455                                  ; SHIFT23_DONE:
 878B [04] 1561      2456       bclr    EPCrSS,shift       ; Clear "EPCrSS" bit of "shift" variable
 878D [04] 1661      2457       bset    EPChSS,shift       ; Set "EPChSS" bit of "shift" variable
 878F [05] CD8F39    2458       jsr     D3_SOLS            ; Jump to subroutine at D3_SOLS:
                     2459                                  ;(SS1 off, SS2 on, CCS on, "CCSon" set,
                     2460                                  ; "D1D2" clr)
 8792 [04] C60133    2461       lda     EPC_hold           ; Load accumulator with value in "EPC_hold"
 8795 [03] B7A1      2462       sta     TIMcnt             ; Copy to "TIMcnt"
 8797 [05] 4E6E6D    2463       mov     gear_com,gear_cur  ; Move value in "gear_com" to "gear_cur"
                     2464  
                     2465  SHIFT23_DONE:
 879A [03] CC87C7    2466       jmp     DO_DFSEL           ; Jump to DO_DFSEL:(long branch)
                     2467  
                     2468  
                     2469  ;****************************************************************************
                     2470  ; - Drive 3 to Drive 4 shift
                     2471  ;****************************************************************************
                     2472  
                     2473  SHIFT34:
 879D [05] 0C6113    2474       brset   SSsdel,shift,SHIFT34A  ; If "SSsdel" bit of "shift" variable
                     2475                                  ; is set, branch to SHIFT34A:
 87A0 [04] 1602      2476       bset    CCS,portc          ; Set "CCS" bit of Port C,(CCS off)
 87A2 [04] 1145      2477       bclr    CCSon,trans2       ; Clear "CCSon" bit of "trans2" variable
 87A4 [04] 1845      2478       bset    SSprog,trans2      ; Set "SSprog" bit of "trans2" variable
 87A6 [04] 1C61      2479       bset    SSsdel,shift       ; Set "SSsdel" bit of "shift" variable
 87A8 [04] C60136    2480       lda     SSs_del            ; Load accumulator with value in "SSs_del"
 87AB [03] B7A1      2481       sta     TIMcnt             ; Copy to "TIMcnt" variable
 87AD [03] 3F77      2482       clr     dfSel              ; Clear "dfSel" variable
 87AF [04] 1877      2483       bset    sel34,dfSel        ; Set "sel34" bit of "dfSel"
 87B1 [03] 2014      2484       bra     SHIFT34_DONE       ; Branch to SHIFT34_DONE:
                     2485  
                     2486  SHIFT34A:
 87B3 [03] B6A1      2487       lda     TIMcnt             ; Load accumulator with value in "TIMcnt"
                     2488                                  ; variable
 87B5 [03] 2610      2489       bne     SHIFT34_DONE       ; If Z bit of CCR is clear, branch to
                     2490                                  ; SHIFT34_DONE:
 87B7 [04] 1D61      2491       bclr    SSsdel,shift       ; Clear "SSsdel" bit of "shift" variable
 87B9 [04] 1661      2492       bset    EPChSS,shift       ; Set "EPChSS" bit of "shift" variable
 87BB [04] 1202      2493       bset    SS1,portc          ; Set "SS1" bit of Port C(SS1 off)
 87BD [04] 1002      2494       bset    SS2,portc          ; Set "SS2" bit of Port C(SS2 off)
 87BF [04] C60133    2495       lda     EPC_hold           ; Load accumulator with value in "EPC_hold"
 87C2 [03] B7A1      2496       sta     TIMcnt             ; Copy to "TIMcnt"
 87C4 [05] 4E6E6D    2497       mov     gear_com,gear_cur  ; Move value in "gear_com" to "gear_cur"
                     2498  
                     2499  SHIFT34_DONE:
                     2500  
                     2501  DO_DFSEL:
                     2502  
                     2503  ;****************************************************************************
                     2504  ; - Check to see if the CCS apply delay timer is active. If it is, check
                     2505  ;   status and act accordingly, otherwise, skip over.
                     2506  ;****************************************************************************
                     2507  
                     2508  
 87C7 [05] 0B6112    2509       brclr   CCSdel,shift,DO_DFSEL_A  ; If "CCSdel" bit of "shift" variable
                     2510                                        ; is clear, branch to DO_DFSEL_A:
 87CA [05] 00450F    2511       brset   CCSon,trans2,DO_DFSEL_A  ; If "CCSon" bit of "trans2" variable
                     2512                                        ; is set, branch to DO_DFSEL_A:
 87CD [03] B6A1      2513       lda     TIMcnt                   ; Load accumulator with value in
                     2514                                        ; "TIMcnt" variable
 87CF [03] 260B      2515       bne     DO_DFSEL_A               ; If Z bit of CCR is clear, branch to
                     2516                                        ; DO_DFSEL_A:
 87D1 [03] B646      2517       lda     gearcnt
 87D3 [04] 410404    2518       cbeqa   #forth,NO_CCS
 87D6 [04] 1702      2519       bclr    CCS,portc                ; Clear "CCS" bit of Port C,(CCS on)
 87D8 [04] 1045      2520       bset    CCSon,trans2             ; Set "CCSon" bit of "trans2" variable
                     2521  
                     2522  NO_CCS:
 87DA [04] 1B61      2523       bclr    CCSdel,shift             ; Clear "CCSdel" bit of "shift" variable
                     2524  
                     2525  ;****************************************************************************
                     2526  ; - Check to see if the EPC Hold timer is active. If it is, check
                     2527  ;   status and act accordingly, otherwise, skip over. This keeps the current
                     2528  ;   EPC value until the hold timer times out. The next pass will return EPC
                     2529  ;   "TO" value
                     2530  ;****************************************************************************
                     2531  
                     2532  DO_DFSEL_A:
 87DC [05] 076108    2533       brclr   EPChSS,shift,DO_DFSEL_B  ; If "EPChSS" bit of "shift" variable
                     2534                                        ; is clear, branch to DO_DFSEL_B:
 87DF [03] B6A1      2535       lda     TIMcnt                   ; Load accumulator with value in
                     2536                                        ; "TIMcnt" variable
 87E1 [03] 2604      2537       bne     DO_DFSEL_B               ; If Z bit of CCR is clear, branch to
                     2538                                        ; DO_DFSEL_B:
 87E3 [04] 1761      2539       bclr    EPChSS,shift             ; Clear "EPChSS" bit of "shift" var
 87E5 [04] 1945      2540       bclr    SSprog,trans2            ; Clear "SSprog" bit of "trans2" var
                     2541  
                     2542  ;****************************************************************************
                     2543  ; - Check to see if the TCC Hold timer is active. If it is, check
                     2544  ;   status and act accordingly, otherwise, skip over. This keeps the current
                     2545  ;   EPC value until the hold timer times out. The next pass will return EPC
                     2546  ;   "TO" value
                     2547  ;****************************************************************************
                     2548  
                     2549  DO_DFSEL_B:
 87E7 [05] 036108    2550       brclr   EPChTCC,shift,DO_DFSEL_C  ; If "EPChTCC" bit of "shift" var
                     2551                                         ; is clear, branch to DO_DFSEL_C:
 87EA [03] B6A1      2552       lda     TIMcnt                    ; Load accumulator with value in
                     2553                                         ; "TIMcnt" variable
 87EC [03] 2604      2554       bne     DO_DFSEL_C                ; If Z bit of CCR is clear, branch
                     2555                                         ; DO_DFSEL_C:
 87EE [04] 1361      2556       bclr    EPChTCC,shift             ; Clear "EPChTCC" bit of "shift" var
 87F0 [04] 1B45      2557       bclr    TCprog,trans2             ; Clear "TCprog" bit of "trans2" var
                     2558  
                     2559  ;****************************************************************************
                     2560  ;    Check to see if Torque Converter Clutch should be on or off.
                     2561  ;****************************************************************************
                     2562  
                     2563  DO_DFSEL_C:
 87F2 [05] CD8E46    2564       jsr     TCC_CHKOFF        ; Branch to subroutine at TCC_CHKOFF:
                     2565  
                     2566  ;****************************************************************************
                     2567  ; - Check to see if DFC enable and Exhaust brake should be on or off.
                     2568  ;****************************************************************************
                     2569  
 87F5 [05] CD8EC3    2570       jsr     BRK_CHKOFF        ; Jump to subroutine at BRK_CHKOFF:
                     2571  


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 25
MC68HC908GP32 User Bootloader


                     2572  ;****************************************************************************
                     2573  ;   In priority order:
                     2574  ; - Check to see if vehicle is in stall condition.
                     2575  ;   If it is, command "stall" EPC.
                     2576  ; - Check to see if a gear upshift is in progress. If it is, the appropriate
                     2577  ;   EPC was commanded at the start of the shift sequence.
                     2578  ; - Check to see if TCC apply is in progress, If it is, the "TCC" EPC was
                     2579  ;   commanded at the start of the application sequence.
                     2580  ;
                     2581  ;   NOTE! - If the TCC apply has been commanded during an up shift, the TCC
                     2582  ;   pressure rise sequence is ignored, the solenoid is energised and flags
                     2583  ;   set. The pressure rise sequence for the shift continues as normal.
                     2584  ;
                     2585  ; - Check to see if "decel" conditions are met (closed throttle, in D4,D3,
                     2586  ;   or M2, with TCC on. If it is, command "decel" EPC.
                     2587  ; - If none of the above conditions are met, assume the vehicle is moving
                     2588  ;   at a steady rate. First, check to see if the vehicle is accelerating.
                     2589  ;   If it is, command "TCC" EPC, otherwise, command "TO" (torque output) EPC.
                     2590  ;****************************************************************************
                     2591  
                     2592  
                     2593  DO_DFSEL_D:
 87F8 [05] 084415    2594       brset   MPHstall,trans,STALL_EPC  ; If "MPHstall" bit of "trans" var
                     2595                                         ; is set, branch to STALL_EPC:
                     2596                                         ;(vehicle in "stall" condiditon)
 87FB [05] 08450E    2597       brset   SSprog,trans2,SHIFT_EPC   ; If "SSprog" bit of "trans2"
                     2598                                         ; variableis set, branch to
                     2599                                         ; SHIFT_EPC:(shift up in progress)
 87FE [05] 0A450D    2600       brset   TCprog,trans2,TCC_EPC     ; If "TCprog" bit of "trans2" var
                     2601                                         ; is set, branch to TCC_EPC:
                     2602                                         ;(TCC application in progress)
 8801 [05] 05441E    2603       brclr   ClsThrt,trans,MOVE_EPC    ; If "ClsThrt" bit of "trans" var
                     2604                                         ; is clear, branch to MOVE_EPC:
                     2605                                         ;(throttle not closed)
 8804 [05] 0C451B    2606       brset   D1D2,trans2,MOVE_EPC      ; If "D1D2" bit of "trans2" var
                     2607                                         ; is set, branch to MOVE_EPC:
                     2608                                         ;(in D1 or D2, no engine braking)
 8807 [05] 02450F    2609       brset   TCCon,trans2,DECEL_EPC    ; If "TCCon" bit of "trans2" var
                     2610                                         ; is set, branch to DECEL_EPC
                     2611                                         ;(TCC applied)
 880A [03] 2016      2612       bra     MOVE_EPC                  ; Branch to MOVE_EPC:
                     2613  
                     2614  SHIFT_EPC:
 880C [03] 2027      2615       bra     DFSEL_DONE                ; Branch to DFSEL_DONE:
                     2616  
                     2617  TCC_EPC:
 880E [03] 2025      2618       bra     DFSEL_DONE                ; Branch to DFSEL_DONE:
                     2619  
                     2620  STALL_EPC:
 8810 [05] 027722    2621       brset   selStl,dfSel,DFSEL_DONE   ; If "selStl" bit of "dfSel"
                     2622                                         ; variable is set, branch to
                     2623                                         ; EPC_DONE:
 8813 [03] 3F77      2624       clr     dfSel                     ; Clear "dfSel" variable
 8815 [04] 1277      2625       bset    selStl,dfSel              ; Set "selStl" bit of "dfSel"
 8817 [03] 201C      2626       bra     DFSEL_DONE                ; Branch to DFSEL_DONE:
                     2627  
                     2628  DECEL_EPC:
 8819 [05] 0C7719    2629       brset   selDcl,dfSel,DFSEL_DONE   ; If "selDcl" bit of "dfSel"
                     2630                                         ; variable is set, branch to
                     2631                                         ; EPC_DONE:
 881C [03] 3F77      2632       clr     dfSel                     ; Clear "dfSel" variable
 881E [04] 1C77      2633       bset    selDcl,dfSel              ; Set "selDcl" bit of "dfSel"
 8820 [03] 2013      2634       bra     DFSEL_DONE                ; Branch to DFSEL_DONE:
                     2635  
                     2636  MOVE_EPC:
 8822 [05] 0A4409    2637       brset   accel,trans,ACCEL_EPC     ; If "accel" bit of "trans" variable
                     2638                                         ; is set, branch to ACCEL_EPC:
                     2639                                         ;(vehicle is accelerating)
                     2640  
 8825 [05] 00770D    2641       brset   selTO,dfSel,DFSEL_DONE    ; If "selTO" bit of "dfSel"
                     2642                                         ; variable is set, branch to
                     2643                                         ; EPC_DONE:
 8828 [03] 3F77      2644       clr     dfSel                     ; Clear "dfSel" variable
 882A [04] 1077      2645       bset    selTO,dfSel               ; Set "selTO" bit of "dfSel"
 882C [03] 2007      2646       bra     DFSEL_DONE                ; Branch to DFSEL_DONE:
                     2647  
                     2648  ACCEL_EPC:
 882E [05] 0A7704    2649       brset   selTCC,dfSel,DFSEL_DONE   ; If "selTCC" bit of "dfSel"
                     2650                                         ; variable is set, branch to
                     2651                                         ; EPC_DONE:
 8831 [03] 3F77      2652       clr     dfSel                     ; Clear "dfSel" variable
 8833 [04] 1A77      2653       bset    selTCC,dfSel              ; Set "selTCC" bit of "dfSel"
                     2654  
                     2655  DFSEL_DONE:
                     2656  
                     2657  ;****************************************************************************
                     2658  ; - Determine which duty factor has been selected, and branch accordingly
                     2659  ;****************************************************************************
                     2660  
 8835 [05] 007715    2661       brset   selTO,dfSel,GET_TO       ; If "selTO" bit of "dfSel" variable
                     2662                                        ; is set, branch to GET_TO:
 8838 [05] 02771B    2663       brset   selStl,dfSel,GET_STL     ; If "selStl" bit of "dfSel" variable
                     2664                                        ; is set, branch to GET_STL:
 883B [05] 047721    2665       brset   sel12,dfSel,GET_12       ; If "sel12" bit of "dfSel" variable
                     2666                                        ; is set, branch to GET_12:
 883E [05] 067727    2667       brset   sel23,dfSel,GET_23       ; If "sel23" bit of "dfSel" variable
                     2668                                        ; is set, branch to GET_23:
 8841 [05] 08772D    2669       brset   sel34,dfSel,GET_34       ; If "sel34" bit of "dfSel" variable
                     2670                                        ; is set, branch to GET_34:
 8844 [05] 0A7733    2671       brset   selTCC,dfSel,GET_TCC     ; If "selTCC" bit of "dfSel" variable
                     2672                                        ; is set, branch to GET_TCC:
 8847 [05] 0C7738    2673       brset   selDcl,dfSel,GET_Dcl     ; If "selDcl" bit of "dfSel" variable
                     2674                                        ; is set, branch to GET_Dcl:
 884A [05] 0E774A    2675       brset   selM1,dfSel,GET_M1       ; If "selM1" bit of "dfSel" variable
                     2676                                        ; is set, branch to GET_M1:
                     2677  
                     2678  GET_TO:
 884D [05] CD8CE9    2679       jsr     MOVE_CALCS        ; Jump to subroutine at MOVE_CALCS:
 8850 [05] 4E855C    2680       mov     tmp6,df           ; Copy value in "tmp6" to "df"
 8853 [03] CC889D    2681       jmp     DF_DONE           ; Jump to DF_DONE:
                     2682  
                     2683  GET_STL:
 8856 [05] CD8D88    2684       jsr     STALL_CALCS       ; Jump to subroutine at STALL_CALCS:
 8859 [05] 4E855C    2685       mov     tmp6,df           ; Copy value in "tmp6" to "df"
 885C [03] CC889D    2686       jmp     DF_DONE           ; Jump to DF_DONE:
                     2687  
                     2688  GET_12:
 885F [05] CD8DAE    2689       jsr     SHIFT12_CALCS     ; Jump to subroutine at SHIFT12_CALCS:
 8862 [05] 4E855C    2690       mov     tmp6,df           ; Copy value in "tmp6" to "df"
 8865 [03] CC889D    2691       jmp     DF_DONE           ; Jump to DF_DONE:
                     2692  
                     2693  GET_23:
 8868 [05] CD8DD4    2694       jsr     SHIFT23_CALCS     ; Jump to subroutine at SHIFT23_CALCS:
 886B [05] 4E855C    2695       mov     tmp6,df           ; Copy value in "tmp6" to "df"
 886E [03] CC889D    2696       jmp     DF_DONE           ; Jump to DF_DONE:
                     2697  
                     2698  GET_34:
 8871 [05] CD8DFA    2699       jsr     SHIFT34_CALCS     ; Jump to subroutine at SHIFT34_CALCS:
 8874 [05] 4E855C    2700       mov     tmp6,df           ; Copy value in "tmp6" to "df"
 8877 [03] CC889D    2701       jmp     DF_DONE           ; Jump to DF_DONE:
                     2702  
                     2703  GET_TCC:
 887A [04] C60130    2704       lda     EPC_TCC           ; Load accumulator with value in "EPC_TCC"
 887D [03] B75C      2705       sta     df                ; Copy value in accumulator to "df"
 887F [03] CC889D    2706       jmp     DF_DONE           ; Jump to DF_DONE:
                     2707  


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 26
MC68HC908GP32 User Bootloader


                     2708  GET_Dcl:
 8882 [03] B66B      2709       lda     mlpsp_cur         ; Load accumulator with value in "mlpsp_cur"
 8884 [04] 410608    2710       cbeqa   #M1,M1_Dcl        ; Compare with value #M1, if equal, branch
                     2711                                 ; to M1_Dcl:
 8887 [04] C60131    2712       lda     EPC_decel         ; Load accumulator with value in "EPC_decel"
 888A [03] B75C      2713       sta     df                ; Copy value in accumulator to "df"
 888C [03] CC889D    2714       jmp     DF_DONE           ; Jump to DF_DONE:
                     2715  
                     2716  M1_Dcl:
 888F [04] C60148    2717       lda     EPC_M1_decel      ; Load accumulator with value in "EPC_M1_decel"
 8892 [03] B75C      2718       sta     df                ; Copy value in accumulator to "df"
 8894 [03] CC889D    2719       jmp     DF_DONE           ; Jump to DF_DONE:
                     2720  
                     2721  GET_M1:
 8897 [05] CD8E20    2722       jsr     M1_CALCS          ; Jump to subroutine at M1_CALCS:
 889A [05] 4E855C    2723       mov     tmp6,df           ; Copy value in "tmp6" to "df"
                     2724  
                     2725  DF_DONE:
                     2726  
                     2727  ;****************************************************************************
                     2728  ; ----------------- Computation of Final EPC Duty Factor -------------------
                     2729  ;
                     2730  ; - Depending on conditions, initial 8 bit EPC duty factor ("df"), is set by
                     2731  ;   the absolute values of "EPC_TCC", or "EPC_decel", "EPC_M1_decel",
                     2732  ;   or the computed values from the "TO table", "EPC_stall", "EPC_12",
                     2733  ;   "EPC_23", "EPC_34" or "EPC_M1" tables.
                     2734  ;   "df" is scaled to 255 for maximum resolution(255 = 100% duty).
                     2735  ;   "df" is then adjusted for transmission oil temperature correction, and
                     2736  ;   trim correction, the result saved as Duty Factor Final("dff") "dff" is
                     2737  ;   then multiplied by 800 and divided by 256 to get the EPC pulse width
                     2738  ;   (EPCpwH:EPCpwL)
                     2739  ;
                     2740  ;   The Transmission Oil Temperature Adder changes the duty factor by the
                     2741  ;   Add/Subtract values calculated below, with 0
                     2742  ;   correction at ~160 degrees F. It's purpose is to compensate for
                     2743  ;   for the effects of oil viscosity changes on the operation of the
                     2744  ;   solonoids and friction elements.
                     2745  ;
                     2746  ;   The EPC Trim Adder changes the duty factor by the Add/Subtract
                     2747  ;   values calculated using the "TrimFac" correction value and measured
                     2748  ;   EPC Trim Pot ADC count with 0 correction at 128 counts.
                     2749  ;   It's purpose is for a tuning aid.
                     2750  ;
                     2751  ;   Both correction adder variables can be enabled or disabled with
                     2752  ;   a software switch in the "TuneConfig" variable to aid in
                     2753  ;   troubleshooting and or tuning.
                     2754  ;
                     2755  ; - Method is as follows, where:
                     2756  ;   TOTempDif = Difference between "TOTemp" and 180(140F)
                     2757  ;   TOTempP   = TOTemp percent calculation value (TOTemp/180)
                     2758  ;   TOTAdd    = Trans Oil Temp correction Add/Subtract value
                     2759  ;   TrimDif   = Difference between "Trim" and 128(mid point)
                     2760  ;   TrimP     = Trim percent calculation value (TrimDif/128)
                     2761  ;   TrimAdd   = EPC Trim correction Add/Subtract value
                     2762  ;   df        = EPC Duty Factor from "TO" table, stall or shift tables,
                     2763  ;               or, absolute values "EPC_TCC", or "EPC_decel"
                     2764  ;               (scaled to 256)
                     2765  ;   df1       = "df" after TOT cor, before Trim cor
                     2766  ;   dff       = "df1" after Trim cor(Final EPC Duty Factor)
                     2767  ;
                     2768  ;   df +/- TOTAdd = df1
                     2769  ;   df1 +/- TrimAdd = dff
                     2770  ;
                     2771  ;****************************************************************************
                     2772  
                     2773  ;****************************************************************************
                     2774  ; - Check "tconf" variable to see if TOT correction has been enabled.
                     2775  ;   If so, branch to the "TOTCALC" section. If not, skip over to clear
                     2776  ;   "TOTempP" and "TOTAdd", copy value in "df" to "df1" (no correction).
                     2777  ;****************************************************************************
                     2778  
 889D [05] 006203    2779       brset   tt,tconf,TOTCALC     ; If "tt" bit of "tconf" variable is set,
                     2780                                    ; branch to TOTCALC:
 88A0 [03] CC8906    2781       jmp     DF_OK               ; Jump to DF_OK:
                     2782  
                     2783  
                     2784  ;****************************************************************************
                     2785  ; - Calculate EPC Duty Factor after TOT Correction("df1")
                     2786  ;   This is done by determining what percent "TOTemp" is from the no
                     2787  ;   correction value) of 160 (160F). This value is then used to calculate
                     2788  ;   the percent of the maximum add/subtract value (TOTempFac), and
                     2789  ;   is stored as "TOTAdd". The "TOTAdd" value is either added to, or
                     2790  ;   subtracted from "df" to result in "df1", depending on which side of the
                     2791  ;   no correction value of 160 that "TOTemp" falls on.
                     2792  ;   Temperatures above 160F will require duty factor values to be reduced
                     2793  ;   (lowering EPC current thereby raising pressure) Temperatures below 160F
                     2794  ;   will require duty factor values to be increased (lowering EPC current
                     2795  ;   thereby raising pressure), but this is not expected to have to be done.
                     2796  ;   Correction is limited by the use of programmable "TOThi" and TOTlo" values.
                     2797  ;****************************************************************************
                     2798  
                     2799  TOTCALC:
 88A3 [03] B651      2800       lda     TOTemp           ; Load accumulator with value Trans Oil Temp
                     2801                                ; variable (degrees F)
 88A5 [02] A1A0      2802       cmp     #$A0             ; Compare with decimal 160(no correction)
 88A7 [03] 275D      2803       beq     DF_OK            ; If (A)=(M) branch to DF_OK:
 88A9 [03] 2511      2804       blo     DECR_TOTP        ; IF (A)<(M) branch to DECR_TOTP:
                     2805  
                     2806  INCR_TOTP:
 88AB [04] C10144    2807       cmp     TOThi            ; Compare "TOTemp"(A) with "TOThi"(M)
 88AE [03] 2407      2808       bhs     RAIL_TOT_HI      ; If A>=M branch to RAIL_TOT_HI:
                     2809  
                     2810  SUB_A0:
 88B0 [02] A0A0      2811       sub     #$A0             ; Subtract (A)<-(A)-(M)("TOTemp" - 160)
                     2812                                ; or ("TOThi" - 160)
 88B2 [03] B756      2813       sta     TOTempDif        ; Copy result to "TOTempDif"
 88B4 [03] CC88D1    2814       jmp     DO_TOTP          ; Jump to DO_TOTP:
                     2815  
                     2816  RAIL_TOT_HI:
 88B7 [04] C60144    2817       lda     TOThi            ; Load accumulator with value Trans Oil Temp
                     2818                                ; correction Hi limit (degrees F)
 88BA [03] 20F4      2819       bra     SUB_A0           ; Branch to SUB_A0:
                     2820  
                     2821  DECR_TOTP:
 88BC [04] C10145    2822       cmp     TOTlo            ; Compare "TOTemp"(A) with "TOTlo"(M)
 88BF [03] 2309      2823       bls     RAIL_TOT_LO      ; If A<=M branch to RAIL_TOT_LO:
 88C1 [02] A6A0      2824       lda     #$A0             ; Load accumulator with decimal 160
 88C3 [03] B051      2825       sub     TOTemp           ; Subtract (A)<-(A)-(M)(160 - "TOTemp")
 88C5 [03] B756      2826       sta     TOTempDif        ; Copy result to "TOTempDif"
 88C7 [03] CC88D1    2827       jmp     DO_TOTP          ; Jump to DO_TOTP:
                     2828  
                     2829  RAIL_TOT_LO:
 88CA [02] A6A0      2830       lda     #$A0             ; Load accumulator with decimal 160
 88CC [04] C00145    2831       sub     TOTlo            ; Subtract (A)<-(A)-(M)(160 - "TOTlo")
 88CF [03] B756      2832       sta     TOTempDif        ; Copy result to "TOTempDif"
                     2833  
                     2834  DO_TOTP:
 88D1 [01] 97        2835       tax                      ; Transfer value in accumulator to index register
                     2836                                ; Lo byte ("TOTempif" to X)
 88D2 [02] A664      2837       lda     #$64             ; Load accumulator with decimal 100
 88D4 [05] 42        2838       mul                      ; Multiply, (X:A)<-(X)*(A)(TOTempDif*100)
 88D5 [02] 89        2839       pshx                     ; Push value in index register Lo byte to stack
 88D6 [02] 8A        2840       pulh                     ; Pull value from stack to index register Hi byte
                     2841                                ;(X to H)
 88D7 [02] AEA0      2842       ldx     #$A0             ; Load index register Lo byte with decimal 160
                     2843                                ;(no correction)


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 27
MC68HC908GP32 User Bootloader


 88D9 [07] 52        2844       div                      ; Divide, (A)<-(H:A)/(X);(H)<-Rem (result/100)
 88DA [05] CD8C74    2845       jsr     DIVROUND         ; Jump to subroutine at DIVROUND:
 88DD [03] B757      2846       sta     TOTempP          ; Copy result to "TOTempP"
 88DF [01] 97        2847       tax                      ; Transfer value in accumulator to index register
                     2848                                ; Lo byte ("TOTempP" to X)
 88E0 [04] C60143    2849       lda     TOTempFac        ; Load accumulator with value in "TOTempFac"
 88E3 [05] 42        2850       mul                      ; Multiply, (X:A)<-(X)*(A)(TOTempP*TOTempFac)
 88E4 [02] 89        2851       pshx                     ; Push value in index register Lo byte to stack
 88E5 [02] 8A        2852       pulh                     ; Pull value from stack to index register Hi byte
                     2853                                ;(X to H)
 88E6 [02] AE64      2854       ldx     #$64             ; Load index register Lo byte with decimal 100
 88E8 [07] 52        2855       div                      ; Divide, (A)<-(H:A)/(X);(H)<-Rem (result/100)
 88E9 [05] CD8C74    2856       jsr     DIVROUND         ; Jump to subroutine at DIVROUND:
 88EC [03] B758      2857       sta     TOTAdd           ; Copy result to "TOTAdd"
 88EE [03] B651      2858       lda     TOTemp           ; Load accumulator with value Trans Oil Temp
                     2859                                ; variable (degrees F - 40)
 88F0 [02] A1A0      2860       cmp     #$A0             ; Compare with decimal 160(no correction)
                     2861  ;*     blo     DECR_DF          ; IF (A)<(M) branch to DECR_DF:
 88F2 [03] 2209      2862       bhi     DECR_DF          ; IF (M)<(A) branch to DECR_DF:
                     2863  
                     2864  
                     2865  INCR_DF:
 88F4 [03] B65C      2866       lda     df               ; Load accumulator with value in "df"
 88F6 [03] BB58      2867       add     TOTAdd           ; Add (A)<-(A)+(M)("df + "TOTAdd")
 88F8 [03] B75D      2868       sta     df1              ; Copy result to "df1"
 88FA [03] CC890D    2869       jmp     TOTCALC_DONE     ; Jump to TOTCALC_DONE:
                     2870  
                     2871  DECR_DF:
 88FD [03] B65C      2872       lda     df              ; Load accumulator with value in "df"
 88FF [03] B058      2873       sub     TOTAdd           ; Subtract (A)<-(A)-(M)("df - "TOTAdd")
 8901 [03] B75D      2874       sta     df1              ; Copy result to "df1"
 8903 [03] CC890D    2875       jmp     TOTCALC_DONE     ; Jump to TOTCALC_DONE:
                     2876  
                     2877  DF_OK:
 8906 [03] 3F57      2878       clr     TOTempP          ; Clear "TOTempP"
 8908 [03] 3F58      2879       clr     TOTAdd           ; Clear "TOTAdd"
 890A [05] 4E5C5D    2880       mov     df,df1          ; Move value in "df" to "df1"
                     2881  
                     2882  TOTCALC_DONE:
                     2883  
                     2884  ;****************************************************************************
                     2885  ; - Check "tconf" variable to see if EPC Trim correction has been enabled.
                     2886  ;   If so, branch to the "TRIMCALC" section. If not, skip over to clear
                     2887  ;   "TrimP" and "TrimAdd", copy value in "df1" to "dff" (no correction).
                     2888  ;****************************************************************************
                     2889  
 890D [05] 026203    2890       brset   tr,tconf,TRIMCALC     ; If "tr" bit of "tconf" variable is set,
                     2891                                     ; branch to TRIMCALC:
 8910 [03] CC895F    2892       jmp     DF1_OK                ; Jump to DF1_OK:
                     2893  
                     2894  ;****************************************************************************
                     2895  ; - Calculate final EPC Duty Factor after EPC Trim Correction("dff")
                     2896  ;   This is done by determining what percent "Trim" is from the mid point
                     2897  ;   (no correction value) of 128 (TrimP). This value is then used to
                     2898  ;   calculate the percent of the maximum add/subtract value (TrimFac), and
                     2899  ;   is stored as "TrimAdd". The "TrimAdd" value is either added to, or
                     2900  ;   subtracted from "df1" to result in "dff", depending on which side of the
                     2901  ;   no correction value of 128 that "Trim" falls on.
                     2902  ;****************************************************************************
                     2903  
                     2904  TRIMCALC:
 8913 [03] B64D      2905       lda     Trim             ; Load accumulator with value in EPC Trim
                     2906                                ; ADC reading
 8915 [02] A180      2907       cmp     #$80             ; Compare with decimal 128(mid point)
 8917 [03] 2746      2908       beq     DF1_OK           ; If (A)=(M) branch to DF1_OK:
 8919 [03] 2509      2909       blo     DECR_TRIMP       ; IF (A)<(M) branch to DECR_TRIMP:
                     2910  
                     2911  INCR_TRIMP:
 891B [03] B64D      2912       lda     Trim             ; Load accumulator with value in EPC Trim
                     2913                                ; ADC reading
 891D [02] A080      2914       sub     #$80             ; Subtract (A)<-(A)-(M)("Trim" - 128)
 891F [03] B759      2915       sta     TrimDif          ; Copy result to "TrimDif"
 8921 [03] CC892A    2916       jmp     DO_TRIMP         ; Jump to DO_TRIMP:
                     2917  
                     2918  DECR_TRIMP:
 8924 [02] A680      2919       lda     #$80             ; Load accumulator with decimal 128
 8926 [03] B04D      2920       sub     Trim             ; Subtract (A)<-(A)-(M)(128 - "Trim")
 8928 [03] B759      2921       sta     TrimDif          ; Copy result to "TrimDif"
                     2922  
                     2923  DO_TRIMP:
 892A [01] 97        2924       tax                      ; Transfer value in accumulator to index register
                     2925                                ; Lo byte ("TrimDif" to X)
 892B [02] A664      2926       lda     #$64             ; Load accumulator with decimal 100
 892D [05] 42        2927       mul                      ; Multiply, (X:A)<-(X)*(A)(TrimDif*100)
 892E [02] 89        2928       pshx                     ; Push value in index register Lo byte to stack
 892F [02] 8A        2929       pulh                     ; Pull value from stack to index register Hi byte
                     2930                                ;(X to H)
 8930 [02] AE80      2931       ldx     #$80             ; Load index register Lo byte with decimal 128
                     2932                                ;(mid point)
 8932 [07] 52        2933       div                      ; Divide, (A)<-(H:A)/(X);(H)<-Rem (result/100)
 8933 [05] CD8C74    2934       jsr     DIVROUND         ; Jump to subroutine at DIVROUND:
 8936 [03] B75A      2935       sta     TrimP            ; Copy result to "TrimP"
 8938 [01] 97        2936       tax                      ; Transfer value in accumulator to index register
                     2937                                ; Lo byte ("TrimP" to X)
 8939 [04] C6013F    2938       lda     TrimFac          ; Load accumulator with value in "TrimFac"
 893C [05] 42        2939       mul                      ; Multiply, (X:A)<-(X)*(A)(TrimP*TrimFac)
 893D [02] 89        2940       pshx                     ; Push value in index register Lo byte to stack
 893E [02] 8A        2941       pulh                     ; Pull value from stack to index register Hi byte
                     2942                                ;(X to H)
 893F [02] AE64      2943       ldx     #$64             ; Load index register Lo byte with decimal 100
 8941 [07] 52        2944       div                      ; Divide, (A)<-(H:A)/(X);(H)<-Rem (result/100)
 8942 [05] CD8C74    2945       jsr     DIVROUND         ; Jump to subroutine at DIVROUND:
 8945 [03] B75B      2946       sta     TrimAdd          ; Copy result to "TrimAdd"
 8947 [03] B64D      2947       lda     Trim             ; Load accumulator with value in EPC Trim
                     2948                                ; ADC reading
 8949 [02] A180      2949       cmp     #$80             ; Compare with decimal 128(mid point)
 894B [03] 2509      2950       blo     DECR_DF1         ; IF (A)<(M) branch to DECR_DF1:
                     2951  
                     2952  INCR_DF1:
 894D [03] B65D      2953       lda     df1              ; Load accumulator with value in "df1"
 894F [03] BB5B      2954       add     TrimAdd          ; Add (A)<-(A)+(M)("df1 + "TrimAdd")
 8951 [03] B75E      2955       sta     dff              ; Copy result to "dff"
 8953 [03] CC8966    2956       jmp     TRIMCALC_DONE    ; Jump to TRIMCALC_DONE:
                     2957  
                     2958  DECR_DF1:
 8956 [03] B65D      2959       lda     df1              ; Load accumulator with value in "df1"
 8958 [03] B05B      2960       sub     TrimAdd          ; Subtract (A)<-(A)-(M)("df1 - "TrimAdd")
 895A [03] B75E      2961       sta     dff              ; Copy result to "dff"
 895C [03] CC8966    2962       jmp     TRIMCALC_DONE    ; Jump to TRIMCALC_DONE:
                     2963  
                     2964  DF1_OK:
 895F [03] 3F5A      2965       clr     TrimP            ; Clear "TrimP"
 8961 [03] 3F5B      2966       clr     TrimAdd          ; Clear "TrimAdd"
 8963 [05] 4E5D5E    2967       mov     df1,dff          ; Move value in "df1" to "dff"
                     2968  
                     2969  TRIMCALC_DONE:
                     2970  
                     2971  ;****************************************************************************
                     2972  ; -------------- Calculate the EPC Pulse Width(EPCpwH:EPCpwL) ---------------
                     2973  ;
                     2974  ;   The EPC solenoid analog control voltage operates with a PWM at 10kHZ
                     2975  ;   The period is 0.0001 seconds. The timer counts in ~0.125uS intervals,
                     2976  ;   so the period is 800 counts (100% duty). (800*0.125=0.000100 seconds.
                     2977  ;
                     2978  ;   dff     = Final EPC Duty Factor
                     2979  ;   EPCpwH  = EPC pulse width Hi byte


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 28
MC68HC908GP32 User Bootloader


                     2980  ;   EPCpwL  = EPC pulse width Lo byte
                     2981  ;
                     2982  ;   EPCpwH:EPCpwL<-(800*(dff))/256
                     2983  ;
                     2984  ;****************************************************************************
                     2985  
                     2986  ;****************************************************************************
                     2987  ; - Multiply 800 by value in "dff"
                     2988  ;****************************************************************************
                     2989  
 8966 [03] 3F81      2990       clr     tmp2          ; Clear "tmp2"
 8968 [03] 3F84      2991       clr     tmp5          ; Clear "tmp5"
 896A [03] 3F85      2992       clr     tmp6          ; Clear "tmp6"
 896C [03] 3F86      2993       clr     tmp7          ; Clear "tmp7"
 896E [05] 4E5E80    2994       mov     dff,tmp1      ; Move value in "dff" to "tmp1"
 8971 [04] 6E2082    2995       mov     #$20,tmp3     ; Move decimal 32 to "tmp3"
 8974 [04] 6E0383    2996       mov     #$03,tmp4     ; Move decimal 3 to "tmp4"
                     2997                             ;(3*256=768+32=800)
 8977 [05] CD8C87    2998       jsr     UMUL32        ; Jump to subroutine at UMUL32:
                     2999  
                     3000  ;****************************************************************************
                     3001  ; - Divide result by 256
                     3002  ;   This is done by ignoring the least significant byte of the result of
                     3003  ;   multiplication above, which has the effect of dividing by 256,
                     3004  ;   rounded down.
                     3005  ;****************************************************************************
                     3006  
 897A [05] 4E8560    3007       mov     tmp6,EPCpwL     ; Move value in "tmp6" to "EPCpwL"
 897D [05] 4E865F    3008       mov     tmp7,EPCpwH     ; Move value in "tmp7" to "EPCpwH"
                     3009  
                     3010  
                     3011  LOOP_END:
 8980 [03] CC83E0    3012       jmp     LOOPER    ; Jump to LOOPER: (End of Main Loop!!!)
                     3013  
                     3014  
                     3015  ;****************************************************************************
                     3016  ;
                     3017  ; * * * * * * * * * * * * * * Interrupt Section * * * * * * * * * * * * * *
                     3018  ;
                     3019  ; NOTE!!! If the interrupt service routine modifies the H register, or uses
                     3020  ; the indexed addressing mode, save the H register (pshh) and then restore
                     3021  ; it (pulh) prior to exiting the routine
                     3022  ;
                     3023  ;****************************************************************************
                     3024  
                     3025  ;****************************************************************************
                     3026  ;
                     3027  ; -------- Following interrupt service routines in priority order ----------
                     3028  ;
                     3029  ; IRQ_ISR:     - Tach input (tach input Hi, IRQ Lo, hardware inverted)
                     3030  ;
                     3031  ; TIM1OV_ISR   - TIM1 at modulo value ($0320 * 0.125uS) =
                     3032  ;               (100us period, 10KHZ, pulse width "on" for EPC PWM)
                     3033  ;
                     3034  ; TIM2CH0_ISR: - TIM2 CH0 output compare ($0064 * 1uS) (100us Timer Tick)
                     3035  ;
                     3036  ; SCIRCV_ISR:  - SCI receive
                     3037  ;
                     3038  ; SCITX_ISR:   - SCI transmit
                     3039  ;
                     3040  ; KYBD_ISR:    - Keyboard interrupt for Vehicle Speed input (8000 ppMi)
                     3041  ;                (Veh Spd input Hi, PTA0 Lo, hardware inverted)
                     3042  ;
                     3043  ; ADC_ISR:     - ADC Conversion Complete
                     3044  ;
                     3045  ;
                     3046  ;****************************************************************************
                     3047  
                     3048  ;****************************************************************************
                     3049  ;============================================================================
                     3050  ; - IRQ - Input trigger (tach) for RPM calculations
                     3051  ;============================================================================
                     3052  ;****************************************************************************
                     3053  
                     3054  IRQ_ISR:
                     3055  
                     3056  ;****************************************************************************
                     3057  ; - Capture the RPM period in 100uS resolution from the RPM counter values
                     3058  ;****************************************************************************
                     3059  
 8983 [03] B66F      3060       lda     RPMcH          ; Load accumulator with value in RPM counter
                     3061                              ; Hi byte
 8985 [03] B771      3062       sta     RPMpH          ; Copy to RPM Period Hi byte
 8987 [03] B670      3063       lda     RPMcL          ; Load accumulator with value in RPM counter
                     3064                              ; Lo byte
 8989 [03] B772      3065       sta     RPMpL          ; Copy to RPM Period Low byte
 898B [03] 3F6F      3066       clr     RPMcH          ; Clear RPM counter Hi byte
 898D [03] 3F70      3067       clr     RPMcL          ; Clear RPM counter Lo byte
                     3068  
                     3069  IRQ_DONE:
 898F [04] 1063      3070       bset    tachrise,inputs  ; Set "tachrise" bit of "inputs" variable
 8991 [07] 80        3071       rti                      ; Return from interrupt
                     3072  
                     3073  
                     3074  
                     3075  ;****************************************************************************
                     3076  ;============================================================================
                     3077  ; - TIM1 Modulo Interrupt(0.125uS resolution, 100uS period, 10KHZ)
                     3078  ;   (Pulse Width "on" for EPC PWM)
                     3079  ;============================================================================
                     3080  ;****************************************************************************
                     3081  
                     3082  TIM1OV_ISR:
                     3083  
                     3084  ;****************************************************************************
                     3085  ; - Clear TIM1 modulo interrupt and set EPC pulse width "on"
                     3086  ;****************************************************************************
                     3087  
 8992 [03] B620      3088       lda     T1SC         ; Load accumulator with value in TIM1 Status
                     3089                            ; and Control Register (Arm TOF flag clear)
 8994 [04] 1F20      3090       bclr    TOF,T1SC     ; Clear TOF bit of TIM1 Status and
                     3091                            ; Control Register
 8996 [03] 3F25      3092       clr     T1SC0        ; Clear TIM1 CH0 Status and Control Register
                     3093                            ; (PTD4 port control, logic Hi)
                     3094  
                     3095  
                     3096  ;****************************************************************************
                     3097  ; - Load and arm TIM1 CH1 with output compare value for EPC pulse width "off"
                     3098  ;****************************************************************************
                     3099  
 8998 [05] 4E5F26    3100       mov     EPCpwH,T1CH0H  ; Move value in Final EPC pulse width Hi byte to
                     3101                              ; Tim1 Ch0 O/C register Hi byte
 899B [05] 4E6027    3102       mov     EPCpwL,T1CH0L  ; Move value in Final EPC pulse width Lo byte to
                     3103                              ; Tim1 Ch0 O/C register Lo byte
 899E [04] 6E1825    3104       mov     #$18,T1SC0     ; Move %00011000 into TIM1 CH0 Status and
                     3105                              ; Control Register,(PTD4,clear output on compare)
 89A1 [07] 80        3106       rti                    ; Return from interrupt
                     3107  
                     3108  
                     3109  ;****************************************************************************
                     3110  ;============================================================================
                     3111  ; - TIM2 CH0 Interrupt (100 uS clock tick)
                     3112  ; - Generate time rates:
                     3113  ;   100 Microseconds,(for RPM, MPH, IAC PWM counters)
                     3114  ;   Milliseconds,(for ADC conversions and contact de-bounce counters)
                     3115  ;   5 Milliseconds,(for 200hz clock tick for IAC control PWM frequency


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 29
MC68HC908GP32 User Bootloader


                     3116  ;   20 Milliseconds,(for EPC time delay functions)
                     3117  ;   100 Milliseconds,(for TPS DOT calcs, and EPC timer counters)
                     3118  ;   Seconds,(because we can)
                     3119  ;============================================================================
                     3120  ;****************************************************************************
                     3121  
                     3122  TIM2CH0_ISR:
 89A2 [02] 8B        3123       pshh                  ; Push value in index register Hi byte to stack
 89A3 [03] B630      3124       lda     T2SC0         ; Load accumulator with value in TIM2 CH0 Status
                     3125                             ; and Control Register (Arm CHxF flag clear)
 89A5 [04] 1F30      3126       bclr    CHxF,T2SC0    ; Clear CHxF bit of TIM2 CH0 Status and
                     3127                             ; Control Register
 89A7 [04] 5531      3128       ldhx    T2CH0H        ; Load index register with value in TIM2 CH0
                     3129                             ; register H:L (output compare value)
 89A9 [02] AF64      3130       aix     #$64          ; Add decimal 100 (100 uS)
 89AB [04] 3531      3131       sthx    T2CH0H        ; Copy result to TIM2 CH0 register
                     3132                             ;(new output compare value)
                     3133  
                     3134  
                     3135  ;============================================================================
                     3136  ;********************** 100 Microsecond section *****************************
                     3137  ;============================================================================
                     3138  
                     3139  
                     3140  ;****************************************************************************
                     3141  ; - Increment the RPM counter
                     3142  ;****************************************************************************
                     3143  
                     3144  INC_RPM_CNTR:
 89AD [04] 3C70      3145       inc      RPMcL           ; Increment counter for RPM Lo byte
 89AF [03] 2614      3146       bne      INC_MPH_CNTR    ; If the Z bit of the CCR is clear,
                     3147                                ; branch to INC_MPH_CNTR:
 89B1 [04] 3C6F      3148       inc      RPMcH           ; Increment counter for RPM Hi byte
                     3149  
                     3150  ;****************************************************************************
                     3151  ; - Check to see if the engine has stopped, or has not started yet. If the
                     3152  ;   engine is not running, set the "Estop" bit of "trans3" variable and
                     3153  ;   clear the "EPCpwH:EPCpwL". Clear the RPM counters and "RPM" variable.
                     3154  ;   If it is running, clear the "Estop" bit.
                     3155  ;****************************************************************************
                     3156  
                     3157  E_STOP_CHK:
 89B3 [03] B66F      3158       lda     RPMcH            ; Load accumulator with value in RPM counter
                     3159                                ; Hi byte
 89B5 [02] A164      3160       cmp     #$64             ; Compare with decimal 100(100*256=25600
                     3161                                ;(RPM period of ~2.56 sec = ~5.6RPM 8cyl)
 89B7 [03] 260A      3162       bne     E_RUN            ; If Z bit of CCR is clear, branch to E_RUN:
 89B9 [04] 1044      3163       bset    Estop,trans      ; Set "Estop" bit of "trans" variable
 89BB [03] 3F6F      3164       clr     RPMcH            ; Clear RPM counter Hi Byte
 89BD [03] 3F70      3165       clr     RPMcL            ; Clear RPM counter Lo Byte
 89BF [03] 3F42      3166       clr     RPM              ; Clear RPM/20 variable
 89C1 [03] 2002      3167       bra     INC_MPH_CNTR     ; Branch to INC_MPH_CNTR:
                     3168  
                     3169  E_RUN:
 89C3 [04] 1144      3170       bclr    Estop,trans      ; Clear "Estop" bit of "trans" variable
                     3171  
                     3172  
                     3173  ;****************************************************************************
                     3174  ; - Increment the MPH counter
                     3175  ;****************************************************************************
                     3176  
                     3177  INC_MPH_CNTR:
 89C5 [04] 3C74      3178       inc     MPHcL            ; Increment counter for MPH Lo byte
 89C7 [03] 2614      3179       bne     DEC_IAC_CNTR     ; If the Z bit of the CCR is clear,
                     3180                                ; branch to DEC_IAC_CNTR:
 89C9 [04] 3C73      3181       inc     MPHcH            ; Increment counter for MPH Hi byte
                     3182  
                     3183  ;****************************************************************************
                     3184  ; - Check to see if the vehicle has stopped, or has not moved yet. If the
                     3185  ;   vehicle is not moving, set the "Vstop" bit of "trans3" variable and clear
                     3186  ;   the MPH counters and "MPH" variable.
                     3187  ;   If it is moving, clear the "Vstop" bit.
                     3188  ;****************************************************************************
                     3189  
                     3190  V_STOP_CHK:
 89CB [03] B673      3191       lda     MPHcH            ; Load accumulator with value in MPH counter
                     3192                                ; Hi byte
 89CD [02] A123      3193       cmp     #$23             ; Compare with decimal 35(35*256=8960)
                     3194                                ;(MPH period of .896 sec = < .5MPH)
 89CF [03] 260A      3195       bne     V_RUN            ; If Z bit of CCR is clear, branch to V_RUN:
 89D1 [04] 1244      3196       bset    Vstop,trans      ; Set "Vstop" bit of "trans" variable
 89D3 [03] 3F73      3197       clr     MPHcH            ; Clear MPH counter Hi Byte
 89D5 [03] 3F74      3198       clr     MPHcL            ; Clear MPH counter Lo Byte
 89D7 [03] 3F43      3199       clr     MPH              ; Clear MPH*2 variable
 89D9 [03] 2002      3200       bra     DEC_IAC_CNTR     ; Branch to DEC_IAC_CNTR:
                     3201  
                     3202  V_RUN:
 89DB [04] 1344      3203       bclr    Vstop,trans      ; Clear "Vstop" bit of "trans" variable
                     3204  
                     3205  
                     3206  ;****************************************************************************
                     3207  ; - Decrement the IAC PWM counter
                     3208  ;****************************************************************************
                     3209  
                     3210  DEC_IAC_CNTR:
 89DD [03] B6A0      3211       lda     IACcnt         ; Load accumulator with value in IAC counter
 89DF [03] 2702      3212       beq     DEC_IAC_DONE   ; If Z bit of CCR is set, branch to DEC_IAC_DONE:
 89E1 [04] 3AA0      3213       dec     IACcnt         ; Decrement IAC PWM "off" counter
                     3214  
                     3215  DEC_IAC_DONE:
                     3216  
                     3217  
                     3218  ;****************************************************************************
                     3219  ; - Increment 100 Microsecond counter
                     3220  ;****************************************************************************
                     3221  
                     3222  INC_cuS:
 89E3 [04] 3C65      3223       inc     uSx100       ; Increment 100 Microsecond counter
 89E5 [03] B665      3224       lda     uSx100       ; Load accumulator with 100 Microsecond counter
 89E7 [02] A10A      3225       cmp     #$0A         ; Compare it with decimal 10
 89E9 [03] 2602      3226       bne     NOT_MS       ; If not equal, branch to NOT_MS:
 89EB [03] 2003      3227       bra     FIRE_ADC     ; Branch to FIRE_ADC:
                     3228  
 89ED [03] CC8A4F    3229  NOT_MS:     jmp     TIM2CH0_ISR_DONE
                     3230  
                     3231  ;============================================================================
                     3232  ;************************* millisecond section ******************************
                     3233  ;============================================================================
                     3234  
                     3235  
                     3236  ;****************************************************************************
                     3237  ; - Fire off another ADC conversion, channel is pointed to by "adsel"
                     3238  ;****************************************************************************
                     3239  
                     3240  FIRE_ADC:
 89F0 [03] B66A      3241       lda     adsel          ; Load accumulator with ADC Selector Variable
 89F2 [02] AA40      3242       ora     #%01000000     ; Inclusive "or" with %01000000 and ADC Selector
                     3243                              ; Variable ( result in accumulator )
                     3244                              ;(Enables interupt with channel selected)
 89F4 [03] B73C      3245       sta     ADSCR          ; Copy result to ADC Status and Control Register
                     3246  
                     3247  ;****************************************************************************
                     3248  ; - Check the value of the contact de-bounce counter variables, if other
                     3249  ;   than zero, decrement them.
                     3250  ;****************************************************************************
                     3251  


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 30
MC68HC908GP32 User Bootloader


 89F6 [03] B6A3      3252       lda     ShftUpDB           ; Load accumulator with value in "ShftUpDB"
                     3253                                  ; variable
 89F8 [03] 2702      3254       beq     ShftUpDB_CHK_DONE  ; If "Z" bit of "CCR is set, branch to
                     3255                                  ; ShftUpDB_CHK_DONE:
 89FA [04] 3AA3      3256       dec     ShftUpDB           ; Decrement "ShftUpDB" variable
                     3257  
                     3258  ShftUpDB_CHK_DONE:
                     3259  
 89FC [03] B6A4      3260       lda     ShftDnDB           ; Load accumulator with value in "ShftDnDB"
                     3261                                  ; variable
 89FE [03] 2702      3262       beq     ShftDnDB_CHK_DONE  ; If "Z" bit of "CCR is set, branch to
                     3263                                  ; ShftDnDB_CHK_DONE:
 8A00 [04] 3AA4      3264       dec     ShftDnDB           ; Decrement "ShftDnDB" variable
                     3265  
                     3266  ShftDnDB_CHK_DONE:
                     3267  
                     3268  
                     3269  ;****************************************************************************
                     3270  ; - Increment millisecond counter
                     3271  ;****************************************************************************
                     3272  
                     3273  INC_mS:
 8A02 [03] 3F65      3274       clr     uSx100              ; Clear 100 Microsecond counter
 8A04 [04] 3C66      3275       inc     mS                  ; Increment Millisecond counter
 8A06 [03] B666      3276       lda     mS                  ; Load accumulator with value in
                     3277                                   ; Millisecond counter
 8A08 [02] A105      3278       cmp     #$05                ; Compare it with decimal 5
 8A0A [03] 2703      3279       beq     DO_IAC              ; If Z bit of CCR is set, branch to DO_IAC:
                     3280                                   ;(mS=5)
 8A0C [03] CC8A4F    3281       jmp     TIM2CH0_ISR_DONE    ; Jump to TIM2CH0_ISR_DONE:
                     3282  
                     3283  
                     3284  ;============================================================================
                     3285  ;************************** 5 Millisecond section ***************************
                     3286  ;============================================================================
                     3287  
                     3288  ;****************************************************************************
                     3289  ; - Set AIC solonoid PWM "on" PTD5
                     3290  ;****************************************************************************
                     3291  
                     3292  DO_IAC:
 8A0F [03] B654      3293       lda     IACpw         ; Load accumulator with value in IAC pulse width
 8A11 [03] 2708      3294       beq     NO_IAC        ; If Z bit of CCR is set, branch to NO_IAC:
                     3295                             ;(No IAC commanded so no PWM)
 8A13 [03] B7A0      3296       sta     IACcnt        ; Copy to IAC PWM "off" counter
 8A15 [04] 1B03      3297       bclr    iacpwm,portd  ; Clear "iacpwm" bit of Port D (IAC PW "on")
 8A17 [04] 1863      3298       bset    iacon,inputs  ; Set "iacon" bit of "inputs" variable
 8A19 [03] 2004      3299       bra     IAC_DONE      ; Branch to IAC_DONE:
                     3300  
                     3301  NO_IAC:
 8A1B [04] 1A03      3302       bset    iacpwm,portd  ; Set "iacpwm" bit of Port D (IAC PW "off")
 8A1D [04] 1963      3303       bclr    iacon,inputs  ; Clear "iacon" bit of "inputs" variable
                     3304  
                     3305  IAC_DONE:
                     3306  
                     3307  ;****************************************************************************
                     3308  ; - Increment 5 millisecond counter
                     3309  ;****************************************************************************
                     3310  
                     3311  INC_mSx5:
 8A1F [03] 3F66      3312       clr     mS                  ; Clear "mS"
 8A21 [04] 3C67      3313       inc     mSx5                ; Increment 5 Millisecond counter
 8A23 [03] B667      3314       lda     mSx5                ; Load accumulator with value in
                     3315                                   ; 5 Millesecond counter
 8A25 [02] A104      3316       cmp     #$04                ; Compare it with decimal 4
 8A27 [03] 2626      3317       bne     TIM2CH0_ISR_DONE    ; If the Z bit of CCR is clear,
                     3318                                   ; branch to TIM2CH0_ISR_DONE:
                     3319  
                     3320  ;============================================================================
                     3321  ;************************* 20 Millisecond section ***************************
                     3322  ;============================================================================
                     3323  
                     3324  ;****************************************************************************
                     3325  ; - Decrement the 20mS timer counter
                     3326  ;****************************************************************************
                     3327  
                     3328  DEC_TIM_CNTR:
 8A29 [03] B6A1      3329       lda     TIMcnt         ; Load accumulator with value in TIM counter
 8A2B [03] 2702      3330       beq     DEC_TIM_DONE   ; If Z bit of CCR is set, branch to DEC_TIM_DONE:
 8A2D [04] 3AA1      3331       dec     TIMcnt         ; Decrement 20mS timer counter
                     3332  
                     3333  DEC_TIM_DONE:
                     3334  
                     3335  ;****************************************************************************
                     3336  ; - Increment 20 Millisecond counter
                     3337  ;****************************************************************************
                     3338  
                     3339  INC_mSx20:
 8A2F [03] 3F67      3340       clr     mSx5                ; Clear 5 Millisecond counter
 8A31 [04] 3C68      3341       inc     mSx20               ; Increment 20 Millisecond counter
 8A33 [03] B668      3342       lda     mSx20               ; Load accumulator with value in
                     3343                                   ; 20 Millesecond counter
 8A35 [02] A105      3344       cmp     #$05                ; Compare it with decimal 5
 8A37 [03] 2616      3345       bne     TIM2CH0_ISR_DONE    ; If the Z bit of CCR is clear,
                     3346                                   ; branch to TIM2CH0_ISR_DONE:
                     3347  
                     3348  
                     3349  ;============================================================================
                     3350  ;************************* 100 Millisecond section **************************
                     3351  ;============================================================================
                     3352  
 8A39 [04] 1263      3353       bset    clk100k,inputs     ; Set "clk100k" bit of "inputs" variable
                     3354  
                     3355   ;****************************************************************************
                     3356  ; - Increment 100 Millisecond counter
                     3357  ;****************************************************************************
                     3358  
                     3359  INC_cmS:
 8A3B [03] 3F68      3360       clr     mSx20               ; Clear 20 Millisecond counter
 8A3D [04] 3C69      3361       inc     mSx100              ; Increment 100 Millisecond counter
 8A3F [03] B669      3362       lda     mSx100              ; Load accumulator with value in
                     3363                                   ; 100 Millisecond counter
 8A41 [02] A10A      3364       cmp     #$0A                ; Compare with decimal 10
 8A43 [03] 2702      3365       beq     INC_S               ; If Z bit of CCR is set, branch to INC_S:
 8A45 [03] 2008      3366       bra     TIM2CH0_ISR_DONE    ; Branch to TIM2CH0_ISR_DONE:
                     3367  
                     3368  ;============================================================================
                     3369  ;**************************** Seconds section *******************************
                     3370  ;============================================================================
                     3371  
                     3372  ;****************************************************************************
                     3373  ; - Increment Seconds counter
                     3374  ;****************************************************************************
                     3375  
                     3376  INC_S:
 8A47 [03] 3F69      3377       clr     mSx100              ; Clear 0.1 Second variable
 8A49 [04] 3C41      3378       inc     secl                ; Increment "Seconds" Lo byte variable
 8A4B [03] 2602      3379       bne     TIM2CH0_ISR_DONE    ; If the Z bit of CCR is clear, branch
                     3380                                   ; to TIM2CH0_ISR_DONE:
 8A4D [04] 3C40      3381       inc     sech                ; Increment "Seconds" Hi byte variable
                     3382  
                     3383  TIM2CH0_ISR_DONE:
 8A4F [02] 8A        3384       pulh                  ; Pull value from stack to index register Hi byte
 8A50 [07] 80        3385       rti                   ; Return from interrupt
                     3386  
                     3387  ;****************************************************************************


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 31
MC68HC908GP32 User Bootloader


                     3388  ;
                     3389  ; -------------------- Serial Communications Interface ----------------------
                     3390  ;
                     3391  ; Communications is established when the PC communications program sends
                     3392  ; a command character - the particular character sets the mode:
                     3393  ;
                     3394  ; "A" = send all of the realtime variables via txport.
                     3395  ; "V" = send the Constants group 1 via txport (128 bytes)
                     3396  ;       (TO_table, RPM_range, KPA_range, TPS_range, EPC_stall, EPC_12,
                     3397  ;        EPC_23, EPC_34, tables, + 8 spares)
                     3398  ; "W"+<offset>+<newbyte> = receive new table byte value and store in
                     3399  ;       offset location
                     3400  ; "B" = jump to flash burner routine and all table/constant values in
                     3401  ;       RAM into flash
                     3402  ; "C" = Test communications - echo back SECL
                     3403  ; "Q" = Send over Embedded Code Revision Number (divide number by 10
                     3404  ;  - i.e. $21T is rev 2.1)
                     3405  ; "I" = send the Constants group 2 via txport (64 bytes)
                     3406  ; "J"+<offset>+<newbyte> =receive new table byte value and store in
                     3407  ;       offset location
                     3408  ;
                     3409  ; txmode:
                     3410  ;              01 = Getting realtime data
                     3411  ;              02 = ?
                     3412  ;              03 = Sending G1
                     3413  ;              04 = ?
                     3414  ;              05 = Getting offset G1
                     3415  ;              06 = Getting data G1
                     3416  ;              07 = Getting offset G2
                     3417  ;              08 = Getting data G2
                     3418  ;              09 = Sending G2
                     3419  ;
                     3420  ;***************************************************************************
                     3421  
                     3422  SCIRCV_ISR:
 8A51 [02] 8B        3423       pshh                 ; Push value in index register Hi byte to Stack
 8A52 [03] B616      3424       lda     SCS1         ; Load accumulator with value in "SCS1"
                     3425                            ;(Clear the SCRF bit by reading this register)
 8A54 [03] B698      3426       lda     txmode       ; Load accumulator with value in "txmode" variable
                     3427                            ;(Check if we are in the middle of a receive
                     3428                            ; new VE/constant)
 8A56 [02] A105      3429       cmp     #$05         ; Compare with decimal 5
 8A58 [03] 270E      3430       beq     TXMODE_5     ; If the Z bit of CCR is set, branch to TXMODE_5:
 8A5A [02] A106      3431       cmp     #$06         ; Compare with decimal 6
 8A5C [03] 2712      3432       beq     TXMODE_6     ; If the Z bit of CCR is set, branch to TXMODE_6:
 8A5E [02] A107      3433       cmp     #$07         ; Compare with decimal 7
 8A60 [03] 2706      3434       beq     TXMODE_7     ; If the Z bit of CCR is set, branch to TXMODE_7:
 8A62 [02] A108      3435       cmp     #$08         ; Compare with decimal 8
 8A64 [03] 2717      3436       beq     TXMODE_8     ; If the Z bit of CCR is set, branch to TXMODE_8:
 8A66 [03] 2023      3437       bra     CHECK_TXCMD  ; Branch to CHECK_TXCMD:
                     3438  
                     3439  TXMODE_5:                 ; (Getting offset for either W or J command)
                     3440  
                     3441  TXMODE_7:
 8A68 [05] 4E1899    3442       mov     SCDR,rxoffset   ; Move value in "SCDR" to "rxoffset"
 8A6B [04] 3C98      3443       inc     txmode          ; (continue to next mode)
 8A6D [03] CC8B10    3444       jmp     DONE_RCV        ; Jump to DONE_RCV:
                     3445  
                     3446  TXMODE_6:
 8A70 [01] 8C        3447       clrh                 ; Clear index register Hi byte
 8A71 [03] B699      3448       lda     rxoffset     ; Load accumulator with value in "rxoffset"
 8A73 [01] 97        3449       tax                  ; Transfer value in accumulator to index register
                     3450                            ; Lo byte
 8A74 [03] B618      3451       lda     SCDR         ; Load accumulator with value in "SCDR"
 8A76 [03] E7B0      3452       sta     TO_table,x   ; Copy to TO_table, offset in index register Lo byte
                     3453                            ;(Write data to TO_table + offset)
 8A78 [03] 3F98      3454       clr     txmode       ; Clear "txmode" variable
 8A7A [03] CC8B10    3455       jmp     DONE_RCV     ; Jump to DONE_RCV:
                     3456  
                     3457  TXMODE_8:
 8A7D [01] 8C        3458       clrh                 ; Clear index register Hi byte
 8A7E [03] B699      3459       lda     rxoffset     ; Load accumulator with value in "rxoffset"
                     3460                            ; (Get offset for data to be written)
 8A80 [01] 97        3461       tax                  ; Transfer value in accumulator to index register
                     3462                            ; Lo byte
 8A81 [03] B618      3463       lda     SCDR         ; Load accumulator with value in "SCDR"
 8A83 [04] D70130    3464       sta     EPC_TCC,x    ; Copy to EPC_TCC, offset in index register Lo byte
                     3465                            ;(Write data to EPC_TCC + offset)
 8A86 [03] 3F98      3466       clr     txmode       ; Clear "txmode" variable
 8A88 [03] CC8B10    3467       jmp     DONE_RCV     ; Jump to DONE_RCV:
                     3468  
                     3469  CHECK_TXCMD:
 8A8B [03] B618      3470       lda     SCDR       ; Load accumulator with value in "SCDR"
                     3471                          ;(Get the command byte)
 8A8D [02] A141      3472       cmp     #$41       ; Compare it with decimal 65 = ASCII "A"
                     3473                          ;(Is the recieve character a big "A" ->
                     3474                          ; Download real-time variables?)
 8A8F [03] 271E      3475       beq     MODE_A     ; If the Z bit of CCR is set, branch to Mode_A:
 8A91 [02] A142      3476       cmp     #$42       ; Compare it with decimal 66 = ASCII "B"
 8A93 [03] 272A      3477       beq     MODE_B     ; If the Z bit of CCR is set, branch to Mode_B:
 8A95 [02] A143      3478       cmp     #$43       ; Compare it with decimal 67 = ASCII "C"
 8A97 [03] 272D      3479       beq     MODE_C     ; If the Z bit of CCR is set, branch to Mode_C:
 8A99 [02] A156      3480       cmp     #$56       ; Compare it with decimal 86 = ASCII "V"
 8A9B [03] 2739      3481       beq     MODE_V     ; If the Z bit of CCR is set, branch to Mode_V:
 8A9D [02] A157      3482       cmp     #$57       ; Compare it with decimal 87 = ASCII "W"
 8A9F [03] 2745      3483       beq     MODE_W     ; If the Z bit of CCR is set, branch to Mode_W:
 8AA1 [02] A151      3484       cmp     #$51       ; Compare it with decimal 81 = ASCII "Q"
 8AA3 [03] 2747      3485       beq     MODE_Q     ; If the Z bit of CCR is set, branch to Mode_Q:
 8AA5 [02] A149      3486       cmp     #'I'       ; Compare it with 'I' = ASCII decimal 73 $49
 8AA7 [03] 2753      3487       beq     MODE_I     ; If the Z bit of CCR is set, branch to Mode_I:
 8AA9 [02] A14A      3488       cmp     #'J'       ; Compare it with 'J' = ASCII decimal74 $4A
 8AAB [03] 275F      3489       beq     MODE_J     ; If the Z bit of CCR is set, branch to Mode_J:
 8AAD [03] 2061      3490       bra     DONE_RCV   ; Branch to DONE_RCV:
                     3491  
                     3492  MODE_A
 8AAF [03] 3F96      3493       clr     txcnt          ; Clear "txcnt"
 8AB1 [02] A601      3494       lda     #$01           ; Load accumulator with decimal 1
 8AB3 [03] B798      3495       sta     txmode         ; Copy to "txmode" variable
 8AB5 [02] A622      3496       lda     #$22           ; Load accumulator with decimal 34
                     3497                              ;(Set this for 1 more than the number of bytes
                     3498                              ; to send)
                     3499                              ;(33 Real time variables for MV_TECA)
                     3500  ;!     lda     #$70           ; Load accumulator with decimal 112
                     3501                              ;(Set this for 1 more than the number of bytes
                     3502                              ; to send)
                     3503                              ; Show all variables(for Megachat)
 8AB7 [03] B797      3504       sta     txgoal         ; Copy to "txgoal" variable
 8AB9 [04] 1614      3505       bset    TE,SCC2        ; Set "TE" bit of SCC2 (Enable Transmit)
 8ABB [04] 1E14      3506       bset    SCTIE,SCC2     ; Set "SCTIE" bit of SCC2
                     3507                              ;(Enable transmit interrupt)
 8ABD [03] 2051      3508       bra     DONE_RCV       ; Branch to DONE_RCV:
                     3509  
                     3510  MODE_B:
 8ABF [05] CD8FA1    3511       jsr     burnConst     ; Jump to "burnConst" subroutine
 8AC2 [03] 3F98      3512       clr     txmode        ; Clear "txmode" variable
 8AC4 [03] 204A      3513       bra     DONE_RCV      ; Branch to DONE_RCV:
                     3514  
                     3515  MODE_C:
 8AC6 [03] 3F96      3516       clr     txcnt          ; Clear "txcnt"
                     3517                              ; (Just send back SECL variable to test comm port)
 8AC8 [02] A601      3518       lda     #$01           ; Load accumulator with decimal 1
 8ACA [03] B798      3519       sta     txmode         ; Copy to "txmode" variable
 8ACC [02] A602      3520       lda     #$2            ; Load accumulator with decimal 2
 8ACE [03] B797      3521       sta     txgoal         ; Copy to "txgoal" variable
 8AD0 [04] 1614      3522       bset    TE,SCC2        ; Set "TE" bit of SCC2 (Enable Transmit)
 8AD2 [04] 1E14      3523       bset    SCTIE,SCC2     ; Set "SCTIE" bit of SCC2


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 32
MC68HC908GP32 User Bootloader


                     3524                              ;(Enable transmit interrupt)
 8AD4 [03] 203A      3525       bra     DONE_RCV       ; Branch to DONE_RCV:
                     3526  
                     3527  MODE_V:
 8AD6 [03] 3F96      3528       clr     txcnt          ; Clear "txcnt"
 8AD8 [02] A603      3529       lda     #$03           ; Load accumulator with decimal 3
 8ADA [03] B798      3530       sta     txmode         ; Copy to "txmode" variable
 8ADC [02] A681      3531       lda     #$81           ; Load accumulator with decimal 129
                     3532                              ;(Set this for 1 more than the number of bytes
                     3533                              ; to send)
                     3534                              ;(Send 128 bytes, TO table, ranges, EPC stall
                     3535                              ; and shift tables + spares)
 8ADE [03] B797      3536       sta     txgoal         ; Copy to "txgoal" variable
 8AE0 [04] 1614      3537       bset    TE,SCC2        ; Set "TE" bit of SCC2 (Enable Transmit)
 8AE2 [04] 1E14      3538       bset    SCTIE,SCC2     ; Set "SCTIE" bit of SCC2
                     3539                              ;(Enable transmit interrupt)
 8AE4 [03] 202A      3540       bra     DONE_RCV       ; Branch to DONE_RCV:
                     3541  
                     3542  MODE_W:
 8AE6 [02] A605      3543       lda     #$05         ; Load accumulator with decimal 5
 8AE8 [03] B798      3544       sta     txmode       ; Copy to "txmode" variable
 8AEA [03] 2024      3545       bra     DONE_RCV     ; Branch to DONE_RCV:
                     3546  
                     3547  MODE_Q:
 8AEC [03] 3F96      3548       clr     txcnt          ; Clear "txcnt"
                     3549                              ; (Just send back SECL variable to test comm port)
 8AEE [02] A605      3550       lda     #$05           ; Load accumulator with decimal 5
 8AF0 [03] B798      3551       sta     txmode         ; Copy to "txmode" variable
 8AF2 [02] A602      3552       lda     #$2            ; Load accumulator with decimal 2
 8AF4 [03] B797      3553       sta     txgoal         ; Copy to "txgoal" variable
 8AF6 [04] 1614      3554       bset    TE,SCC2        ; Set "TE" bit of SCC2 (Enable Transmit)
 8AF8 [04] 1E14      3555       bset    SCTIE,SCC2     ; Set "SCTIE" bit of SCC2
                     3556                              ;(Enable transmit interrupt)
 8AFA [03] 2014      3557       bra     DONE_RCV       ; Branch to DONE_RCV:
                     3558  
                     3559  MODE_I:
 8AFC [03] 3F96      3560       clr     txcnt          ; Clear "txcnt"
 8AFE [02] A609      3561       lda     #$09           ; Load accumulator with decimal 9
                     3562                              ; (txmode = sending Cons Group 2)
 8B00 [03] B798      3563       sta     txmode         ; Copy to "txmode" variable
 8B02 [02] A641      3564       lda     #$41           ; Load accumulator with decimal 65
                     3565                              ;(Set this for 1 more than the number of bytes
                     3566                              ; to send)
                     3567                              ;(Send 64 bytes, constants + spares)
 8B04 [03] B797      3568       sta     txgoal         ; Copy to "txgoal" variable
 8B06 [04] 1614      3569       bset    TE,SCC2        ; Set "TE" bit of SCC2 (Enable Transmit)
 8B08 [04] 1E14      3570       bset    SCTIE,SCC2     ; Set "SCTIE" bit of SCC2
                     3571                              ;(Enable transmit interrupt)
 8B0A [03] 2004      3572       bra     DONE_RCV       ; Branch to DONE_RCV:
                     3573  
                     3574  MODE_J:
 8B0C [02] A607      3575       lda     #$07         ; Load accumulator with decimal 7
                     3576                            ; (txmode = getting offset Cons group 2)
 8B0E [03] B798      3577       sta     txmode       ; Copy to "txmode" variable
                     3578  
                     3579  DONE_RCV
 8B10 [02] 8A        3580       pulh                 ; Pull value from Stack to index register Hi byte
 8B11 [07] 80        3581       rti                  ; Return from interrupt
                     3582  
                     3583  ;****************************************************************************
                     3584  ;----------------- Transmit Character Interrupt Handler --------------------
                     3585  ;****************************************************************************
                     3586  
                     3587  SCITX_ISR:
 8B12 [02] 8B        3588       pshh                  ; Push value in index register Hi byte to Stack
 8B13 [03] B616      3589       lda     SCS1          ; Load accumulator with value in "SCS1"
                     3590                             ; (Clear the SCRF bit by reading this register)
 8B15 [01] 8C        3591       clrh                  ; Clear index register Hi byte
 8B16 [03] B696      3592       lda     txcnt         ; Load accumulator with value in "txcnt" variable
 8B18 [01] 97        3593       tax                   ; Transfer value in accumulator to index register
                     3594                             ; Lo byte
 8B19 [03] B698      3595       lda     txmode        ; Load accumulator with value in "txmode" variable
 8B1B [02] A105      3596       cmp     #$05          ; Compare it with decimal 5
 8B1D [03] 2715      3597       beq     IN_Q_MODE     ; If the Z bit of CCR is set, branch to IN_Q_MODE:
 8B1F [02] A109      3598       cmp     #$09          ; Compare it with decimal 9
 8B21 [03] 270C      3599       beq     IN_I_MODE     ; If the Z bit of CCR is set, branch to IN_I_MODE:
 8B23 [02] A101      3600       cmp     #$01          ; Compare it with decimal 1
 8B25 [03] 2604      3601       bne     IN_V_MODE     ; If the Z bit of CCR is clear, branch to IN_V_MODE:
                     3602  
                     3603  IN_A_OR_C_MODE:
 8B27 [03] E640      3604       lda     secH,X      ; Load accumulator with value in address "secH",
                     3605                           ; offset in index register Lo byte
 8B29 [03] 200C      3606       bra     CONT_TX     ; Branch to CONT_TX:
                     3607  
                     3608  IN_V_MODE
 8B2B [03] E6B0      3609       lda     TO_table,x  ; Load accumulator with value in address
                     3610                           ; "TO_table", offset in index register Lo byte
 8B2D [03] 2008      3611       bra     CONT_TX     ; Branch to CONT_TX:
                     3612  
                     3613  IN_I_MODE
 8B2F [04] D60130    3614       lda     EPC_TCC,x   ; Load accumulator with value in address "EPC_TCC",
                     3615                           ; offset in index register Lo byte
 8B32 [03] 2003      3616       bra     CONT_TX     ; Branch to CONT_TX:
                     3617  
                     3618  IN_Q_MODE
 8B34 [04] D6E000    3619       lda     REVNUM,X   ; Load accumulator with value in address "REVNUM",
                     3620                          ; offset in index register Lo byte
                     3621  
                     3622  CONT_TX:
 8B37 [03] B718      3623       sta     SCDR           ; Copy to "SCDR" variable (Send char)
 8B39 [03] B696      3624       lda     txcnt          ; Load accumulator with value in "txcnt" variable
 8B3B [01] 4C        3625       inca                   ; Increment value in accumulator
                     3626                              ;(Increase number of chars sent)
 8B3C [03] B796      3627       sta     txcnt          ; Copy to "txcnt" variable
 8B3E [03] B197      3628       cmp     txgoal         ; Compare it to value in "txgoal" (Check if done)
 8B40 [03] 260A      3629       bne     DONE_XFER      ; If the Z bit of CCR is clear, branch to DONE_XFER:
                     3630                              ;(Branch if NOT done to DONE_XFER !?!?!)
 8B42 [03] 3F96      3631       clr     txcnt          ; Clear "txcnt"
 8B44 [03] 3F97      3632       clr     txgoal         ; Clear "txgoal"
 8B46 [03] 3F98      3633       clr     txmode         ; Clear "txmode"
 8B48 [04] 1714      3634       bclr    TE,SCC2        ; Clear "TE" bit of SCC2 (Disable Transmit)
 8B4A [04] 1F14      3635       bclr    SCTIE,SCC2     ; Clear "SCTIE" bit of SCC2
                     3636                              ;(Disable transmit interrupt)
                     3637  
                     3638  DONE_XFER
 8B4C [02] 8A        3639       pulh                   ; Pull value from Stack to index register Hi byte
 8B4D [07] 80        3640       rti                    ; Return from interrupt
                     3641  
                     3642  ;****************************************************************************
                     3643  ;============================================================================
                     3644  ; - Keyboard interrupt (Vehicle Speed on PTA0)
                     3645  ;============================================================================
                     3646  ;****************************************************************************
                     3647  
                     3648  KEYBD_ISR:
                     3649  
                     3650  ;****************************************************************************
                     3651  ; - Calculate Vehicle Speed Period
                     3652  ;****************************************************************************
                     3653  
 8B4E [03] B673      3654       lda     MPHcH           ; Load accumulator value in MPH counter Hi byte
 8B50 [03] B775      3655       sta     MPHpH           ; Copy to MPH period Hi byte
 8B52 [03] B674      3656       lda     MPHcL           ; Load accumulator with value in MPH counter
                     3657                               ; Lo byte
 8B54 [03] B776      3658       sta     MPHpL           ; Copy to MPH period Lo byte
 8B56 [03] 3F73      3659       clr     MPHcH           ; Clear MPH counter Hi byte


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 33
MC68HC908GP32 User Bootloader


 8B58 [03] 3F74      3660       clr     MPHcL           ; Clear MPH counter Lo byte
 8B5A [04] 121A      3661       bset    IMASKK,INTKBSCR     ; Set the Interrupt Mask bit of
                     3662                                   ; Keyboard Status and Control Register
                     3663                                   ;(disable interrupts)
 8B5C [04] 141A      3664       bset    ACKK,INTKBSCR       ; Set the Keyboard Acknowledge bit of
                     3665                                   ; Keyboard Status and Control Register
                     3666                                   ;(clear interrupt)
 8B5E [04] 1663      3667       bset    vssp,inputs          ; Set "vssp" bit of "inputs" variable
 8B60 [07] 80        3668       rti                         ; Return from interrupt
                     3669  
                     3670  
                     3671  
                     3672  ;****************************************************************************
                     3673  ; - ADC conversion complete Interrupt
                     3674  ;   ADC channel is set by "adsel" variable which starts at 0. This reads
                     3675  ;   channel 0, which is "MAP". When the conversion complete interrupt is
                     3676  ;   requested the current value in "epcr" is averaged with the result of the
                     3677  ;   ADC in the ADC Data Register (ADR) and stored as current "epcr" value.
                     3678  ;   This is to smooth out ADC "jitter". The "adsel" variable is then
                     3679  ;   incremented to the next channel and the process repeats until all
                     3680  ;   channels are read, at which time, "adsel" is cleared to start the
                     3681  ;   sequence again.
                     3682  ;****************************************************************************
                     3683  
                     3684  ADC_ISR:
 8B61 [02] 8B        3685       pshh              ; Push index register Hi byte on to stack
                     3686                         ;(Do this because processor does not stack H)
 8B62 [01] 8C        3687       clrh              ; Clear index register Hi byte
 8B63 [03] B66A      3688       lda     adsel     ; Load accumulator with value in ADC Channel Selector
 8B65 [01] 97        3689       tax               ; Transfer value in accumulator to index register Lo
 8B66 [03] B63D      3690       lda     ADR       ; Load accumulator with value in ADC Data Register
                     3691                         ;(this also clears conversion complete and
                     3692                         ; interupt enable bit)
 8B68 [03] EB47      3693       add     MAP,x     ; Add ADR and MAP,x (Add the two values)
 8B6A [01] 46        3694       rora              ; Rotate right through carry (Divide by 2)
 8B6B [03] E747      3695       sta     MAP,x     ; Copy result to address MAP,x
 8B6D [03] B66A      3696       lda     adsel     ; Load accumulator with value in ADC Channel Selector
 8B6F [01] 4C        3697       inca              ; Increment ADC Channel Selector Variable
 8B70 [02] A407      3698       and     #$07      ; "Logical and" accumulator with %0000111
                     3699                         ;(this clears "adsel" when incremented to decimal 8)
 8B72 [03] B76A      3700       sta     adsel     ; Copy new value to ADC Channel Selector Variable
 8B74 [04] 1463      3701       bset    adcc,inputs  ; Set "adcc" bit of "inputs" variable
 8B76 [02] 8A        3702       pulh                ; Pull value from stack to index register Hi byte
 8B77 [07] 80        3703       rti                 ; Return from interrupt
                     3704  
                     3705  
                     3706  ;**************************************************************************
                     3707  ;==========================================================================
                     3708  ;- Dummy ISR vector - there just to keep the assembler happy
                     3709  ;==========================================================================
                     3710  ;**************************************************************************
                     3711  
                     3712  Dummy:
 8B78 [07] 80        3713       rti     ; Return from interrupt
                     3714  
                     3715  ;***************************************************************************
                     3716  ;
                     3717  ; ---------------------------- SUBROUTINES --------------------------------
                     3718  ;
                     3719  ;  - Ordered Table Search routine
                     3720  ;  - Linear Interpolation routine
                     3721  ;  - 32 x 16 divide routine
                     3722  ;  - Round after division routine
                     3723  ;  - 16 x 16 multiply routine
                     3724  ;  - 8 x 16 multiply and 16 by 100 divide
                     3725  ;  - Calculations for EPC duty factor at stall routine
                     3726  ;  - Calculations for EPC duty factor above stall routine
                     3727  ;  - Calculations for EPC duty factor during 1st to 2nd gear shift routine
                     3728  ;  - Calculations for EPC duty factor during 2nd to 3d gear shift routine
                     3729  ;  - Calculations for EPC duty factor during 3d to 4th gear shift routine
                     3730  ;  - Torque Converter Clutch application/release routine
                     3731  ;  - DFC enable/disable and Exhaust Brake application/release routine
                     3732  ;  - Park, Reverse, Neutral solonoid group routine
                     3733  ;  - Manual 1, Drive 1 solonoid group routine
                     3734  ;  - Manual 2 solonoid group routine
                     3735  ;  - Drive 2 solonoid group routine
                     3736  ;  - Drive 3 solonoid group routine
                     3737  ;  - Drive 4 solonoid group routine
                     3738  ;  - TCC release, DFC prohibit Exhaust brake off routine
                     3739  ;  - Cancel shift routine
                     3740  ;  - First gear variable group routine
                     3741  ;  - Second gear variable group routine
                     3742  ;  - Third gear variable group routine
                     3743  ;  - Forth gear variable group routine
                     3744  ;
                     3745  ;***************************************************************************
                     3746  
                     3747  
                     3748  ;***************************************************************************
                     3749  ;
                     3750  ; -------------------- Ordered Table Search Subroutine ---------------------
                     3751  ;
                     3752  ;  X is pointing to the start of the first value in the table
                     3753  ;  tmp1:2 initially hold the start of table address,
                     3754  ;  then they hold the bound values
                     3755  ;  tmp3 is the end of the table ("n" elements - 1)
                     3756  ;  tmp4 is the comparison value
                     3757  ;  tmp5 is the index result - if zero then comp value is less
                     3758  ;  than beginning of table, and if equal to "n" elements then it is
                     3759  ;  rail-ed at upper end
                     3760  ;
                     3761  ;***************************************************************************
                     3762  
                     3763  ORD_TABLE_FIND:
 8B79 [03] 3F84      3764       clr     tmp5     ; Clear tmp5 variable
 8B7B [04] 5580      3765       ldhx    tmp1     ; Load high part of index register with value in tmp1
 8B7D [02] F6        3766       lda     ,x            ; Load accumulator with low part of index register???
 8B7E [03] B780      3767       sta     tmp1     ; Copy to tmp1 variable
 8B80 [03] B781      3768       sta     tmp2     ; Copy to tmp2 variable
                     3769  
                     3770  REENT:
 8B82 [01] 5C        3771       incx                    ; Increment low part of index register
 8B83 [04] 3C84      3772       inc     tmp5            ; Increment tmp5 variable
 8B85 [05] 4E8180    3773       mov     tmp2,tmp1       ; Move value in tmp2 variable to tmp1 variable
 8B88 [02] F6        3774       lda     ,x              ; Load accumulator with value in index reg Lo??
 8B89 [03] B781      3775       sta     tmp2            ; Copy to tmp2 variable
 8B8B [03] B183      3776       cmp     tmp4            ; Compare it with tmp4 variable
 8B8D [03] 2206      3777       bhi     GOT_ORD_NUM     ; If higher, branch to GOT_ORD_NUM lable
 8B8F [03] B684      3778       lda     tmp5            ; Load accumulator with value in tmp5 variable
 8B91 [03] B182      3779       cmp     tmp3            ; Compare it with value in tmp3 variable
 8B93 [03] 26ED      3780       bne     REENT           ; If the Z bit of CCR is clesr, branch to REENT:
                     3781  
                     3782  GOT_ORD_NUM:
 8B95 [04] 81        3783       rts                     ; Return from subroutine
                     3784  
                     3785  
                     3786  ;****************************************************************************
                     3787  ;
                     3788  ; ------------------ Linear Interpolation - 2D Subroutine -------------------
                     3789  ;
                     3790  ; Graph Plot         Z2
                     3791  ;                   Y2
                     3792  ;               X
                     3793  ;               Y
                     3794  ;         X1
                     3795  ;         Y1


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 34
MC68HC908GP32 User Bootloader


                     3796  ;            (y2 - y1)
                     3797  ;  Y = Y1 +  --------- * (x - x1)
                     3798  ;            (x2 - x1)
                     3799  ;
                     3800  ;   tmp1 = x1
                     3801  ;   tmp2 = x2
                     3802  ;   tmp3 = y1
                     3803  ;   tmp4 = y2
                     3804  ;   tmp5 = x
                     3805  ;   tmp6 = y
                     3806  ;***************************************************************************
                     3807  
                     3808  LININTERP:
 8B96 [03] 3F86      3809       clr     tmp7          ; Clear tmp7 variable (This is the negative slope
                     3810                             ; detection bit) (tmp7 = 0)
 8B98 [05] 4E8285    3811       mov     tmp3,tmp6     ; Move value in tmp3 variable to tmp6 variable
                     3812                             ; (Y1 to tmp6)
                     3813  
                     3814  CHECK_LESS_THAN:
 8B9B [03] B684      3815       lda     tmp5               ; Load accumulator with value in tmp5 variable
                     3816                                  ; (x)
 8B9D [03] B180      3817       cmp     tmp1               ; Compare it with value in tmp1 variable
                     3818                                  ; (x1)
 8B9F [03] 2202      3819       bhi     CHECK_GREATER_THAN ; If higher, branch to CHECK_GREATER_THAN:
                     3820                                  ; (X>X1)
 8BA1 [03] 2044      3821       bra     DONE_WITH_INTERP        ; Branch to DONE_WITH_INTERP: (else (Y=Y1))
                     3822  
                     3823  CHECK_GREATER_THAN:
 8BA3 [03] B684      3824       lda     tmp5             ; Load accumulator with value in tmp5 variable
                     3825                                ; (x)
 8BA5 [03] B181      3826       cmp     tmp2             ; Compare it with value in tmp2 variable
                     3827                                ; (X2)
 8BA7 [03] 2505      3828       blo     DO_INTERP        ; If lower, branch to DO_INTERP lable
                     3829                                ; (X<X2)
 8BA9 [05] 4E8385    3830       mov     tmp4,tmp6        ; Move value in tmp4 variable to tmp6 variable
                     3831                                ; (Y2 to tmp6)
 8BAC [03] 2039      3832       bra     DONE_WITH_INTERP ; Branch to DONE_WITH_INTERP lable (else (Y=Y2))
                     3833  
                     3834  DO_INTERP:
 8BAE [05] 4E8285    3835       mov     tmp3,tmp6        ; Move value in tmp3 variable to tmp6 variable
                     3836                                ; (Y1 to tmp6)
 8BB1 [03] B681      3837       lda     tmp2             ; Load accumulator with value in tmp2 variable
                     3838                                ; (X2)
 8BB3 [03] B080      3839       sub     tmp1             ; Subtract tmp1 from tmp2 (A=X2-X1)
 8BB5 [03] 2730      3840       beq     DONE_WITH_INTERP ; If the Z bit of CCR is set, branch to
                     3841                                ;DONE_WITH_INTERP:  else (Y=Y1)
 8BB7 [02] 87        3842       psha                     ; Push value in accumulator to stack
                     3843                                ; (X2-X1)(stack 1)
 8BB8 [03] B683      3844       lda     tmp4             ; Load accumulator with value in tmp4 variable
                     3845                                ; (Y2)
 8BBA [03] B082      3846       sub     tmp3             ; Subtract tmp3 from tmp4 (A=Y2-Y1)
 8BBC [03] 2403      3847       bcc     POSINTERP        ; If C bit of CCR is clear, branch to POSINTERP:
 8BBE [01] 40        3848       nega                     ; Negate accumulator      ??????????
 8BBF [04] 3C86      3849       inc     tmp7             ; Increment tmp7 variable (tmp7 = 1)
                     3850  
                     3851  POSINTERP:
 8BC1 [02] 87        3852       psha                     ; Push value in accumulator to stack
                     3853                                ; (negated Y2-Y1) (stack 2)
 8BC2 [03] B684      3854       lda     tmp5             ; Load accumulator with value in tmp5 variable
                     3855                                ; (X)
 8BC4 [03] B080      3856       sub     tmp1             ; Subtract tmp1 from tmp5 (A=X-X1)
 8BC6 [03] 271D      3857       beq     ZERO_SLOPE            ; If the Z bit of CCR is set,
                     3858                                ; branch to ZERO_SLOPE lable  (Y=Y1)
 8BC8 [02] 88        3859       pulx                     ; Pull value from stack to index register Lo
                     3860                                ;(negated Y2-Y1) (stack 2)
 8BC9 [05] 42        3861       mul                      ; Multiply it by the value in the accumulator
                     3862                                ; A=(negated Y2-Y1)*(X-X1)
 8BCA [02] 89        3863       pshx                     ; Push the index register L to the stack
                     3864                                ; (stack 2)
 8BCB [02] 8A        3865       pulh                     ; Pull this value to index register Hi(stack 2)
 8BCC [02] 88        3866       pulx                     ; Pull the next value to index register Lo
                     3867                                ;(stack 1)
 8BCD [07] 52        3868       div                      ; Divide A<-(H:A)/(X);H<-Remainder
 8BCE [02] 87        3869       psha                     ; Push the value in the accumulator onto stack
                     3870                                ; (stack 1)
 8BCF [03] B686      3871       lda     tmp7             ; Load accumulator with value in tmp7 variable
 8BD1 [03] 2607      3872       bne     NEG_SLOPE        ; If the Z bit of CCR is clear,
                     3873                                ; branch to NEG_SLOPE: (Y=Y1)
 8BD3 [02] 86        3874       pula                     ; Pull value from stack to accumulator (stack 1)
 8BD4 [03] BB82      3875       add     tmp3             ; Add it with value in tmp3 variable
 8BD6 [03] B785      3876       sta     tmp6             ; Copy it to tmp6 variable
 8BD8 [03] 200D      3877       bra     DONE_WITH_INTERP ; Branch to  DONE_WITH_INTERP:
                     3878  
                     3879  NEG_SLOPE:
 8BDA [02] 86        3880       pula                     ; Pull value from stack to accumulator(stack 1)
 8BDB [03] B786      3881       sta     tmp7             ; Copy to tmp7 variable
 8BDD [03] B682      3882       lda     tmp3             ; Load accumulator with value in tmp3  Y1)
 8BDF [03] B086      3883       sub     tmp7             ; Subtract tmp7 from tmp3
 8BE1 [03] B785      3884       sta     tmp6             ; Copy result to tmp6 variable
 8BE3 [03] 2002      3885       bra     DONE_WITH_INTERP ; Branch to  DONE_WITH_INTERP:
                     3886  
                     3887  ZERO_SLOPE:
 8BE5 [02] 86        3888          pula    ; Pull value from stack to accumulator (clean stack)(stack 2)
 8BE6 [02] 86        3889          pula    ; Pull value from stack to accumulator (clean stack)(stack 1)
                     3890  
                     3891  DONE_WITH_INTERP:
 8BE7 [04] 81        3892          rts      ; Return from subroutine
                     3893  
                     3894  ;****************************************************************************
                     3895  ;
                     3896  ; ----------------- 32 x 16 Unsigned Divide Subroutine ---------------------
                     3897  ;
                     3898  ; This routine takes the 32-bit dividend stored in INTACC1.....INTACC1+3
                     3899  ; and divides it by the 16-bit divisor stored in INTACC2:INTACC2+1.
                     3900  ; The quotient replaces the dividend and the remainder replaces the divisor.
                     3901  ;
                     3902  ;***************************************************************************
                     3903  
 8BE8                3904  UDVD32    EQU     *
                     3905  *
 8BE8                3906  DIVIDEND  EQU     INTACC1+2
 8BE8                3907  DIVISOR   EQU     INTACC2
 8BE8                3908  QUOTIENT  EQU     INTACC1
 8BE8                3909  REMAINDER EQU     INTACC1
                     3910  *
 8BE8 [02] 8B        3911          PSHH                            ;save h-reg value
 8BE9 [02] 87        3912          PSHA                            ;save accumulator
 8BEA [02] 89        3913          PSHX                            ;save x-reg value
 8BEB [02] A7FD      3914          AIS     #-3                     ;reserve three bytes of temp storage
 8BED [02] A620      3915          LDA     #!32                    ;
 8BEF [04] 9EE703    3916          STA     3,SP                    ;loop counter for number of shifts
 8BF2 [03] B67C      3917          LDA     DIVISOR                 ;get divisor msb
 8BF4 [04] 9EE701    3918          STA     1,SP                    ;put divisor msb in working storage
 8BF7 [03] B67D      3919          LDA     DIVISOR+1               ;get divisor lsb
 8BF9 [04] 9EE702    3920          STA     2,SP                    ;put divisor lsb in working storage
                     3921  
                     3922  ****************************************************************************
                     3923  *     Shift all four bytes of dividend 16 bits to the right and clear
                     3924  *     both bytes of the temporary remainder location
                     3925  ****************************************************************************
                     3926  
 8BFC [05] 4E7B7D    3927          MOV     DIVIDEND+1,DIVIDEND+3   ;shift dividend lsb
 8BFF [05] 4E7A7C    3928          MOV     DIVIDEND,DIVIDEND+2     ;shift 2nd byte of dividend
 8C02 [05] 4E797B    3929          MOV     DIVIDEND-1,DIVIDEND+1   ;shift 3rd byte of dividend
 8C05 [05] 4E787A    3930          MOV     DIVIDEND-2,DIVIDEND     ;shift dividend msb
 8C08 [03] 3F78      3931          CLR     REMAINDER               ;zero remainder msb


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 35
MC68HC908GP32 User Bootloader


 8C0A [03] 3F79      3932          CLR     REMAINDER+1             ;zero remainder lsb
                     3933  
                     3934  ****************************************************************************
                     3935  *     Shift each byte of dividend and remainder one bit to the left
                     3936  ****************************************************************************
                     3937  
 8C0C [03] B678      3938  SHFTLP  LDA     REMAINDER               ;get remainder msb
 8C0E [01] 49        3939          ROLA                            ;shift remainder msb into carry
 8C0F [04] 397D      3940          ROL     DIVIDEND+3              ;shift dividend lsb
 8C11 [04] 397C      3941          ROL     DIVIDEND+2              ;shift 2nd byte of dividend
 8C13 [04] 397B      3942          ROL     DIVIDEND+1              ;shift 3rd byte of dividend
 8C15 [04] 397A      3943          ROL     DIVIDEND                ;shift dividend msb
 8C17 [04] 3979      3944          ROL     REMAINDER+1             ;shift remainder lsb
 8C19 [04] 3978      3945          ROL     REMAINDER               ;shift remainder msb
                     3946  
                     3947  *****************************************************************************
                     3948  *     Subtract both bytes of the divisor from the remainder
                     3949  *****************************************************************************
                     3950  
 8C1B [03] B679      3951          LDA     REMAINDER+1          ;get remainder lsb
 8C1D [04] 9EE002    3952          SUB     2,SP                 ;subtract divisor lsb from remainder lsb
 8C20 [03] B779      3953          STA     REMAINDER+1          ;store new remainder lsb
 8C22 [03] B678      3954          LDA     REMAINDER            ;get remainder msb
 8C24 [04] 9EE201    3955          SBC     1,SP                 ;subtract divisor msb from remainder msb
 8C27 [03] B778      3956          STA     REMAINDER            ;store new remainder msb
 8C29 [03] B67D      3957          LDA     DIVIDEND+3           ;get low byte of dividend/quotient
 8C2B [02] A200      3958          SBC     #0                   ;dividend low bit holds subtract carry
 8C2D [03] B77D      3959          STA     DIVIDEND+3           ;store low byte of dividend/quotient
                     3960  
                     3961  *****************************************************************************
                     3962  *     Check dividend/quotient lsb. If clear, set lsb of quotient to indicate
                     3963  *     successful subraction, else add both bytes of divisor back to remainder
                     3964  *****************************************************************************
                     3965  
 8C2F [05] 017D16    3966          BRCLR   0,DIVIDEND+3,SETLSB     ;check for a carry from subtraction
                     3967                                          ;and add divisor to remainder if set
 8C32 [03] B679      3968          LDA     REMAINDER+1             ;get remainder lsb
 8C34 [04] 9EEB02    3969          ADD     2,SP                    ;add divisor lsb to remainder lsb
 8C37 [03] B779      3970          STA     REMAINDER+1             ;store remainder lsb
 8C39 [03] B678      3971          LDA     REMAINDER               ;get remainder msb
 8C3B [04] 9EE901    3972          ADC     1,SP                    ;add divisor msb to remainder msb
 8C3E [03] B778      3973          STA     REMAINDER               ;store remainder msb
 8C40 [03] B67D      3974          LDA     DIVIDEND+3              ;get low byte of dividend
 8C42 [02] A900      3975          ADC     #0                      ;add carry to low bit of dividend
 8C44 [03] B77D      3976          STA     DIVIDEND+3              ;store low byte of dividend
 8C46 [03] 2002      3977          BRA     DECRMT                  ;do next shift and subtract
                     3978  
 8C48 [04] 107D      3979  SETLSB  BSET    0,DIVIDEND+3            ;set lsb of quotient to indicate
                     3980                                          ;successive subtraction
 8C4A [06] 9E6B03BE  3981  DECRMT  DBNZ    3,SP,SHFTLP             ;decrement loop counter and do next
                     3982                                          ;shift
                     3983  
                     3984  *****************************************************************************
                     3985  *     Move 32-bit dividend into INTACC1.....INTACC1+3 and put 16-bit
                     3986  *     remainder in INTACC2:INTACC2+1
                     3987  *****************************************************************************
                     3988  
 8C4E [03] B678      3989          LDA     REMAINDER               ;get remainder msb
 8C50 [04] 9EE701    3990          STA     1,SP                    ;temporarily store remainder msb
 8C53 [03] B679      3991          LDA     REMAINDER+1             ;get remainder lsb
 8C55 [04] 9EE702    3992          STA     2,SP                    ;temporarily store remainder lsb
 8C58 [05] 4E7A78    3993          MOV     DIVIDEND,QUOTIENT       ;
 8C5B [05] 4E7B79    3994          MOV     DIVIDEND+1,QUOTIENT+1   ;shift all four bytes of quotient
 8C5E [05] 4E7C7A    3995          MOV     DIVIDEND+2,QUOTIENT+2   ; 16 bits to the left
 8C61 [05] 4E7D7B    3996          MOV     DIVIDEND+3,QUOTIENT+3   ;
 8C64 [04] 9EE601    3997          LDA     1,SP                    ;get final remainder msb
 8C67 [03] B77C      3998          STA     INTACC2                 ;store final remainder msb
 8C69 [04] 9EE602    3999          LDA     2,SP                    ;get final remainder lsb
 8C6C [03] B77D      4000          STA     INTACC2+1               ;store final remainder lsb
                     4001  
                     4002  *****************************************************************************
                     4003  *     Deallocate local storage, restore register values, and return from
                     4004  *     subroutine
                     4005  *****************************************************************************
                     4006  
 8C6E [02] A703      4007          AIS     #3                      ;deallocate temporary storage
 8C70 [02] 88        4008          PULX                            ;restore x-reg value
 8C71 [02] 86        4009          PULA                            ;restore accumulator value
 8C72 [02] 8A        4010          PULH                            ;restore h-reg value
 8C73 [04] 81        4011          RTS                             ;return
                     4012  
                     4013  *****************************************************************************
                     4014  
                     4015  
                     4016  ;****************************************************************************
                     4017  ; ----------  ----- ROUND after div (unsigned) Subroutine -------------------
                     4018  ;
                     4019  ;  1)  check for div overflow (carry set), rail result if detected
                     4020  ;  2)  if (remainder * 2) > divisor then     ; was remainder > (divisor / 2)
                     4021  ;  2a)    increment result, rail if over-flow
                     4022  ;
                     4023  ;****************************************************************************
                     4024  
                     4025  DIVROUND:
 8C74 [03] 250E      4026       bcs     DIVROUND0     ; If C bit of CCR is set, branch to DIVROUND0:
                     4027                             ; (div overflow? yes, branch)
 8C76 [03] BF95      4028       stx     local_tmp     ; Copy value in index register Lo byte to
                     4029                             ; local_tmp variable (divisor)
 8C78 [02] 8B        4030       pshh                  ; Push value in index register Hi byte onto
                     4031                             ; stack (retrieve remainder)
 8C79 [02] 88        4032       pulx                  ; Pull value on stack to index register Lo byte
 8C7A [01] 58        4033       lslx                  ; Logical shift left index register lo byte (* 2)
 8C7B [03] 2504      4034       bcs     DIVROUND2     ; If C bit of CCR is set, branch to DIVROUND2:
                     4035                             ;(over-flow on left-shift, (remainder * 2) > $FF)
 8C7D [03] B395      4036       cpx     local_tmp     ; Compare value in local_tmp variable with value
                     4037                             ; in index register Lo byte
                     4038                             ;(compare (remainder * 2) to divisor)
 8C7F [03] 2505      4039       blo     DIVROUND1     ; If lower, branch to DIVROUND1:
                     4040  
                     4041  
                     4042  DIVROUND2:
 8C81 [01] 4C        4043       inca                   ; Increment accumulator (round-up result)
 8C82 [03] 2602      4044       bne      DIVROUND1     ; If Z bit of CCR is clear, branch to DIVROUND1:
                     4045                              ; (result roll over? no, branch)
                     4046  
                     4047  
                     4048  DIVROUND0:
 8C84 [02] A6FF      4049       lda     #$FF     ; Load accumulator with decimal 255 (rail result)
                     4050  
                     4051  
                     4052  DIVROUND1:
 8C86 [04] 81        4053       rts              ; return from subroutine
                     4054  
                     4055  
                     4056  ;****************************************************************************
                     4057  ;
                     4058  ; ------------------- 16 x 16 Unsigned Multiply Subroutine -----------------
                     4059  ;
                     4060  ;     tmp8...tmp5 = tmp4:tmp3 * tmp2:tmp1
                     4061  ;
                     4062  ;               tmp3*tmp1
                     4063  ;   +      tmp4*tmp1
                     4064  ;   +      tmp3*tmp2
                     4065  ;   + tmp4*tmp2
                     4066  ;   = ===================
                     4067  ;     tmp8 tmp7 tmp6 tmp5


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 36
MC68HC908GP32 User Bootloader


                     4068  ;
                     4069  ;****************************************************************************
                     4070  
                     4071  UMUL32:
 8C87 [03] B680      4072       lda     tmp1        ; Load accumulator with value in tmp1 variable
 8C89 [03] BE82      4073       ldx     tmp3        ; Load index register Lo byte with value in tmp3
 8C8B [05] 42        4074       mul                 ; Multiply X:A<-(X)*(A)
 8C8C [03] B784      4075       sta     tmp5        ; Ccopy result to tmp5
 8C8E [03] BF85      4076       stx     tmp6        ; Copy value in index register Lo byte to tmp6
                     4077  ;
 8C90 [03] B681      4078       lda     tmp2        ; Load accumulator with value in tmp2
 8C92 [03] BE83      4079       ldx     tmp4        ; Load index register Lo byte with value in tmp4
 8C94 [05] 42        4080       mul                 ; Multiply X:A<-(X)*(A)
 8C95 [03] B786      4081       sta     tmp7        ; Copy result to tmp7
 8C97 [03] BF87      4082       stx     tmp8        ; Copy value in index register Lo byte to tmp8
                     4083  ;
 8C99 [03] B680      4084       lda     tmp1        ; Load accumulator with value in tmp1
 8C9B [03] BE83      4085       ldx     tmp4        ; Load index register Lo byte with value in tmp4
 8C9D [05] 42        4086       mul                 ; Multiply X:A<-(X)*(A)
 8C9E [03] BB85      4087       add     tmp6        ; Add without carry, A<-(A)+(M)
 8CA0 [03] B785      4088       sta     tmp6        ; Copy result to tmp6
 8CA2 [01] 9F        4089       txa                 ; Transfer value in index register Lo byte
                     4090                           ; to accumulator
 8CA3 [03] B986      4091       adc     tmp7        ; Add with carry, A<-(A)+(M)+(C)
 8CA5 [03] B786      4092       sta     tmp7        ; Copy result to tmp7
 8CA7 [03] 2402      4093       bcc     UMUL32a     ; If C bit of CCR is clear, branch to UMUL32a:
 8CA9 [04] 3C87      4094       inc     tmp8        ; Increment value in tmp8
                     4095  
                     4096  
                     4097  UMUL32a:
 8CAB [03] B681      4098       lda     tmp2        ; Load accumulator with value in tmp2
 8CAD [03] BE82      4099       ldx     tmp3        ; Load index register Lo byte with value in tmp3
 8CAF [05] 42        4100       mul                 ; Multiply X:A<-(X)*(A)
 8CB0 [03] BB85      4101       add     tmp6        ; Add without carry, A<-(A)+(M)
 8CB2 [03] B785      4102       sta     tmp6        ; Copy result to tmp6
 8CB4 [01] 9F        4103       txa                 ; Transfer value in index register Lo byte
                     4104                           ; to accumulator
 8CB5 [03] B986      4105       adc     tmp7        ; Add with carry, A<-(A)+(M)+(C)
 8CB7 [03] B786      4106       sta     tmp7        ; Copy result to tmp7
 8CB9 [03] 2402      4107       bcc     UMUL32b     ; If C bit of CCR is clear, branch to UMUL32b:
 8CBB [04] 3C87      4108       inc     tmp8        ; increment value in tmp8 variable
                     4109  
                     4110  
                     4111  UMUL32b:
 8CBD [04] 81        4112        rts                ; return from subroutine
                     4113  
                     4114  ;****************************************************************************
                     4115  ; Multiply then divide.
                     4116  ;****************************************************************************
                     4117  
                     4118  uMulAndDiv:
                     4119  
                     4120  ;****************************************************************************
                     4121  ; 8 x 16 Multiply
                     4122  ;
                     4123  ; 8-bit value in Accumulator, 16-bit value in tmp11-12, result overwrites
                     4124  ; 16-bit input.  Assumes result cannot overflow.
                     4125  ;
                     4126  ;  tmp12:tmp11<-tmp12:tmp11*(A)
                     4127  ;
                     4128  ****************************************************************************
                     4129  
                     4130  uMul16:
 8CBE [02] 87        4131        psha              ; Push value in accumulator to stack
                     4132                          ;(Save multiplier)
 8CBF [03] BE8A      4133        ldx     tmp11     ; Load index register Lo byte with value in "tmp11"
                     4134                          ;(LSB of multiplicand)
 8CC1 [05] 42        4135        mul               ; Multiply (X:A)<-(X)*(A)
 8CC2 [03] B78A      4136        sta     tmp11     ; Copy value in accumulator to "tmp11"
                     4137                          ;(LSB of result stored)
 8CC4 [02] 86        4138        pula              ; Pull value from stack to acumulator
                     4139                          ;(Pop off multiplier)
 8CC5 [02] 89        4140        pshx              ; Push value in index register Lo byyte to stack
                     4141                          ;(Carry on stack)
 8CC6 [03] BE8B      4142        ldx     tmp12     ; Load index register Lo byte with value in "tmp12"
                     4143                          ;(MSB of multiplicand)
 8CC8 [05] 42        4144        mul               ; Multiply (X:A)<-(X)*(A)
 8CC9 [04] 9EEB01    4145        add     1,SP      ; Add (A)<-(A)+(SP)
                     4146                          ;(Add in carry from LSB)
 8CCC [03] B78B      4147        sta     tmp12     ; Copy value in accumulator to "tmp12"
                     4148                          ;(MSB of result)
 8CCE [02] 86        4149        pula              ; Pull value in stack to accumulator
                     4150                          ;(Clear the stack)
                     4151  
                     4152  ;****************************************************************************
                     4153  ; 16-bit divide by 100T
                     4154  ;
                     4155  ; 16-bit value in tmp11-12 is divided by 100T.  Result is left in tmp11-12.
                     4156  ;
                     4157  ;  tmp12:tmp11<-tmp12:tmp11/100
                     4158  ;
                     4159  ;****************************************************************************
                     4160  
                     4161  uDivBy100:
 8CCF [01] 8C        4162        clrh              ; Clear index register Hi byte
 8CD0 [03] B68B      4163        lda     tmp12     ; Load accumulator with value in "tmp12"
                     4164                          ;(MSB of dividend)
 8CD2 [02] AE64      4165        ldx     #$64      ; Load index register Lo byte with decimal 100
                     4166                          ;(Divisor)
 8CD4 [07] 52        4167        div               ; Divide (A)<-(H:A)/(X)
 8CD5 [03] B78B      4168        sta     tmp12     ; Copy value in accumulator to "tmp12"
                     4169                          ;(MSB of quotient)
 8CD7 [03] B68A      4170        lda     tmp11     ; Load accumulator with value in "tmp11"
                     4171                          ;(LSB of dividend)
 8CD9 [07] 52        4172        div               ; Divide (A)<-(H:A)/(X)
 8CDA [03] B78A      4173        sta     tmp11     ; Copy value in accumulator to "tmp11
                     4174                          ;(LSB of quotient)
                     4175  
                     4176  ;****************************************************************************
                     4177  ; - See if we need to round up the quotient.
                     4178  ;****************************************************************************
 8CDC [02] 8B        4179        pshh                         ; Push value in index register Hi byte
                     4180                                     ; to stack
 8CDD [02] 86        4181        pula                         ; Pull value from stack to accumulator
                     4182                                     ;(H)->(A)(Remainder in A)
 8CDE [02] A132      4183        cmp     #$32                 ; Compare value in accumulator with
                     4184                                     ; decimal 50(Half of the divisor)
 8CE0 [03] 9306      4185        ble     uDivRoundingDone     ; If less than or equal, branch to
                     4186                                     ; uDivRoundingDone:
 8CE2 [04] 3C8A      4187        inc     tmp11                ; Increment value in "tmp11"
 8CE4 [03] 2402      4188        bcc     uDivRoundingDone     ; If carry bit is clear, branch to
                     4189                                     ; uDivRoundingDone:
 8CE6 [04] 3C8B      4190        inc     tmp12                ; Increment value in "tmp12"
                     4191  
                     4192  uDivRoundingDone:
 8CE8 [04] 81        4193        rts                          ; Return from subroutine
                     4194  
                     4195  ;****************************************************************************
                     4196  ;
                     4197  ; "TO"(Torque Output)3-D Table Lookup:
                     4198  ;
                     4199  ;  This is used to determine value of "TOcurr", based on RPM and MAP. The
                     4200  ;  "TOcurr" value is used to determine EPC pulse width for steady state
                     4201  ;  line pressure while above ~4MPH.
                     4202  ;  The table looks like:
                     4203  ;


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 37
MC68HC908GP32 User Bootloader


                     4204  ;     105 +....+....+....+....+....+....+....+
                     4205  ;         ....................................
                     4206  ;      00 +....+....+....+....+....+....+....+
                     4207  ;                    ...
                     4208  ;  KPA                ...
                     4209  ;                        ...
                     4210  ;      35 +....+....+....+....+....+....+....+
                     4211  ;         5    15   25   35   45   55   65   75 RPM/20
                     4212  ;
                     4213  ;
                     4214  ; Steps:
                     4215  ;  1) Find the bracketing KPA positions via ORD_TABLE_FIND, put index in
                     4216  ;      tmp8 and bounding values in tmp9(kpa1) and tmp10(kpa2)
                     4217  ;  2) Find the bracketing RPM positions via ORD_TABLE_FIND, store index in
                     4218  ;      tmp11 and bounding values in tmp13(rpm1) and tmp14(rpm2)
                     4219  ;  3) Using the TO table, find the table TO values for tmp15=TO(kpa1,rpm1),
                     4220  ;      tmp16=TO(kpa1,rpm2), tmp17 = TO(kpa2,rpm1), and tmp18 = TO(kpa2,rpm2)
                     4221  ;  4) Find the interpolated TO value at the lower KPA range :
                     4222  ;      x1=rpm1, x2=rpm2, y1=TO(kpa1,rpm1), y2=TO(kpa1,rpm2) - put in tmp19
                     4223  ;  5) Find the interpolated TO value at the upper KPA range :
                     4224  ;      x1=f1, x2=rpm2, y1=TO(kpa2,rpm1), y2=TO(kpa2,rpm2) - put in tmp11
                     4225  ;  6) Find the final TO value using the two interpolated TO values:
                     4226  ;      x1=kpa1, x2=kpa2, y1=TO_FROM_STEP_4, y2=TO_FROM_STEP_5
                     4227  ;
                     4228  ;****************************************************************************
                     4229  
                     4230  MOVE_CALCS:
 8CE9 [03] 4500F8    4231       ldhx    #KPA_range         ; Load index register with value in
                     4232                                  ; KPA_range table
 8CEC [04] 3580      4233       sthx    tmp1               ; Copy value to tmp1 variable
 8CEE [02] A607      4234       lda     #$07               ; Load accumulator with decimal 7
 8CF0 [03] B782      4235       sta     tmp3               ; Copy to tmp3 variable
 8CF2 [03] B64F      4236       lda     kpa                ; Load accumulator with value in MAP value
                     4237                                  ; in units of KPa variable
 8CF4 [03] B783      4238       sta     tmp4               ; Copy to tmp4 variable
 8CF6 [05] CD8B79    4239       jsr     ORD_TABLE_FIND     ; Jump to subroutine ORD_TABLE_FIND,
                     4240                                  ; (result in tmp5)
 8CF9 [03] B680      4241       lda     tmp1               ; Load accumulator with value in tmp1
 8CFB [03] B681      4242       lda     tmp2               ; Load accumulator with value in tmp2
 8CFD [05] 4E8487    4243       mov     tmp5,tmp8          ; move value from tmp5 to tmp8 (Index)
 8D00 [05] 4E8088    4244       mov     tmp1,tmp9          ; move value from tmp1 to tmp9 (X1)
 8D03 [05] 4E8189    4245       mov     tmp2,tmp10              ; move value from tmp2 to tmp10 (X2)
                     4246  
                     4247  ;TO_STEP_2:
 8D06 [03] 4500F0    4248       ldhx    #RPM_range         ; Load index register with value from
                     4249                                  ; RPM_range table
 8D09 [04] 3580      4250       sthx    tmp1               ; Copy value to tmp1 variable
 8D0B [02] A607      4251       lda     #$07               ; Load accumulator with decimal 7
 8D0D [03] B782      4252       sta     tmp3               ; Copy to tmp3 variable
 8D0F [03] B642      4253       lda     rpm                ; Load accumulator with value in RPM/20
 8D11 [03] B783      4254       sta     tmp4               ; Copy to tmp4 variable
 8D13 [05] CD8B79    4255       jsr     ORD_TABLE_FIND     ; Jump to subroutine ORD_TABLE_FIND,
                     4256                                  ; result in tmp5
 8D16 [05] 4E848A    4257       mov     tmp5,tmp11              ; Move value from tmp5 to tmp11 (Index)
 8D19 [05] 4E808C    4258       mov     tmp1,tmp13              ; Move value from tmp1 to tmp13 (X1)
 8D1C [05] 4E818D    4259       mov     tmp2,tmp14              ; Move value from tmp2 to tmp14 (X2)
                     4260  
                     4261  ;TO_STEP_3:
 8D1F [01] 8C        4262       clrh               ; Clear high part of index register
 8D20 [02] A608      4263       lda     #$08       ; Load accumulator with decimal 8
 8D22 [02] 87        4264       psha               ; Push this value onto stack
 8D23 [02] 88        4265       pulx               ; Pull this value onto low part of index register
 8D24 [03] B687      4266       lda     tmp8       ; Load accumulator with value in tmp8 variable
 8D26 [01] 4A        4267       deca               ; Decrement accumulator
 8D27 [05] 42        4268       mul                ; Multiply value in index reg Lo by the accumulator
 8D28 [03] BB8A      4269       add     tmp11   ; Add to value in tmp11 variable
 8D2A [01] 4A        4270       deca               ; Decrement accumulator
 8D2B [01] 97        4271       tax                ; Copy value to index register Lo byte
 8D2C [03] E6B0      4272       lda     TO_table,x ; Load accumulator with value in X bin of TO_table
 8D2E [03] B78E      4273       sta     tmp15   ; Copy value to tmp15 variable
 8D30 [01] 5C        4274       incx               ; Increment low part of index register
 8D31 [03] E6B0      4275       lda     TO_table,x ; Load accumulator with value in X bin of TO_table
 8D33 [03] B78F      4276       sta     tmp16   ; Copy value to tmp16 variable
 8D35 [02] A608      4277       lda     #$08       ; Load accumulator with decimal 8
 8D37 [02] 87        4278       psha               ; Push this value onto stack
 8D38 [02] 88        4279       pulx               ; Pull this value into index registerLo byte
 8D39 [03] B687      4280       lda     tmp8       ; Copy value in accumulator to tmp8 variable
 8D3B [05] 42        4281       mul                ; Multiply value in index register Lo by accumulator
 8D3C [03] BB8A      4282       add     tmp11   ; Add to value in tmp11 variable
 8D3E [01] 4A        4283       deca               ; Decrement accumulator
 8D3F [01] 97        4284       tax                ; Copy value to index register L byte
 8D40 [03] E6B0      4285       lda     TO_table,x ; Load accumulator with value in X bin of TO_table
 8D42 [03] B790      4286       sta     tmp17   ; Copy value to tmp17 variable
 8D44 [01] 5C        4287       incx               ; Increment low part of index register
 8D45 [03] E6B0      4288       lda     TO_table,x ; Load accumulator with value in X bin of TO_table
 8D47 [03] B791      4289       sta     tmp18   ; Copy value to tmp18 variable
                     4290  
                     4291  ;TO_STEP_4:
 8D49 [05] 4E8C80    4292       mov     tmp13,tmp1      ; Move value from tmp13 variable to tmp1 variable
 8D4C [05] 4E8D81    4293       mov     tmp14,tmp2      ; Move value from tmp14 variable to tmp2 variable
 8D4F [05] 4E8E82    4294       mov     tmp15,tmp3      ; Move value from tmp15 variable to tmp3 variable
 8D52 [05] 4E8F83    4295       mov     tmp16,tmp4      ; Move value from tmp16 variable to tmp4 variable
 8D55 [05] 4E4284    4296       mov     rpm,tmp5        ; Move Throttle Position Sensor ADC Raw Reading
                     4297                          ; to tmp5 variable
 8D58 [05] CD8B96    4298       jsr     lininterp       ; Jump to subroutine lininterp (result in tmp6)
 8D5B [05] 4E8592    4299       mov     tmp6,tmp19      ; Move value from tmp6 variable to tmp19 variable
                     4300  
                     4301  ;TO_STEP_5:
 8D5E [05] 4E8C80    4302       mov     tmp13,tmp1      ; Move value from tmp13 variable to tmp1 variable
 8D61 [05] 4E8D81    4303       mov     tmp14,tmp2      ; Move value from tmp14 variable to tmp2 variable
 8D64 [05] 4E9082    4304       mov     tmp17,tmp3      ; Move value from tmp17 variable to tmp3 variable
 8D67 [05] 4E9183    4305       mov     tmp18,tmp4      ; Move value from tmp18 variable to tmp4 variable
 8D6A [05] 4E4284    4306       mov     rpm,tmp5        ; Move RPM/20 to tmp5 variable
 8D6D [05] CD8B96    4307       jsr     lininterp       ; Jump to subroutine lininterp (result in tmp6)
 8D70 [05] 4E858A    4308       mov     tmp6,tmp11      ; Move value from tmp6 variable to tmp11 variable
                     4309  
                     4310  ;TO_STEP_6:
 8D73 [05] 4E8880    4311       mov     tmp9,tmp1        ; Move value from tmp9 variable to tmp1 variable
 8D76 [05] 4E8981    4312       mov     tmp10,tmp2       ; Move value from tmp10 variable to tmp2 variable
 8D79 [05] 4E9282    4313       mov     tmp19,tmp3       ; Move value from tmp19 variable to tmp3 variable
 8D7C [05] 4E8A83    4314       mov     tmp11,tmp4       ; Move value from tmp11 variable to tmp4 variable
 8D7F [05] 4E4F84    4315       mov     kpa,tmp5         ; Move value in MAP value in units of KPa to tmp5
 8D82 [03] B64F      4316       lda     kpa         ; Load accumulator with value in MAP value in KPa
 8D84 [05] CD8B96    4317       jsr     lininterp        ; Jump to subroutine lininterp (result in tmp6)
 8D87 [04] 81        4318       rts                 ; Return from subroutine
                     4319  
                     4320  ;****************************************************************************
                     4321  ;
                     4322  ; --------------- EPC pulse width calculation subroutines ------------------
                     4323  ;
                     4324  ;   The EPC pulse width is a linear interpolated value from the EPC tables
                     4325  ;   (8 points) which are placed at different TPSp values in the
                     4326  ;   TPS_range table.
                     4327  ;   The EPC tables are:
                     4328  ;   - EPC_stall,  This is the table used at vehicle speeds below ~4MPH
                     4329  ;   - EPC_12,  This is the table used for First to Second gear upshift
                     4330  ;   - EPC_23,  This is the table used for Second to Third gear upshift
                     4331  ;   - EPC_34,  This is the table used for Third to Forth gear upshift
                     4332  ;   - EPC_M1,  This is the table used with MLPS in M1
                     4333  ;
                     4334  ; Method:
                     4335  ;
                     4336  ; 1) Perform ordered table search of TPS_range (using TPSp variable) to
                     4337  ;    determine which bin.
                     4338  ; 2) Perform linear interpolation of EPC table to get interpolated EPC
                     4339  ;    pulse width


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 38
MC68HC908GP32 User Bootloader


                     4340  ;
                     4341  ;***************************************************************************
                     4342  
                     4343  STALL_CALCS:
 8D88 [03] 450100    4344       ldhx    #TPS_range            ; Load Index register H:X with address of
                     4345                                ; first two bytes of TPS_range table
 8D8B [04] 3580      4346       sthx    tmp1             ; Copy values into tmp1:tmp2 variables
 8D8D [02] A607      4347       lda     #$07             ; Load accumulator with decimal 7
 8D8F [03] B782      4348       sta     tmp3             ; Copy value into tmp3 variable
 8D91 [03] B655      4349       lda     TPSp             ; Load accumulator with current TPS percent
 8D93 [03] B783      4350       sta     tmp4             ; Copy value into tmp4 variable
 8D95 [05] CD8B79    4351       jsr     ORD_TABLE_FIND   ; jump to subroutine ORD_TABLE_FIND
                     4352                                ; (result in tmp5)
 8D98 [01] 8C        4353       clrh                     ; Clear index register hi byte
 8D99 [03] B684      4354       lda     tmp5             ; Load accumulator with result from
                     4355                                ; ORD_TABLE_FIND (tmp5)
 8D9B [01] 97        4356       tax                      ; Copy it to index register Lo byte
 8D9C [04] D60108    4357       lda     EPC_stall,x      ; Load the accumulator with the value in
                     4358                                ; EPC_stall table, offset in index register
                     4359                                ; Lo byte(upper bin)
 8D9F [03] B783      4360       sta     tmp4             ; Copy it to the tmp4 variable
 8DA1 [01] 5A        4361       decx                     ; Decrement index reg Lo byte (move down 1 bin)
 8DA2 [04] D60108    4362       lda     EPC_stall,x      ; Load the accumulator with the value in
                     4363                                ; EPC_stall table, offset in index register
                     4364                                ; Lo byte(new bin value)
 8DA5 [03] B782      4365       sta     tmp3             ; Copy it to the tmp3 variable
 8DA7 [05] 4E5584    4366       mov     TPSp,tmp5        ; Move current TPS percent to tmp5 variable
 8DAA [05] CD8B96    4367       jsr     lininterp        ; Jump to Lininterp subroutine
                     4368                                ; (result in temp6)
 8DAD [04] 81        4369       rts                      ; Return from subroutine
                     4370  
                     4371  SHIFT12_CALCS:
 8DAE [03] 450100    4372       ldhx    #TPS_range            ; Load Index register H:X with address of
                     4373                                ; first two bytes of TPS_range table
 8DB1 [04] 3580      4374       sthx    tmp1             ; Copy values into tmp1:tmp2 variables
 8DB3 [02] A607      4375       lda     #$7              ; Load accumulator with decimal 7
 8DB5 [03] B782      4376       sta     tmp3             ; Copy value into tmp3 variable
 8DB7 [03] B655      4377       lda     TPSp             ; Load accumulator with current TPS percent
 8DB9 [03] B783      4378       sta     tmp4             ; Copy value into tmp4 variable
 8DBB [05] CD8B79    4379       jsr     ORD_TABLE_FIND   ; jump to subroutine ORD_TABLE_FIND
                     4380                                ; (result in tmp5)
 8DBE [01] 8C        4381       clrh                     ; Clear index register hi byte
 8DBF [03] B684      4382       lda     tmp5             ; Load accumulator with result from
                     4383                                ; ORD_TABLE_FIND (tmp5)
 8DC1 [01] 97        4384       tax                      ; Copy it to index register Lo byte
 8DC2 [04] D60110    4385       lda     EPC_12,x         ; Load the accumulator with the value in
                     4386                                ; EPC_12 table, offset in index register
                     4387                                ; Lo byte(upper bin)
 8DC5 [03] B783      4388       sta     tmp4             ; Copy it to the tmp4 variable
 8DC7 [01] 5A        4389       decx                     ; Decrement index reg Lo byte (move down 1 bin)
 8DC8 [04] D60110    4390       lda     EPC_12,x         ; Load the accumulator with the value in
                     4391                                ; EPC_12 table, offset in index register
                     4392                                ; Lo byte(new bin value)
 8DCB [03] B782      4393       sta     tmp3             ; Copy it to the tmp3 variable
 8DCD [05] 4E5584    4394       mov     TPSp,tmp5        ; Move current TPS percent to tmp5 variable
 8DD0 [05] CD8B96    4395       jsr     lininterp        ; Jump to Lininterp subroutine
                     4396                                ; (result in temp6)
 8DD3 [04] 81        4397       rts                      ; Return from subroutine
                     4398  
                     4399  SHIFT23_CALCS:
 8DD4 [03] 450100    4400       ldhx    #TPS_range            ; Load Index register H:X with address of
                     4401                                ; first two bytes of TPS_range table
 8DD7 [04] 3580      4402       sthx    tmp1             ; Copy values into tmp1:tmp2 variables
 8DD9 [02] A607      4403       lda     #$7              ; Load accumulator with decimal 7
 8DDB [03] B782      4404       sta     tmp3             ; Copy value into tmp3 variable
 8DDD [03] B655      4405       lda     TPSp             ; Load accumulator with current TPS percent
 8DDF [03] B783      4406       sta     tmp4             ; Copy value into tmp4 variable
 8DE1 [05] CD8B79    4407       jsr     ORD_TABLE_FIND   ; jump to subroutine ORD_TABLE_FIND
                     4408                                ; (result in tmp5)
 8DE4 [01] 8C        4409       clrh                     ; Clear index register hi byte
 8DE5 [03] B684      4410       lda     tmp5             ; Load accumulator with result from
                     4411                                ; ORD_TABLE_FIND (tmp5)
 8DE7 [01] 97        4412       tax                      ; Copy it to index register Lo byte
 8DE8 [04] D60118    4413       lda     EPC_23,x         ; Load the accumulator with the value in
                     4414                                ; EPC_23 table, offset in index register
                     4415                                ; Lo byte(upper bin)
 8DEB [03] B783      4416       sta     tmp4             ; Copy it to the tmp4 variable
 8DED [01] 5A        4417       decx                     ; Decrement index reg Lo byte (move down 1 bin)
 8DEE [04] D60118    4418       lda     EPC_23,x         ; Load the accumulator with the value in
                     4419                                ; EPC_23 table, offset in index register
                     4420                                ; Lo byte(new bin value)
 8DF1 [03] B782      4421       sta     tmp3             ; Copy it to the tmp3 variable
 8DF3 [05] 4E5584    4422       mov     TPSp,tmp5        ; Move current TPS percent to tmp5 variable
 8DF6 [05] CD8B96    4423       jsr     lininterp        ; Jump to Lininterp subroutine
                     4424                                ; (result in temp6)
 8DF9 [04] 81        4425       rts                      ; Return from subroutine
                     4426  
                     4427  SHIFT34_CALCS:
 8DFA [03] 450100    4428       ldhx    #TPS_range            ; Load Index register H:X with address of
                     4429                                ; first two bytes of TPS_range table
 8DFD [04] 3580      4430       sthx    tmp1             ; Copy values into tmp1:tmp2 variables
 8DFF [02] A607      4431       lda     #$7              ; Load accumulator with decimal 7
 8E01 [03] B782      4432       sta     tmp3             ; Copy value into tmp3 variable
 8E03 [03] B655      4433       lda     TPSp             ; Load accumulator with current TPS percent
 8E05 [03] B783      4434       sta     tmp4             ; Copy value into tmp4 variable
 8E07 [05] CD8B79    4435       jsr     ORD_TABLE_FIND   ; jump to subroutine ORD_TABLE_FIND
                     4436                                ; (result in tmp5)
 8E0A [01] 8C        4437       clrh                     ; Clear index register hi byte
 8E0B [03] B684      4438       lda     tmp5             ; Load accumulator with result from
                     4439                                ; ORD_TABLE_FIND (tmp5)
 8E0D [01] 97        4440       tax                      ; Copy it to index register Lo byte
 8E0E [04] D60120    4441       lda     EPC_34,x         ; Load the accumulator with the value in
                     4442                                ; EPC_34 table, offset in index register
                     4443                                ; Lo byte(upper bin)
 8E11 [03] B783      4444       sta     tmp4             ; Copy it to the tmp4 variable
 8E13 [01] 5A        4445       decx                     ; Decrement index reg Lo byte (move down 1 bin)
 8E14 [04] D60120    4446       lda     EPC_34,x         ; Load the accumulator with the value in
                     4447                                ; EPC_34 table, offset in index register
                     4448                                ; Lo byte(new bin value)
 8E17 [03] B782      4449       sta     tmp3             ; Copy it to the tmp3 variable
 8E19 [05] 4E5584    4450       mov     TPSp,tmp5        ; Move current TPS percent to tmp5 variable
 8E1C [05] CD8B96    4451       jsr     lininterp        ; Jump to Lininterp subroutine
                     4452                                ; (result in temp6)
 8E1F [04] 81        4453       rts                      ; Return from subroutine
                     4454  
                     4455  M1_CALCS:
 8E20 [03] 450100    4456       ldhx    #TPS_range            ; Load Index register H:X with address of
                     4457                                ; first two bytes of TPS_range table
 8E23 [04] 3580      4458       sthx    tmp1             ; Copy values into tmp1:tmp2 variables
 8E25 [02] A607      4459       lda     #$07             ; Load accumulator with decimal 7
 8E27 [03] B782      4460       sta     tmp3             ; Copy value into tmp3 variable
 8E29 [03] B655      4461       lda     TPSp             ; Load accumulator with current TPS percent
 8E2B [03] B783      4462       sta     tmp4             ; Copy value into tmp4 variable
 8E2D [05] CD8B79    4463       jsr     ORD_TABLE_FIND   ; jump to subroutine ORD_TABLE_FIND
                     4464                                ; (result in tmp5)
 8E30 [01] 8C        4465       clrh                     ; Clear index register hi byte
 8E31 [03] B684      4466       lda     tmp5             ; Load accumulator with result from
                     4467                                ; ORD_TABLE_FIND (tmp5)
 8E33 [01] 97        4468       tax                      ; Copy it to index register Lo byte
 8E34 [04] D60128    4469       lda     EPC_M1,x         ; Load the accumulator with the value in
                     4470                                ; EPC_M1 table, offset in index register
                     4471                                ; Lo byte(upper bin)
 8E37 [03] B783      4472       sta     tmp4             ; Copy it to the tmp4 variable
 8E39 [01] 5A        4473       decx                     ; Decrement index reg Lo byte (move down 1 bin)
 8E3A [04] D60128    4474       lda     EPC_M1,x         ; Load the accumulator with the value in
                     4475                                ; EPC_M1 table, offset in index register


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 39
MC68HC908GP32 User Bootloader


                     4476                                ; Lo byte(new bin value)
 8E3D [03] B782      4477       sta     tmp3             ; Copy it to the tmp3 variable
 8E3F [05] 4E5584    4478       mov     TPSp,tmp5        ; Move current TPS percent to tmp5 variable
 8E42 [05] CD8B96    4479       jsr     lininterp        ; Jump to Lininterp subroutine
                     4480                                ; (result in temp6)
 8E45 [04] 81        4481       rts                      ; Return from subroutine
                     4482  
                     4483  ;****************************************************************************
                     4484  ; --------------------------- TCC Subroutine --------------------------------
                     4485  ;****************************************************************************
                     4486  
                     4487  TCC_CHKOFF:
                     4488  
                     4489  ;****************************************************************************
                     4490  ; - If the TCC is currently applied, or if application is in progress, check
                     4491  ;   to see if it still has permisives to remain applied or in progress.
                     4492  ;   If it does not, or if it is commanded off by a signal from the "TCCrel"
                     4493  ;   contacts of the joy stick, release it, otherwise, leave it applied or in
                     4494  ;   progress. If it is not applied, see if we have permissives to apply it,
                     4495  ;   and do so if we have a signal from the "TCCapp" contacts of the joy
                     4496  ;   stick. If the TCC application process is in progress, branch to the
                     4497  ;   appropriate section. Otherwise, leave it released.
                     4498  ;****************************************************************************
                     4499  
 8E46 [05] 090016    4500       brclr   tccrel,porta,TCC_CHKREL  ; If "tccrel" bit of Port A is clear,
                     4501                                        ; branch to TCC_CHKREL:
                     4502                                        ;(TCC release commanded)
 8E49 [05] 074413    4503       brclr   RPMtcc,trans,TCC_CHKREL  ; If "RPMtcc" bit of "trans" variable
                     4504                                        ; is clear, branch to TCC_CHKREL:
                     4505                                        ;(Min RPM permissive not met)
 8E4C [05] 0D4505    4506       brclr   D1D2,trans2,TCC_CHKON    ; If "D1D2"bit of "trans2 variable is
                     4507                                        ; clear, branch to TCC_CHKON:
                     4508                                        ;(not in Drive 1 or Drive 2)
 8E4F [05] 054402    4509       brclr   ClsThrt,trans,TCC_CHKON  ; If "ClsThrt" bit of "trans"
                     4510                                        ; variable is clear, branch to
                     4511                                        ; TCC_CHKON:
                     4512                                        ;(throttle not closed)
 8E52 [03] 200B      4513       bra     TCC_CHKREL               ; Branch to TCC_CHKREL:
                     4514                                        ;(in D1 or D2 and closed throttle)
                     4515  
                     4516  TCC_CHKON:
 8E54 [05] 0A4537    4517       brset   TCprog,trans2,TCC_APP      ; If "SSprog" bit of "trans2"
                     4518                                          ; variable is set, branch to
                     4519                                          ; TCC_APP:
                     4520                                          ;(TCC apply in progress)
 8E57 [05] 024568    4521       brset   TCCon,trans2,TCC_CHK_DONE  ; If "TCCon" bit of "trans2" variable
                     4522                                          ; is set, branch to TCC_CHK_DONE:
                     4523                                          ;(TCC applied, no longer in progress,
                     4524                                          ; skip over)
 8E5A [05] 0B001B    4525       brclr   tccapp,porta,SHIFT_CHK     ; If "tccapp" bit of Port A is
                     4526                                          ; clear, branch to SHIFT_CHK:
                     4527                                          ;(TCC apply commanded)
 8E5D [03] 2063      4528       bra     TCC_CHK_DONE               ; Branch to TCC_CHK_DONE:
                     4529                                          ;(No change for TCC, skip over)
                     4530  
                     4531  TCC_CHKREL:
 8E5F [05] 034560    4532       brclr   TCCon,trans2,TCC_CHK_DONE  ; If "TCCon" bit of "trans2" variable
                     4533                                          ; is clear, branch to TCC_CHK_DONE:
                     4534                                          ;(TCC not applied, skip over)
                     4535  
                     4536  
                     4537  ;****************************************************************************
                     4538  ; - Either the TCC has been commanded off by a signal from the TCC release
                     4539  ;   contacts on the joy stick, or we no longer have permissives for TCC
                     4540  ;   application. Release the TCC and clear the flag. Disable Decel Fuel
                     4541  ;   Cut permissive for the engine and clear the flag. De-energise the
                     4542  ;   Exhaust Brake control air, and engine secondary air solonoids, and clear
                     4543  ;   the flag. Clear the TCC apply in progress flag.
                     4544  ;****************************************************************************
                     4545  
                     4546  TCC_REL:
 8E62 [04] 1402      4547       bset    TCC,portc         ; Set "TCC" bit of Port C (TCC off)
 8E64 [04] 1345      4548       bclr    TCCon,trans2      ; Clear "TCCon" bit of "trans2" variable
 8E66 [04] 1161      4549       bclr    EPCrTCC,shift     ; Clear "EPCrTCC" bit of "shift" variable
 8E68 [04] 1361      4550       bclr    EPChTCC,shift     ; Clear "EPChTCC" bit of "shift" variable
 8E6A [04] 1B45      4551       bclr    TCprog,trans2     ; Clear "TCprog" bit of "trans2" variable
 8E6C [04] 1503      4552       bclr    DFCper,portd      ; Clear "DFCper" bit of Port D (DFC disabled)
 8E6E [04] 1545      4553       bclr    DFCon,trans2      ; Clear "DFCon" bit of "trans2" variable
 8E70 [04] 1802      4554       bset    ExhBrk,portc      ; Set "ExhBrk" bit of Port C (Exh Brk off)
 8E72 [04] 1745      4555       bclr    Brkon,trans2      ; Clear "Brkon" bit of "trans2" variable
 8E74 [04] 1F61      4556       bclr    Brkdel,shift      ; Clear "Brkdel" bit of "shift" variable
 8E76 [03] 204A      4557       bra     TCC_CHK_DONE      ; Branch to TCC_CHK_DONE:
                     4558  
                     4559  
                     4560  
                     4561  ;****************************************************************************
                     4562  ;   We have permissives for Torque Converter Clutch application, and an
                     4563  ;   input signal from the TCC apply contacts on the joy stick, so the
                     4564  ;   Torque Converter Clutch solonoid can be energised.
                     4565  ;
                     4566  ;   - Check to see if a shift is in progress. If it is, check to see if the
                     4567  ;     pressure rise timer has timed out. If both connditions are met, apply
                     4568  ;     the cluctch, set the pressure for TCC apply and let the shift sequence
                     4569  ;     continue. If both conditions are not met, procede with the TCC
                     4570  ;     application process.
                     4571  ;   - Set the "EPCrTCC" bit of "shift" variable, start the pressure rise
                     4572  ;     count down timer and set the "TCprog" bit of "trans2".
                     4573  ;   - When the pressure rise counter zeros, clear the "EPCrTCC" bit and set
                     4574  ;     the "EPChTCC" bit of "shift" variable. Change solonoid state and start
                     4575  ;     the pressure hold timer.
                     4576  ;   - When the pressure hold timer zeros, clear the "EPChTCC" bit of "shift"
                     4577  ;     variable and clear the "TCprog" bit of "trans2".
                     4578  ;   - EPC pressure is set in either the MAN2_EPC, or DRIVE_EPC sections.
                     4579  ;****************************************************************************
                     4580  
                     4581  SHIFT_CHK:
 8E78 [05] 094513    4582       brclr   SSprog,trans2,TCC_APP    ; If "SSprog" bit of "trans2"
                     4583                                        ; variable is clear, branch to
                     4584                                        ; TCC_APP:
                     4585                                        ;(gear change not in progress)
 8E7B [05] 046110    4586       brset   EPCrSS,shift,TCC_APP     ; If "EPCrSS" bit of "shift"
                     4587                                        ; variable is clear, branch to
                     4588                                        ; TCC_APP:
                     4589                                        ;(gear change not in progress but
                     4590                                        ; still on pressure rise)
 8E7E [04] 1502      4591       bclr    TCC,portc                ; Clear "TCC" bit of Port C (TCC on)
 8E80 [04] 1161      4592       bclr    EPCrTCC,shift            ; Clear "EPCrTCC" bit of "shift"
 8E82 [04] 1361      4593       bclr    EPChTCC,shift            ; Clear "EPChTCC" bit of "shift"
 8E84 [04] 1B45      4594       bclr    TCprog,trans2            ; Clear "TCprog" bit of "trans2"
 8E86 [04] 1245      4595       bset    tccon,trans2             ; Set "tccon" bit of "trans2"
 8E88 [03] 3F77      4596       clr     dfSel                    ; Clear "dfSel" variable
 8E8A [04] 1A77      4597       bset    selTCC,dfSel             ; Set "selTCC" bit of "dfSel"
                     4598                                        ;(EPC set for TCC apply)
 8E8C [03] 2034      4599       bra     TCC_CHK_DONE             ; Branch to TCC_CHK_DONE:
                     4600  
                     4601  TCC_APP:
 8E8E [05] 006112    4602       brset   EPCrTCC,shift,TCC_APP_A  ; If "EPCrTCC" bit of "shift" variable
                     4603                                        ; is set, branch to TCC_APP_A:
                     4604                                        ;(TCC/EPC rise in progress)
 8E91 [05] 026122    4605       brset   EPChTCC,shift,TCC_APP_B  ; If "EPChTCC" bit of "shift" variable
                     4606                                        ;is set, branch to TCC_APP_B:
 8E94 [04] 1061      4607       bset    EPCrTCC,shift     ; Set "EPCrTCC" bit of "shift" variable
 8E96 [04] C60132    4608       lda     EPC_rise          ; Load accumulator with value in "EPC_rise"
 8E99 [03] B7A1      4609       sta     TIMcnt            ; Copy to "TIMcnt"
 8E9B [04] 1A45      4610       bset    TCprog,trans2     ; Set "TCprog" bit of "trans2" variable
 8E9D [03] 3F77      4611       clr     dfSel             ; Clear "dfSel" variable


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 40
MC68HC908GP32 User Bootloader


 8E9F [04] 1A77      4612       bset    selTCC,dfSel      ; Set "selTCC" bit of "dfSel"
                     4613                                 ;(EPC set for TCC apply)
 8EA1 [03] 201F      4614       bra     TCC_CHK_DONE      ; Branch to TCC_CHK_DONE:
                     4615  
                     4616  TCC_APP_A:
 8EA3 [03] B6A1      4617       lda     TIMcnt            ; Load accumulator with value in "TIMcnt"
                     4618                                 ; variable
 8EA5 [03] 261B      4619       bne     TCC_CHK_DONE        ; If Z bit of CCR is clear, branch to
                     4620                                 ; TCC_CHK_DONE:
 8EA7 [04] 1161      4621       bclr    EPCrTCC,shift     ; Clear "EPCrTCC" bit of "shift" variable
 8EA9 [04] 1261      4622       bset    EPChTCC,shift     ; Set "EPChTCC" bit of "shift" variable
 8EAB [04] 1502      4623       bclr    TCC,portc         ; Clear "TCC" bit of Port C (TCC on)
 8EAD [04] 1245      4624       bset    tccon,trans2      ; Set "tccon" bit of "trans2" variable
 8EAF [04] C60133    4625       lda     EPC_hold          ; Load accumulator with value in "EPC_hold"
 8EB2 [03] B7A1      4626       sta     TIMcnt            ; Copy to "TIMcnt"
 8EB4 [03] 200C      4627       bra     TCC_CHK_DONE      ; Branch to TCC_CHK_DONE:
                     4628  
                     4629  TCC_APP_B:
 8EB6 [03] B6A1      4630       lda     TIMcnt            ; Load accumulator with value in "TIMcnt" var
 8EB8 [03] 2608      4631       bne     TCC_CHK_DONE      ; If Z bit of CCR is clear, branch to
                     4632                                 ; TCC_CHK_DONE:
 8EBA [04] 1361      4633       bclr    EPChTCC,shift     ; Clear "EPChTCC" bit of "shift" variable
 8EBC [04] 1B45      4634       bclr    TCprog,trans2     ; Clear "TCprog" bit of "trans2" variable
 8EBE [03] 3F77      4635       clr     dfSel             ; Clear "dfSel" variable
 8EC0 [04] 1077      4636       bset    selTO,dfSel       ; Set "selTO" bit of "dfSel"
                     4637                                 ;(EPC set for torque output)
                     4638  
                     4639  TCC_CHK_DONE:
 8EC2 [04] 81        4640       rts                       ; Return from subroutine
                     4641  
                     4642  
                     4643  ;****************************************************************************
                     4644  ; ----------------- DFC Enable/Exhaust Brake subroutine ---------------------
                     4645  ;****************************************************************************
                     4646  
                     4647  BRK_CHKOFF:
                     4648  
                     4649  ;****************************************************************************
                     4650  ; - Check to see if if permissives for Decel Fuel Cut Permitted, or exhaust
                     4651  ;   brake application are met. If they are not, or if they have been
                     4652  ;   commanded off by a signal from the "DFCdis" contacts of the DFC switch,
                     4653  ;   disable the DFC and release the Exhaust Brake. Otherwise,leave them
                     4654  ;   permitted/applied. If the permissives are met, and DFC is not currently
                     4655  ;   permitted, or if the Exhaust Brake is not applied, see if we have a
                     4656  ;   signal from the "DFCen" contacts of the DFC switch. Otherwise, leave
                     4657  ;   the DFC disabled and the Exhaust Brake released. If we enabled DFC,
                     4658  ;   start the Exhaust Brake delay timer to see if the "DFCen" contacts of
                     4659  ;   the DFC switch will remain closed for the set time of the "ExhBrkdel"
                     4660  ;   variable. If they do, apply the exhaust brake. Otherwise, leave it
                     4661  ;   released.
                     4662  ;****************************************************************************
                     4663  
 8EC3 [05] 050043    4664       brclr   DFCdis,porta,DFC_DIS     ; If "DFCdis" bit of Port A is clear,
                     4665                                        ; branch to DFC_DIS:
                     4666                                        ;(DFC prohibit and exhaust brake
                     4667                                        ; release commanded)
 8EC6 [05] 034540    4668       brclr   TCCon,trans2,DFC_DIS     ; If "TCCon" bit of "trans2" variable
                     4669                                        ; is clear, branch to DFC_DIS:
                     4670                                        ;(TCC not applied)
 8EC9 [05] 07443D    4671       brclr   RPMtcc,trans,DFC_DIS     ; If "RPMtcc" bit of "trans" variable
                     4672                                        ; is clear, branch to DFC_DIS:
                     4673                                        ;(Engine speed too low)
 8ECC [05] 05443A    4674       brclr   ClsThrt,trans,DFC_DIS    ; If "ClsThrt" bit of "trans" variable
                     4675                                        ; is clear, branch to DFC_DIS:
                     4676                                        ;(Not at closed throttle)
 8ECF [05] 0C4537    4677       brset   D1D2,trans2,DFC_DIS      ; If "D1D2"bit of "trans2" variable is
                     4678                                        ; set, branch to DFC_DIS:
                     4679                                        ;(In D2 or D1, no engine braking)
 8ED2 [05] 0D443B    4680       brclr   PSIbrk,trans,BRK_REL     ; If "PSIbrk" bit of "trans" variable
                     4681                                        ; is clear, branch to BRK_REL:
                     4682                                        ;(Exhaust pressure too high)
                     4683  
                     4684  
                     4685  DFC_CHKON:
 8ED5 [05] 084541    4686       brset   SSprog,trans2,BRK_CHK_DONE   ; If "SSprog" bit of "trans2"
                     4687                                            ; variable is set, branch to
                     4688                                            ; BRK_CHK_DONE:
                     4689                                            ;(gear change in progress)
 8ED8 [05] 0A453E    4690       brset   TCprog,trans2,BRK_CHK_DONE   ; If "TCprog" bit of "trans2"
                     4691                                        ; variable is set, branch to
                     4692                                        ; BRK_CHK_DONE:
                     4693                                        ;(TCC apply in progress)
 8EDB [05] 070009    4694       brclr   DFCen,porta,DFC_COM      ; If "DFCen" bit of Port A is clear,
                     4695                                        ; branch to DFC_COM:
                     4696                                        ;(DFC permissive or DFC permisive
                     4697                                        ; and exhaust brake commanded)
 8EDE [05] 0E6102    4698       brset   Brkdel,shift,CLR_DEL     ; If "Brkdel" bit of "shift" variable
                     4699                                        ; is set, branch to CLR_DEL:
 8EE1 [03] 2036      4700       bra     BRK_CHK_DONE             ; Branch to BRK_CHK_DONE:
                     4701                                        ;(no DFC/Exh Brk commanded, skip over)
                     4702  
                     4703  CLR_DEL:
 8EE3 [04] 1F61      4704       bclr    Brkdel,shift             ; Clear "Brkdel" bit of "shift"
                     4705                                        ;(Button was released before brake
                     4706                                        ; delay timer timed out, so clear the
                     4707                                        ; flag)
 8EE5 [03] 2032      4708       bra     BRK_CHK_DONE             ; Branch to BRK_CHK_DONE:
                     4709                                        ;(no DFC/Exh Brk commanded, skip over)
                     4710  
                     4711  DFC_COM:
                     4712  
                     4713  ;****************************************************************************
                     4714  ; - We have permissives for DFC/Exhaust Brake, and an input signal from the
                     4715  ;   Decel Fuel Cut Enable contacts on the joy stick. Enable the DFC
                     4716  ;   permissive and start the Exhaust Brake delay timer to see if the exhaust
                     4717  ;   brake application will be commanded.
                     4718  ;****************************************************************************
                     4719  
 8EE7 [05] 06452F    4720       brset   Brkon,trans2,BRK_CHK_DONE ; If "Brkon" bit of "trans2" variable
                     4721                                         ; is set, branch to BRK_CHK_DONE:
                     4722                                         ;(Exh brake already on, skip over)
 8EEA [05] 0E6110    4723       brset   Brkdel,shift,BRK_COM      ; If "Brkdel" bit of "shift"
                     4724                                         ; variable is set, branch to BRK_COM:
                     4725                                         ;(waiting to see if ExhBrk commanded)
 8EED [05] 044504    4726       brset   DFCon,trans2,DFC_DONE     ; If "DFCon" bit of "trans2" variable
                     4727                                         ; is set, branch to DFC_DONE:
                     4728                                         ;(DFC already permitted, skip over)
 8EF0 [04] 1403      4729       bset    DFCper,portd      ; Set "DFCper" bit of Port D (DFC permit)
 8EF2 [04] 1445      4730       bset    DFCon,trans2      ; Set "DFCon" bit of "trans2" variable
                     4731  
                     4732  DFC_DONE:
 8EF4 [04] C60137    4733       lda     ExBrk_del         ; Load accumulator with value in "ExBrk_del"
 8EF7 [03] B7A1      4734       sta     TIMcnt            ; Copy to "TIMcnt" variable
 8EF9 [04] 1E61      4735       bset    Brkdel,shift      ; Set "Brkdel" bit of "shift" variable
 8EFB [03] 201C      4736       bra     BRK_CHK_DONE      ; Branch to BRK_CHK_DONE:
                     4737  
                     4738  BRK_COM:
 8EFD [03] B6A1      4739       lda     TIMcnt            ; Load accumulator with value in "TIMcnt"
 8EFF [03] 2618      4740       bne     BRK_CHK_DONE      ; If Z bit of CCR is clear, branch to
                     4741                                 ; BRK_CHK_DONE:
                     4742  
                     4743  ;****************************************************************************
                     4744  ; - The "DFCen" switch has been depressed for the "ExhBrkdel" time period so
                     4745  ;   the control air, and engine secondary air solonoids can be energised,
                     4746  ;   the "Brkon" flag set, and "Brkdel" flag cleared.
                     4747  ;****************************************************************************


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 41
MC68HC908GP32 User Bootloader


                     4748  
 8F01 [04] 1902      4749       bclr    ExhBrk,portc      ; Clear "ExhBrk" bit of Port C (solonoids on)
 8F03 [04] 1645      4750       bset    Brkon,trans2      ; Set "Brkon" bit of "trans2" variable
 8F05 [04] 1F61      4751       bclr    Brkdel,shift      ; Clear "Brkdel" bit of "shift" variable
 8F07 [03] 2010      4752       bra     BRK_CHK_DONE      ; Branch to BRK_CHK_DONE:
                     4753  
                     4754  DFC_DIS:
                     4755  
                     4756  ;****************************************************************************
                     4757  ; - Either the DFC/Exhaust Brake has been commanded off by a signal from the
                     4758  ;   Decel Fuel Cut disable contacts on the joy stick, or we no longer have
                     4759  ;   permissives for DFC/Exhaust Brake application. Disable the DFC
                     4760  ;   permissive and clear the flag. De-energise the control air, and engine
                     4761  ;   secondary air solonoids, and clear the flag.
                     4762  ;****************************************************************************
                     4763  
 8F09 [05] 054504    4764       brclr   DFCon,trans2,BRK_REL     ; If "DFCon" bit of "trans2" variable
                     4765                                        ; is clear, branch to BRK_REL:
                     4766                                        ;(DFC already prohibited, skip over)
 8F0C [04] 1503      4767       bclr    DFCper,portd     ; Clear "DFCper" bit of Port D (DFC prohibit)
 8F0E [04] 1545      4768       bclr    DFCon,trans2     ; Clear "DFCon" bit of "trans2" variable
                     4769  
                     4770  BRK_REL:
 8F10 [05] 074506    4771       brclr   Brkon,trans2,BRK_CHK_DONE ; If "Brkon" bit of "trans2" variable
                     4772                                         ; is clear, branch to BRK_CHK_DONE:
                     4773                                         ;(Exhaust brake not on, skip over)
 8F13 [04] 1802      4774       bset    ExhBrk,portc     ; Set "ExhBrk" bit of Port C (ExhBrk off)
 8F15 [04] 1745      4775       bclr    Brkon,trans2     ; Clear "Brkon" bit of "trans2" variable
 8F17 [04] 1F61      4776       bclr    Brkdel,shift     ; Clear "Brkdel" bit of "shift" variable
                     4777  
                     4778  BRK_CHK_DONE:
 8F19 [04] 81        4779       rts                      ; Return from subroutine
                     4780  
                     4781  
                     4782  ;****************************************************************************
                     4783  ; - Manual 1, Drive 1 solonoid group
                     4784  ;****************************************************************************
                     4785  
                     4786  M1D1_SOLS:
 8F1A [04] 1302      4787       bclr    SS1,portc         ; Clear "SS1" bit of Port C,(SS1 on)
 8F1C [04] 1002      4788       bset    SS2,portc         ; Set "SS2" bit of Port C,(SS2 off)
 8F1E [04] 1702      4789       bclr    CCS,portc         ; Clear "CCS" bit of Port C,(CCS on)
 8F20 [04] 1045      4790       bset    CCSon,trans2      ; Set "CCSon" bit of "trans2" variable
 8F22 [04] 81        4791       rts                       ; Return from subroutine
                     4792  
                     4793  ;****************************************************************************
                     4794  ; - Manual 2, solonoid group
                     4795  ;****************************************************************************
                     4796  
                     4797  M2_SOLS:
 8F23 [04] 1202      4798       bset    SS1,portc        ; Set "SS1" bit of Port C,(SS1 off)
 8F25 [04] 1002      4799       bset    SS2,portc        ; Set "SS2" bit of Port C,(SS2 off)
 8F27 [04] 1702      4800       bclr    CCS,portc        ; Clear "CCS" bit of Port C,(CCS on)
 8F29 [04] 1D45      4801       bclr    D1D2,trans2      ; Clear "D1D2" bit of "trans2" variable
 8F2B [04] 1045      4802       bset    CCSon,trans2     ; Set "CCSon" bit of "trans2" variable
 8F2D [04] 81        4803       rts                      ; Return from subroutine
                     4804  
                     4805  ;****************************************************************************
                     4806  ; - Drive 2, solonoid group
                     4807  ;****************************************************************************
                     4808  
                     4809  D2_SOLS:
 8F2E [04] 1302      4810       bclr    SS1,portc        ; Clear "SS1" bit of Port C,(SS1 on)
 8F30 [04] 1102      4811       bclr    SS2,portc        ; Clear "SS2" bit of Port C,(SS2 on)
 8F32 [04] 1702      4812       bclr    CCS,portc        ; Clear "CCS" bit of Port C,(CCS on)
 8F34 [04] 1C45      4813       bset    D1D2,trans2      ; Set "D1D2" bit of "trans2" variable
 8F36 [04] 1045      4814       bset    CCSon,trans2     ; Set "CCSon" bit of "trans2" variable
 8F38 [04] 81        4815       rts                      ; Return from subroutine
                     4816  
                     4817  ;****************************************************************************
                     4818  ; - Drive 3, solonoid group
                     4819  ;****************************************************************************
                     4820  
                     4821  D3_SOLS:
 8F39 [04] 1202      4822       bset    SS1,portc        ; Set "SS1" bit of Port C,(SS1 off)
 8F3B [04] 1102      4823       bclr    SS2,portc        ; Clear "SS2" bit of Port C,(SS2 on)
 8F3D [04] 1702      4824       bclr    CCS,portc        ; Clear "CCS" bit of Port C,(CCS on)
 8F3F [04] 1D45      4825       bclr    D1D2,trans2      ; Clear "D1D2" bit of "trans2" variable
 8F41 [04] 1045      4826       bset    CCSon,trans2     ; Set "CCSon" bit of "trans2" variable
 8F43 [04] 81        4827       rts                      ; Return from subroutine
                     4828  
                     4829  ;****************************************************************************
                     4830  ; - Drive 4, solonoid group
                     4831  ;****************************************************************************
                     4832  
                     4833  D4_SOLS:
 8F44 [04] 1202      4834       bset    SS1,portc        ; Set "SS1" bit of Port C,(SS1 off)
 8F46 [04] 1002      4835       bset    SS2,portc        ; Set "SS2" bit of Port C,(SS2 off)
 8F48 [04] 1602      4836       bset    CCS,portc        ; Set "CCS" bit of Port C,(CCS off)
 8F4A [04] 1D45      4837       bclr    D1D2,trans2      ; Clear "D1D2" bit of "trans2" variable
 8F4C [04] 1145      4838       bclr    CCSon,trans2     ; Clear "CCSon" bit of "trans2" variable
 8F4E [04] 81        4839       rts                      ; Return from subroutine
                     4840  
                     4841  ;****************************************************************************
                     4842  ; - TCC release, DFC prohibit, Exhaust brake off group
                     4843  ;****************************************************************************
                     4844  
                     4845  TCC_BRK_OFF:
 8F4F [04] 1402      4846       bset    TCC,portc        ; Set "TCC" bit of Port C (TCC off)
 8F51 [04] 1345      4847       bclr    TCCon,trans2     ; Clear "TCCon" bit of "trans2" variable
 8F53 [04] 1161      4848       bclr    EPCrTCC,shift    ; Clear "EPCrTCC" bit of "shift" variable
 8F55 [04] 1361      4849       bclr    EPChTCC,shift    ; Clear "EPChTCC" bit of "shift" variable
 8F57 [04] 1B45      4850       bclr    TCprog,trans2    ; Clear "TCprog" bit of "trans2" variable
 8F59 [04] 1503      4851       bclr    DFCper,portd     ; Clear "DFCper" bit of Port D (DFC prohibit)
 8F5B [04] 1545      4852       bclr    DFCon,trans2     ; Clear "DFCon" bit of "trans2" variable
 8F5D [04] 1802      4853       bset    ExhBrk,portc     ; Set "ExhBrk" bit of Port C (ExhBrk off)
 8F5F [04] 1745      4854       bclr    Brkon,trans2     ; Clear "Brkon" bit of "trans2" variable
 8F61 [04] 1F61      4855       bclr    Brkdel,shift     ; Clear "Brkdel" bit of "shift" variable
 8F63 [04] 81        4856       rts                      ; Return from subroutine
                     4857  
                     4858  ;****************************************************************************
                     4859  ; - Cancel shift group
                     4860  ;****************************************************************************
                     4861  
                     4862  CANC_SHFT:
 8F64 [04] 1945      4863       bclr    SSprog,trans2     ; Clear "SSprog" bit of "trans2" variable
 8F66 [04] 1B45      4864       bclr    TCprog,trans2     ; Clear "TCprog" bit of "trans2" variable
 8F68 [03] 3F61      4865       clr     shift             ; Clear "shift" variable
                     4866                                 ;("EPCrTCC", "EPChTCC", EPCrSS", "EPChSS",
                     4867                                 ; "SS1del", "CCSdel" "SSsdel", "Brkdel")
 8F6A [03] 3FA1      4868       clr     TIMcnt            ; Clear "TIMcnt" variable
 8F6C [04] 81        4869       rts                       ; Return from subroutine
                     4870  
                     4871  
                     4872  ;****************************************************************************
                     4873  ; - First gear variable group
                     4874  ;****************************************************************************
                     4875  
                     4876  GEAR1_VARS:
 8F6D [04] 6E0146    4877       mov     #first,gearcnt       ; Move value #first into "gearcnt" var
 8F70 [04] 6E016C    4878       mov     #first,gearcnt_prv   ; Move value #first into "gearcnt_prv" var
 8F73 [04] 6E016D    4879       mov     #first,gear_cur      ; Move value #first into "gear_cur" var
 8F76 [04] 6E016E    4880       mov     #first,gear_com      ; Move value #first into "gear_com" var
 8F79 [04] 81        4881       rts                          ; Return from subroutine
                     4882  
                     4883  ;****************************************************************************


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 42
MC68HC908GP32 User Bootloader


                     4884  ; - Second gear variable group
                     4885  ;****************************************************************************
                     4886  
                     4887  GEAR2_VARS:
 8F7A [04] 6E0246    4888       mov     #second,gearcnt      ; Move value #second into "gearcnt" var
 8F7D [04] 6E026C    4889       mov     #second,gearcnt_prv  ; Move value #second into "gearcnt_prv" var
 8F80 [04] 6E026D    4890       mov     #second,gear_cur     ; Move value #second into "gear_cur" var
 8F83 [04] 6E026E    4891       mov     #second,gear_com     ; Move value #second into "gear_com" var
 8F86 [04] 81        4892       rts                          ; Return from subroutine
                     4893  
                     4894  ;****************************************************************************
                     4895  ; - Third gear variable group
                     4896  ;****************************************************************************
                     4897  
                     4898  GEAR3_VARS:
 8F87 [04] 6E0346    4899       mov     #third,gearcnt      ; Move value #third into "gearcnt" variable
 8F8A [04] 6E036C    4900       mov     #third,gearcnt_prv  ; Move value #third into "gearcnt_prv" var
 8F8D [04] 6E036D    4901       mov     #third,gear_cur     ; Move value #third into "gear_cur" variable
 8F90 [04] 6E036E    4902       mov     #third,gear_com     ; Move value #third into "gear_com" variable
 8F93 [04] 81        4903       rts                         ; Return from subroutine
                     4904  
                     4905  ;****************************************************************************
                     4906  ; - Forth gear variable group
                     4907  ;****************************************************************************
                     4908  
                     4909  GEAR4_VARS:
 8F94 [04] 6E0446    4910       mov     #forth,gearcnt      ; Move value #forth into "gearcnt" variable
 8F97 [04] 6E046C    4911       mov     #forth,gearcnt_prv  ; Move value #forth into "gearcnt_prv" var
 8F9A [04] 6E046D    4912       mov     #forth,gear_cur     ; Move value #forth into "gear_cur" variable
 8F9D [04] 6E046E    4913       mov     #forth,gear_com     ; Move value #forth into "gear_com" variable
 8FA0 [04] 81        4914       rts                         ; Return from subroutine
                     4915  
                     4916  
                     4917  ;***************************************************************************
                     4918  ; - Flash Burn routine goes here
                     4919  ;***************************************************************************
                     4920  
 8FA1                4921       include "burner.asm"         ; Include Flash Burner routine
                     4922  ;*****************************************************************************
                     4923  ; Meagasquirt Flash page erase and programming routines
                     4924  ; heavily based on the routines from boot_r12.asm
                     4925  ;
                     4926  ;*****************************************************************************
                     4927  
                     4928  ;-------------------------------------------------------------------------------
                     4929  ; burnConst: is a PCC compatible FLASH Programming Routine - I think
                     4930  ;-------------------------------------------------------------------------------
                     4931  
                     4932  burnConst:
 8FA1 [03] 45E100    4933          ldhx    #ms_rf_start_f
 8FA4 [04] 359C      4934          sthx    burnDst
 8FA6 [05] CD8FDA    4935          jsr     ms_EraseFlash           ; Erase the first 128 byte block
 8FA9 [04] 559C      4936          ldhx    burnDst
 8FAB [02] AF40      4937          aix     #64T
 8FAD [02] AF40      4938          aix     #64T
 8FAF [04] 359C      4939          sthx    burnDst
 8FB1 [05] CD8FDA    4940          jsr     ms_EraseFlash           ; and the second
                     4941  
 8FB4 [03] 45E100    4942          ldhx    #ms_rf_start_f
 8FB7 [04] 359C      4943          sthx    burnDst
 8FB9 [03] 4500B0    4944          ldhx    #ms_rf_start
 8FBC [04] 359A      4945          sthx    burnSrc
                     4946  
 8FBE [02] A600      4947          lda     #$00                    ; burn the lot 256 bytes in all
 8FC0 [03] B79E      4948          sta     burncount
                     4949  
 8FC2 [01] 8C        4950          clrh
 8FC3 [01] 5F        4951          clrx
 8FC4 [03] CC8FE8    4952          jmp     ms_ProgramFlash
                     4953  
                     4954  burnByte:
                     4955  ; byte to be burnt on stack, together with destination address
                     4956  ; Stack
                     4957  ;       byte
                     4958  ;       dest low
                     4959  ;       dest high
                     4960  ;
 8FC7 [02] 86        4961          pula
 8FC8 [03] B794      4962          sta     tmp21
 8FCA [03] 450094    4963          ldhx    #tmp21
 8FCD [04] 359A      4964          sthx    burnSrc
 8FCF [02] 88        4965          pulx
 8FD0 [02] 8A        4966          pulh
 8FD1 [04] 359C      4967          sthx    burnDst
 8FD3 [02] A601      4968          lda     #$01                    ; burn 1 byte
 8FD5 [03] B79E      4969          sta     burncount
 8FD7 [03] CC8FE8    4970          jmp     ms_ProgramFlash
                     4971  
                     4972  ;-------------------------------------------------------------------------------
                     4973  
                     4974  
                     4975  ;*  Single Flash Page Erase Subroutine  ======================================
                     4976  ;*
                     4977  ; This subroutine will copy the Flash Erase algorithm into RAM and execute
                     4978  ; it to erase the page starting at address pointers "burnDst"
                     4979  ;
                     4980  ms_EraseFlash:
 8FDA [03] 450031    4981          ldhx    #ms_EraseRamSize                ; initialize pointer
                     4982  ms_EraseFlash1:
 8FDD [04] D68FF5    4983          lda     ms_MassErase-1,x                ; get program from Flash
 8FE0 [04] D701EC    4984          sta     ram_exec-1,x                    ; copy into RAM
 8FE3 [03] 5BF8      4985          dbnzx   ms_EraseFlash1                  ; decrement pointer and loop back until done
 8FE5 [03] CC01ED    4986          jmp     ram_exec                        ; execute Flash Mass Erase algorithm from RAM
                     4987  
                     4988  ;*  Flash Program Subroutine  ================================================
                     4989  ;*
                     4990  ; This subroutine will copy the Flash Program algorithm into RAM and execute it
                     4991  ; to program 'burncount' bytes from the address pointed to by 'burnSrc' to the
                     4992  ; address pointed to by "burnDst"
                     4993  ;
                     4994  ms_ProgramFlash:
 8FE8 [03] 45004A    4995          ldhx    #ms_ProgramRamSize              ; initialize pointer
                     4996  ms_ProgramFlash1:
 8FEB [04] D6901B    4997          lda     ms_Delay-1,x                    ; get program from Flash
 8FEE [04] D701EC    4998          sta     ram_exec-1,x                    ; copy into RAM
 8FF1 [03] 5BF8      4999          dbnzx   ms_ProgramFlash1                ; decrement pointer and loop back until done
 8FF3 [03] CC01F8    5000          jmp     {ram_exec+ms_ProgramRam}
                     5001  ;
                     5002  ;
                     5003  ;*  Flash Erase Subroutine  ==================================================
                     5004  ;*
                     5005  ;*  This subroutine performs a single Page Erase @ BurnDst
                     5006  ;*  This subroutine has been
                     5007  ;*  tuned for a bus speed of 7.3728 MHz.
                     5008  ;*  This subroutine is copied into and executed from RAM.
                     5009  ;*
                     5010  ms_MassErase:
 8FF6 [04] 559C      5011          ldhx    burnDst            ; initialize pointer to Flash memory address
                     5012  
                     5013  ;   Set ERASE, read the Flash Block Protect Register and write any data into Flash page.
                     5014  ;
 8FF8 [02] A602      5015          lda     #{ERASE}                    ; set ERASE control bit
 8FFA [04] C7FE08    5016          sta     flcr                        ;  in Flash Control Register
 8FFD [04] C6FF7E    5017          lda     flbpr                       ; read from Flash Block Protect Register
 9000 [02] F7        5018          sta     ,x                          ; write any data to address within page
                     5019  ;


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 43
MC68HC908GP32 User Bootloader


                     5020  ;   Wait for >10us, then set HVEN.
                     5021  ;
 9001 [02] A601      5022          lda     #1                          ; wait
 9003 [04] AD17      5023          bsr     ms_delay                       ;  for 11.7us
 9005 [02] A60A      5024          lda     #{ERASE | HVEN}             ; set HVEN control bit
 9007 [04] C7FE08    5025          sta     flcr                        ;  in Flash Control Register
                     5026  ;
                     5027  ;   Wait for >1ms, then clear ERASE.
                     5028  ;
 900A [02] A664      5029          lda     #100T                        ; wait
 900C [04] AD0E      5030          bsr     ms_delay                       ;  for 1.005ms
 900E [02] A608      5031          lda     #{HVEN}                     ; clear ERASE control bit
 9010 [04] C7FE08    5032          sta     flcr                        ;  in Flash Control Register
                     5033  ;
                     5034  ;   Wait for >5us, then clear HVEN.
                     5035  ;
 9013 [02] A601      5036          lda     #1                          ; wait
 9015 [04] AD05      5037          bsr     ms_delay                       ;  for 11.7us
 9017 [01] 4F        5038          clra                                ; clear HVEN control bit
 9018 [04] C7FE08    5039          sta     flcr                        ;  in Flash Control Register
                     5040  
 901B [04] 81        5041          rts                                 ; return
                     5042  
                     5043  
                     5044  ;*  Delay Subroutine  =======================================================================
                     5045  ;*
                     5046  ;*  This subroutine performs a simple software delay loop based upon the value passed in ACC.
                     5047  ;*  The following timing calculation applies:
                     5048  ;*
                     5049  ;*              delay = ((ACC * 74) + 12) (tcyc)
                     5050  ;*
                     5051  ;*  Calling convention:
                     5052  ;*
                     5053  ;*      lda     data
                     5054  ;*      jsr     delay
                     5055  ;*
                     5056  ;*  Returns:    nothing
                     5057  ;*
                     5058  ;*  Changes:    ACC
                     5059  ;*
                     5060  ms_Delay:
 901C [02] 87        5061          psha                                ; [2] save outer delay loop parameter
                     5062  ms_Delay1:
 901D [02] A622      5063          lda     #22                         ; [2] initialize inner delay loop counter
                     5064  ms_Delay2:
 901F [03] 4BFE      5065          dbnza   ms_Delay2                      ; [3] decrement inner delay loop counter
 9021 [06] 9E6B01F8  5066          dbnz    1,sp,ms_Delay1                 ; [6] decrement outer delay loop counter
 9025 [02] 86        5067          pula                                ; [2] deallocate local variable
 9026 [04] 81        5068          rts                                 ; [4] return
                     5069  
 9027                5070  ms_EraseRamSize:   equ     {*-ms_MassErase}
 9027                5071  ms_ProgramRam:     equ     {*-ms_Delay}
                     5072  
                     5073  ;*  Flash Program Subroutine  ===============================================================
                     5074  ;*
                     5075  ;*  This subroutine controls the Flash programming sequence.
                     5076  
                     5077  ms_FlashProgram:
                     5078  
                     5079  ms_FlashProgram1:
                     5080  
                     5081  ;   Set PGM, read the Flash Block Protect Register and write anywhere in desired Flash row.
                     5082  ;
 9027 [02] A601      5083          lda     #{PGM}                      ; set PGM control bit
 9029 [04] C7FE08    5084          sta     flcr                        ;  in Flash Control Register
 902C [04] C6FF7E    5085          lda     flbpr                       ; read from Flash Block Protect Register
 902F [04] 559C      5086          ldhx    burnDst
 9031 [02] F7        5087          sta     ,x                   ; write any data to first Flash address
                     5088  ;
                     5089  ;   Wait for >10us, then set HVEN.
 9032 [02] A601      5090          lda     #1                          ; wait
 9034 [04] ADE6      5091          bsr     ms_delay                       ;  for 11.7us
 9036 [02] A609      5092          lda     #{PGM | HVEN}               ; set HVEN control bit
 9038 [04] C7FE08    5093          sta     flcr                        ;  in Flash Control Register
                     5094  ;
                     5095  ;   Wait for >5us.
 903B [02] A601      5096          lda     #1                          ; wait
 903D [04] ADDD      5097          bsr     ms_delay                       ;  for 11.7us
                     5098  ;
                     5099  ;   Write data to Flash and wait for 30 - 40us.
 903F [04] 559A      5100          ldhx    burnsrc
 9041 [02] F6        5101          lda     ,x                   ; get data byte
 9042 [04] 559C      5102          ldhx    burndst
 9044 [02] F7        5103          sta     ,x                   ; write data to Flash
 9045 [02] A603      5104          lda     #3                          ; wait
 9047 [04] ADD3      5105          bsr     ms_delay                       ;  for 31.7us
                     5106  ;
                     5107  ;   Clear PGM.
 9049 [02] A608      5108          lda     #{HVEN}                     ; clear PGM
 904B [04] C7FE08    5109          sta     flcr                        ;  in Flash Control Register
                     5110  ;
                     5111  ;   Wait for >5us, then clear HVEN.
 904E [02] A601      5112          lda     #1                          ; wait
 9050 [04] ADCA      5113          bsr     ms_delay                       ;  for 11.7us
 9052 [01] 4F        5114          clra                                ; clear HVEN control bit
 9053 [04] C7FE08    5115          sta     flcr                        ;  in Flash Control Register
                     5116  ;
                     5117  ;   Advance destination pointer and decrement data counter.
                     5118  ;
                     5119  ms_FlashProgram2:
 9056 [04] 559A      5120          ldhx    burnsrc
 9058 [02] AF01      5121          aix     #1                          ; advance source pointer
 905A [04] 359A      5122          sthx    BurnSrc
 905C [04] 559C      5123          ldhx    burndst
 905E [02] AF01      5124          aix     #1                          ; advance destination pointer
 9060 [04] 359C      5125          sthx    BurnDst
 9062 [05] 3B9EC2    5126          dbnz    burncount,ms_FlashProgram1  ; decrement counter and loop
                     5127                                              ; back if not done.
 9065 [04] 81        5128          rts                                 ; return
                     5129  
 9066                5130  ms_ProgramRamSize: equ     {*-ms_Delay}
                     5131  
                     5132  
                     5133  
                     5134  ;****************************************************************************
                     5135  ;-------------------Constants not possible to burn--------------------------
                     5136  ;****************************************************************************
                     5137  
 E000                5138          org     $E000      ; (57344)
                     5139  
                     5140  
                     5141  REVNUM:
 E000      14        5142          db      20T     ; Revision 1.0
                     5143  
 E001      202A2A20  5144  Signature db 32T,'** V12.00 Embedded Code by RJH **'
           5631322E 
           30302045 
           6D626564 
           64656420 
           436F6465 
           20627920 
           524A4820 
           2A2A 
                     5145  
                     5146  
                     5147  ;****************************************************************************


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 44
MC68HC908GP32 User Bootloader


                     5148  ; - Flash Configuration Tables and Constants (copied into RAM at start up)
                     5149  ;****************************************************************************
                     5150  
 E100                5151          org     $E100      ; SE100 to $E1C0 (57600 to 57792)
                     5152  
                     5153  ms_rf_start_f:
                     5154  
                     5155  ;****************************************************************************
                     5156  ; - First group of 64 bytes
                     5157  ;****************************************************************************
                     5158  
                     5159  ; - TO_table, EPC duty factor 0-255("df", function of "KPA" and "RPM")
                     5160                        ;       (KPA,RPM)
 E100      EB        5161       db      235T     ; TO_table(0,0)
 E101      E9        5162       db      233T     ; TO_table(0,1)
 E102      E8        5163       db      232T     ; TO_table(0,2)
 E103      E7        5164       db      231T     ; TO_table(0,3)
 E104      E7        5165       db      231T     ; TO_table(0,4)
 E105      E7        5166       db      231T     ; TO_table(0,5)
 E106      E8        5167       db      232T     ; TO_table(0,6)
 E107      E9        5168       db      233T     ; TO_table(0,7)
 E108      E9        5169       db      233T     ; TO_table(1,0)
 E109      E6        5170       db      230T     ; TO_table(1,1)
 E10A      E4        5171       db      228T     ; TO_table(1,2)
 E10B      E3        5172       db      227T     ; TO_table(1,3)
 E10C      E3        5173       db      227T     ; TO_table(1,4)
 E10D      E3        5174       db      227T     ; TO_table(1,5)
 E10E      E4        5175       db      228T     ; TO_table(1,6)
 E10F      E5        5176       db      229T     ; TO_table(1,7)
 E110      E8        5177       db      232T     ; TO_table(2,0)
 E111      E3        5178       db      227T     ; TO_table(2,1)
 E112      E1        5179       db      225T     ; TO_table(2,2)
 E113      DF        5180       db      223T     ; TO_table(2,3)
 E114      DF        5181       db      223T     ; TO_table(2,4)
 E115      DF        5182       db      223T     ; TO_table(2,5)
 E116      E0        5183       db      224T     ; TO_table(2,6)
 E117      E1        5184       db      225T     ; TO_table(2,7)
 E118      E7        5185       db      231T     ; TO_table(3,0)
 E119      E1        5186       db      225T     ; TO_table(3,1)
 E11A      DC        5187       db      220T     ; TO_table(3,2)
 E11B      DC        5188       db      220T     ; TO_table(3,3)
 E11C      DC        5189       db      220T     ; TO_table(3,4)
 E11D      DC        5190       db      220T     ; TO_table(3,5)
 E11E      DD        5191       db      221T     ; TO_table(3,6)
 E11F      DE        5192       db      222T     ; TO_table(3,7)
 E120      E4        5193       db      228T     ; TO_table(4,0)
 E121      DC        5194       db      220T     ; TO_table(4,1)
 E122      D6        5195       db      214T     ; TO_table(4,2)
 E123      D4        5196       db      212T     ; TO_table(4,3)
 E124      D4        5197       db      212T     ; TO_table(4,4)
 E125      D4        5198       db      212T     ; TO_table(4,5)
 E126      D5        5199       db      213T     ; TO_table(4,6)
 E127      D6        5200       db      214T     ; TO_table(4,7)
 E128      E1        5201       db      225T     ; TO_table(5,0)
 E129      D6        5202       db      214T     ; TO_table(5,1)
 E12A      CD        5203       db      205T     ; TO_table(5,2)
 E12B      C7        5204       db      199T     ; TO_table(5,3)
 E12C      C7        5205       db      199T     ; TO_table(5,4)
 E12D      C7        5206       db      199T     ; TO_table(5,5)
 E12E      CA        5207       db      202T     ; TO_table(5,6)
 E12F      CC        5208       db      204T     ; TO_table(5,7)
 E130      DF        5209       db      223T     ; TO_table(6,0)
 E131      D1        5210       db      209T     ; TO_table(6,1)
 E132      BD        5211       db      189T     ; TO_table(6,2)
 E133      B7        5212       db      183T     ; TO_table(6,3)
 E134      B7        5213       db      183T     ; TO_table(6,4)
 E135      B7        5214       db      183T     ; TO_table(6,5)
 E136      BA        5215       db      186T     ; TO_table(6,6)
 E137      BD        5216       db      189T     ; TO_table(6,7)
 E138      DC        5217       db      220T     ; TO_table(7,0)
 E139      C7        5218       db      199T     ; TO_table(7,1)
 E13A      AD        5219       db      173T     ; TO_table(7,2)
 E13B      A1        5220       db      161T     ; TO_table(7,3)
 E13C      A1        5221       db      161T     ; TO_table(7,4)
 E13D      A1        5222       db      161T     ; TO_table(7,5)
 E13E      A6        5223       db      166T     ; TO_table(7,6)
 E13F      AD        5224       db      173T     ; TO_table(7,7)
                     5225  
                     5226  ;****************************************************************************
                     5227  ; - Second group of 64 bytes
                     5228  ;****************************************************************************
                     5229  
                     5230  ; - RPM bins for 2D interpolation of "TO" table(RPM_range:)
                     5231  
 E140      14        5232       db      20T     ; RPM_range[0] 400 RPM
 E141      32        5233       db      50T     ; RPM_range[1] 1000 RPM
 E142      46        5234       db      70T     ; RPM_range[2] 1400 RPM
 E143      5A        5235       db      90T     ; RPM_range[3] 1800 RPM
 E144      73        5236       db      115T    ; RPM_range[4] 2300 RPM
 E145      87        5237       db      135T    ; RPM_range[5] 2700 RPM
 E146      9B        5238       db      155T    ; RPM_range[6] 3100 RPM
 E147      AF        5239       db      175T    ; RPM_range[7] 3500 RPM
                     5240  
                     5241  ; - KPA bins for 2D interpolation of "TO" table(KPA_range:)
                     5242  
 E148      1E        5243       db      30T     ; KPA_range[0] ~21.3" vacuum
 E149      28        5244       db      40T     ; KPA_range[1] ~18.3" vacuum
 E14A      32        5245       db      50T     ; KPA_range[2] ~15.4" vacuum
 E14B      3C        5246       db      60T     ; KPA_range[3] ~12.4" vacuum
 E14C      46        5247       db      70T     ; KPA_range[4] ~9.5" vacuum
 E14D      50        5248       db      80T     ; KPA_range[5] ~6.5" vacuum
 E14E      5A        5249       db      90T     ; KPA_range[6] ~3.5" vacuum
 E14F      64        5250       db      100T    ; KPA_range[7] ~0.3" vacuum
                     5251  
                     5252  ; - TPS bins for 2D interpolation of EPC tables(TPS_range:)
                     5253  
 E150      00        5254       db     0T       ; TPS_range[0] 0% throttle opening
 E151      0A        5255       db     10T      ; TPS_range[1] 10% throttle opening
 E152      14        5256       db     20T      ; TPS_range[2] 20% throttle opening
 E153      1E        5257       db     30T      ; TPS_range[3] 30% throttle opening
 E154      28        5258       db     40T      ; TPS_range[4] 40% throttle opening
 E155      32        5259       db     50T      ; TPS_range[5] 50% throttle opening
 E156      4B        5260       db     75T      ; TPS_range[6] 75% throttle opening
 E157      64        5261       db     100T     ; TPS_range[7] 100% throttle opening
                     5262  
                     5263  ; - EPC_stall bins, EPC duty factor 0-255("df", function of "TPSp")
                     5264  
 E158      EB        5265       db     235T     ; EPC_stall[0]
 E159      E3        5266       db     227T     ; EPC_stall[1]
 E15A      D8        5267       db     216T     ; EPC_stall[2]
 E15B      BF        5268       db     191T     ; EPC_stall[3]
 E15C      85        5269       db     133T     ; EPC_stall[4]
 E15D      5B        5270       db     91T      ; EPC_stall[5]
 E15E      34        5271       db     52T      ; EPC_stall[6]
 E15F      27        5272       db     39T      ; EPC_stall[7]
                     5273  
                     5274  ; - EPC_12 shift bins, EPC duty factor 0-255("df", function of "TPSp")
                     5275  
 E160      EB        5276       db     235T     ; EPC_12[0]
 E161      DC        5277       db     220T     ; EPC_12[1]
 E162      D2        5278       db     210T     ; EPC_12[2]
 E163      AA        5279       db     170T     ; EPC_12[3]
 E164      78        5280       db     120T     ; EPC_12[4]
 E165      64        5281       db     100T     ; EPC_12[5]
 E166      32        5282       db     50T      ; EPC_12[6]
 E167      23        5283       db     35T      ; EPC_12[7]


MS_TECA_TS.asm         Assembled with CASM08Z  9/28/12  5:51:01 PM  PAGE 45
MC68HC908GP32 User Bootloader


                     5284  
                     5285  ; - EPC_23 shift bins, EPC duty factor 0-255("df", function of "TPSp")
                     5286  
 E168      EB        5287       db     235T     ; EPC_23[0]
 E169      C8        5288       db     200T     ; EPC_23[1]
 E16A      AA        5289       db     170T     ; EPC_23[2]
 E16B      78        5290       db     120T     ; EPC_23[3]
 E16C      5B        5291       db     91T      ; EPC_23[4]
 E16D      40        5292       db     64T      ; EPC_23[5]
 E16E      34        5293       db     52T      ; EPC_23[6]
 E16F      27        5294       db     39T      ; EPC_23[7]
                     5295  
                     5296  ; - EPC_34 shift bins, EPC duty factor 0-255("df", function of "TPSp")
                     5297  
 E170      EB        5298       db     235T     ; EPC_34[0]
 E171      B9        5299       db     185T     ; EPC_34[1]
 E172      87        5300       db     135T     ; EPC_34[2]
 E173      55        5301       db     85T      ; EPC_34[3]
 E174      40        5302       db     64T      ; EPC_34[4]
 E175      34        5303       db     52T      ; EPC_34[5]
 E176      27        5304       db     39T      ; EPC_34[6]
 E177      27        5305       db     39T      ; EPC_34[7]
                     5306  
                     5307  ; - EPC_M1 bins, EPC duty factor 0-255("df", function of "TPSp")
                     5308  
 E178      EB        5309       db     235T     ; EPC_M1[0]
 E179      E1        5310       db     225T     ; EPC_M1[1]
 E17A      D7        5311       db     215T     ; EPC_M1[2]
 E17B      D2        5312       db     210T     ; EPC_M1[3]
 E17C      CD        5313       db     205T     ; EPC_M1[4]
 E17D      C8        5314       db     200T     ; EPC_M1[5]
 E17E      C3        5315       db     195T     ; EPC_M1[6]
 E17F      BE        5316       db     190T     ; EPC_M1[7]
                     5317  
                     5318  ;****************************************************************************
                     5319  ; - Third group of 64 bytes
                     5320  ;****************************************************************************
                     5321  
                     5322  ; - Flash Configuration Constants
                     5323  
 E180      93        5324       db     147T    ; EPC_TCC     ; EPC duty factor for TCC application
 E181      93        5325       db     147T    ; EPC_decel   ; EPC duty factor for decel conditions
 E182      05        5326       db     5T      ; EPC_rise    ; EPC rise time delay(20mS res)
 E183      4B        5327       db     75T     ; EPC_hold    ; EPC hold time delay(20mS res)
 E184      0F        5328       db     15T     ; SS1_del     ; SS1 apply time delay(20mS res)
 E185      14        5329       db     20T     ; CCS_del     ; CCS apply time delay(20mS res)
 E186      14        5330       db     20T     ; SSs_del     ; SSs release time delay(20mS res)
 E187      14        5331       db     20T     ; ExBrk_del   ; Exhaust brake apply time delay(20mS res)
 E188      3C        5332       db     60T     ; TCC_min_RPM ; TCC apply minimum RPM permissive(RPM/20)
 E189      06        5333       db     6T      ; MPH_stall   ; MPH maximum for stall EPC(MPH*2)
 E18A      08        5334       db     8T      ; TPSrate     ; TPS DOT rate threshold for EPC stall(V/S)
 E18B      30        5335       db     48T     ; CT_cnt      ; Closed throttle position ADC count
 E18C      E3        5336       db     227T    ; WOT_cnt     ; Wide Open throttle position ADC count
 E18D      B3        5337       db     179T    ; TPSspan     ; WOT_cnt - CT_cnt = TPSspan
 E18E      02        5338       db     2T      ; CT_min      ; Closed throttle position minimum %
 E18F      14        5339       db     20T     ; TrimFac     ; EPC Trim adjustment max value
 E190      03        5340       db     3T      ; TuneConfig  ; Tuning configuration variable
 E191      00        5341       db     0T      ; RPMk(0)     ; RPM calculation constant Hi byte
 E192      00        5342       db     0T      ; RPMk(1)     ; RPM calculation constant Lo byte
 E193      14        5343       db     20T     ; TOTempFac   ; Trans Oil Temp adjustment max value
 E194      FF        5344       db     255T    ; TOThi       ; TOT correction Hi Limit (degreesF + 40)
 E195      A0        5345       db     160T    ; TOTlo       ; TOT correction Lo Limit (degreesF + 40)
 E196      AF        5346       db     175T    ; DBup        ; Upshift debounce counter (ms)
 E197      AF        5347       db     175T    ; DBdn        ; Downshift debounce counter (ms)
 E198      BE        5348       db     190T    ; EPC_M1_decel; EPC pulse width for M1 decel conditions
                     5349  
                     5350  
                     5351  ; - Place holders for future use (39)
                     5352  
 E199      00        5353      db     0T       ; blank_2_0
 E19A      00        5354      db     0T       ; blank_2_1
 E19B      00        5355      db     0T       ; blank_2_2
 E19C      00        5356      db     0T       ; blank_2_3
 E19D      00        5357      db     0T       ; blank_2_4
 E19E      00        5358      db     0T       ; blank_2_5
 E19F      00        5359      db     0T       ; blank_2_6
 E1A0      00        5360      db     0T       ; blank_2_7
 E1A1      00        5361      db     0T       ; blank_2_8
 E1A2      00        5362      db     0T       ; blank_2_9
 E1A3      00        5363      db     0T       ; blank_2_10
 E1A4      00        5364      db     0T       ; blank_2_11
 E1A5      00        5365      db     0T       ; blank_2_12
 E1A6      00        5366      db     0T       ; blank_2_13
 E1A7      00        5367      db     0T       ; blank_2_14
 E1A8      00        5368      db     0T       ; blank_2_15
 E1A9      00        5369      db     0T       ; blank_2_16
 E1AA      00        5370      db     0T       ; blank_2_17
 E1AB      00        5371      db     0T       ; blank_2_18
 E1AC      00        5372      db     0T       ; blank_2_19
 E1AD      00        5373      db     0T       ; blank_2_20
 E1AE      00        5374      db     0T       ; blank_2_21
 E1AF      00        5375      db     0T       ; blank_2_22
 E1B0      00        5376      db     0T       ; blank_2_23
 E1B1      00        5377      db     0T       ; blank_2_24
 E1B2      00        5378      db     0T       ; blank_2_25
 E1B3      00        5379      db     0T       ; blank_2_26
 E1B4      00        5380      db     0T       ; blank_2_27
 E1B5      00        5381      db     0T       ; blank_2_28
 E1B6      00        5382      db     0T       ; blank_2_29
 E1B7      00        5383      db     0T       ; blank_2_30
 E1B8      00        5384      db     0T       ; blank_2_31
 E1B9      00        5385      db     0T       ; blank_2_32
 E1BA      00        5386      db     0T       ; blank_2_33
 E1BB      00        5387      db     0T       ; blank_2_34
 E1BC      00        5388      db     0T       ; blank_2_35
 E1BD      00        5389      db     0T       ; blank_2_36
 E1BE      00        5390      db     0T       ; blank_2_37
 E1BF      00        5391      db     0T       ; blank_2_38
                     5392  
                     5393  ms_rf_end_f:
                     5394  
                     5395  ;***************************************************************************
                     5396  ; - Boot Loader routine goes here
                     5397  ;***************************************************************************
                     5398  
 E1C0                5399       include "boot_r12.asm"       ; Include Boot Loader routine
                     5400  ;=====================================
                     5401  ; MEGASQUIRT BOOTLOADER VERSION - Dec 2001
                     5402  ;
                     5403  ; Mods by Bruce Bowling
                     5404  ;
                     5405  ; Corrected bug in BootReset 5
                     5406  ;
                     5407  ;=====================================
                     5408  
                     5409  ;********************************************************************************************
                     5410  ;*                                                                                          *
                     5411  ;*  Bootloader - MC68HC908GP32                                                              *
                     5412  ;*                                                          Copyright (c) Motorola, 2001    *
                     5413  ;*                                                                                          *
                     5414  ;********************************************************************************************
                     5415  ;*                                                                                          *
                     5416  ;*  This file provides the low level assembly bootloader routine.                           *
                     5417  ;*  This program has been specially tailored towards the MC68HC908GP32.                     *
                     5418  ;*                                                                                          *
                     5419  ;********************************************************************************************
                     5420  ;*                                                                                          *
                     5421  ;*  File name:          boot.asm                        Current Release Level:      1.1     *
                     5422  ;*  Last Edit Date:     07-Jun-01                       Classification:             ES      *
                     5423  ;*                                                                                          *
                     5424  ;*  Include Files:      gp32.equ            : MC68HC908GP32 MCU definitions                 *
                     5425  ;*                                                                                          *
                     5426  ;*  Assembler:          P&E's CASM08Z                   Version:    3.16                    *
                     5427  ;*                                                                                          *
                     5428  ;*  Target:             MC68HC908GP32                                                       *
                     5429  ;*                                                                                          *
                     5430  ;*  Documentation:      MC68HC908GP32/H  Rev 3                                              *
                     5431  ;*                      Motorola Microcontroller Technical Data                             *
                     5432  ;*                                                                                          *
                     5433  ;********************************************************************************************
                     5434  ;*                                                                                          *
                     5435  ;*  Author:             DHJ Klotz                                                           *
                     5436  ;*  First Release:      26-Feb-00                                                           *
                     5437  ;*                                                                                          *
                     5438  ;*  Update History:                                                                         *
                     5439  ;*                                                                                          *
                     5440  ;*  Rev     Date       Author  Description of Change                                        *
                     5441  ;*  ------  ---------  ------  -----------------------------------------------------------  *
                     5442  ;*  ES 1.0  26-Feb-00  DHJK    Initial release for HC908 Seminar 2000.                      *
                     5443  ;*  ES 1.1  07-Jun-01  DHJK    Improved functionality for Application Note.                 *
                     5444  ;*                                                                                          *
                     5445  ;********************************************************************************************
                     5446  ;*                                                                                          *
                     5447  ;*  Notes:                                                                                  *
                     5448  ;*    - In order to minimize overall program size, subroutines are position within the      *
                     5449  ;*      core bootloader routine.  Although this can make the program somewhat difficult     *
                     5450  ;*      to read and follow, it permits the use of relative branch opcodes.  Most of         *
                     5451  ;*      these subroutines can be called from an external application program.               *
                     5452  ;*                                                                                          *
                     5453  ;********************************************************************************************
                     5454  ;*                                                                                          *
                     5455  ;*    Motorola reserves the right to make changes without further notice to any product     *
                     5456  ;*    herein to improve reliability, function, or design.  Motorola does not assume any     *
                     5457  ;*    liability arising out of the application or use of any product, circuit, or software  *
                     5458  ;*    described herein; neither does it convey any license under its patent rights nor the  *
                     5459  ;*    rights of others.  Motorola products are not designed, intended, or authorized for    *
                     5460  ;*    use as components in systems intended for surgical implant into the body, or other    *
                     5461  ;*    applications intended to support life, or for any other application in which the      *
                     5462  ;*    failure of the Motorola product could create a situation where personal injury or     *
                     5463  ;*    death may occur.  Should Buyer purchase or use Motorola products for any such         *
                     5464  ;*    intended or unauthorized application, Buyer shall indemnify and hold Motorola and     *
                     5465  ;*    its officers, employees, subsidiaries, affiliates, and distributors harmless against  *
                     5466  ;*    all claims, costs, damages, and expenses, and reasonable attorney fees arising out    *
                     5467  ;*    of, directly or indirectly, any claim of personal injury or death associated with     *
                     5468  ;*    such unintended or unauthorized use, even if such claim alleges that Motorola was     *
                     5469  ;*    negligent regarding the design or manufacture of the part.                            *
                     5470  ;*                                                                                          *
                     5471  ;*    Motorola and the Motorola logo are registered trademarks of Motorola Ltd.             *
                     5472  ;*                                                                                          *
                     5473  ;********************************************************************************************
                     5474  
                     5475  ;*  Microcontroller Peripheral Equates  *****************************************************
                     5476  ;*
                     5477  
                     5478  ; uncomment out if standalone
 E1C0                5479          list
                     5480  
                     5481  
                     5482  ;*  Flash Memory Specifics  =================================================================
                     5483  ;*
 E1C0                5484  boot_start:     equ     $FB00               ; starting address of protected Bootloader
 E1C0                5485  flash_protect:  equ     {boot_start>7&$FF}  ; Flash Block Protect Register value
 E1C0                5486  flash_page:     equ     128                 ; Flash Erase Page size
 E1C0                5487  flash_row:      equ     64                  ; Flash Program Row size
 E1C0                5488  flash_erased:   equ     $FF                 ; Flash erased state
                     5489  
                     5490  
                     5491  ;*  RAM Utilization  ========================================================================
                     5492  ;*
 0040                5493          org     ram_start                   ; begining of RAM
                     5494  
 0040                5495  count:          ds      1                   ; 0040:     => data counter
 0041                5496  temp_sp:        ds      2                   ; 0041:0042 => temporary Stack Pointer storage
 0043                5497  flash_first:    ds      2                   ; 0043:0044 => first Flash reprogram address
 0045                5498  flash_last:     ds      2                   ; 0045:0046 => last Flash reprogram address + 1
                     5499  
 0047                5500  ram_exec:       equ     $01ED               ; start of executable RAM space
                     5501  
                     5502  
                     5503  ;*  Bootloader Customization Parameters  ====================================================
                     5504  ;*
 0047                5505  user_scbr:      equ     boot_start-61       ; FAC3      => SCBR register
 0047                5506  init_scbr:      equ     $12                 ;   default set SCI for 9600 kbaud
                     5507  
 0047                5508  user_config1:   equ     boot_start-60       ; FAC4      => CONFIG1 register
 0047                5509  init_config1:   equ     %00000001           ;   default CONFIG1
                     5510  
 0047                5511  user_config2:   equ     boot_start-59       ; FAC5      => CONFIG2 register
 0047                5512  init_config2:   equ     %00000001           ;   default CONFIG2
                     5513  
 0047                5514  user_first:     equ     boot_start-58       ; FAC6:FAC7 => 1st application address
 0047                5515  init_first:     equ     rom_start           ;   default first Flash address
                     5516  
 0047                5517  user_last:      equ     boot_start-56       ; FAC8:FAC9 => last application address
 0047                5518  init_last:      equ     boot_start          ;   default last Flash address
                     5519  
                     5520  
                     5521  ;*  Application Program Jump Vector Table  ==================================================
                     5522  ;*
                     5523                                              ; FACA      => "JMP ext" instruction (opcode $CC)
 0047                5524  user_timebase:  equ     boot_start-54       ; FACB:FACC => user Timebase jump vector
                     5525  
                     5526                                              ; FACD      => "JMP ext" instruction (opcode $CC)
 0047                5527  user_ADC:       equ     boot_start-51       ; FACE:FACF => user ADC jump vector
                     5528  
                     5529                                              ; FAD0      => "JMP ext" instruction (opcode $CC)
 0047                5530  user_keyboard:  equ     boot_start-48       ; FAD1:FAD2 => user Keyboard jump vector
                     5531  
                     5532                                              ; FAD3      => "JMP ext" instruction (opcode $CC)
 0047                5533  user_SCItx:     equ     boot_start-45       ; FAD4:FAD5 => user SCI transmit jump vector
                     5534  
                     5535                                              ; FAD6      => "JMP ext" instruction (opcode $CC)
 0047                5536  user_SCIrx:     equ     boot_start-42       ; FAD7:FAD8 => user SCI receive jump vector
                     5537  
                     5538                                              ; FAD9      => "JMP ext" instruction (opcode $CC)
 0047                5539  user_SCIerr:    equ     boot_start-39       ; FADA:FADB => user SCI error jump vector
                     5540  
                     5541                                              ; FADC      => "JMP ext" instruction (opcode $CC)
 0047                5542  user_SPItx:     equ     boot_start-36       ; FADD:FADE => user SPI transmit jump vector
                     5543  
                     5544                                              ; FADF      => "JMP ext" instruction (opcode $CC)
 0047                5545  user_SPIrx:     equ     boot_start-33       ; FAE0:FAE1 => user SPI receive jump vector
                     5546  
                     5547                                              ; FAE2      => "JMP ext" instruction (opcode $CC)
 0047                5548  user_Tim2Ov:    equ     boot_start-30       ; FAE3:FAE4 => user Timer 2 overflow jump vector
                     5549  
                     5550                                              ; FAE5      => "JMP ext" instruction (opcode $CC)
 0047                5551  user_Tim2Ch1:   equ     boot_start-27       ; FAE6:FAE7 => user Timer 2 channel 1 jump vector
                     5552  
                     5553                                              ; FAE8      => "JMP ext" instruction (opcode $CC)
 0047                5554  user_Tim2Ch0:   equ     boot_start-24       ; FAE9:FAEA => user Timer 2 channel 0 jump vector
                     5555  
                     5556                                              ; FAEB      => "JMP ext" instruction (opcode $CC)
 0047                5557  user_Tim1Ov:    equ     boot_start-21       ; FAEC:FAED => user Timer 1 oveflow jump vector
                     5558  
                     5559                                              ; FAEE      => "JMP ext" instruction (opcode $CC)
 0047                5560  user_Tim1Ch1:   equ     boot_start-18       ; FAEF:FAF0 => user Timer 1 channel 1 jump vector
                     5561  
                     5562                                              ; FAF1      => "JMP ext" instruction (opcode $CC)
 0047                5563  user_Tim1Ch0:   equ     boot_start-15       ; FAF2:FAF3 => user Timer 1 channel 0 jump vector
                     5564  
                     5565                                              ; FAF4      => "JMP ext" instruction (opcode $CC)
 0047                5566  user_PLL:       equ     boot_start-12       ; FAF5:FAF6 => user PLL jump vector
                     5567  
                     5568                                              ; FAF7      => "JMP ext" instruction (opcode $CC)
 0047                5569  user_IRQ:       equ     boot_start-9        ; FAF8:FAF9 => user IRQ jump vector
                     5570  
                     5571                                              ; FAFA      => "JMP ext" instruction (opcode $CC)
 0047                5572  user_SWI:       equ     boot_start-6        ; FAFB:FAFC => user SWI jump vector
                     5573  
                     5574                                              ; FAFD      => "JMP ext" instruction (opcode $CC)
 0047                5575  user_reset:     equ     boot_start-3        ; FAFE:FAFF => user Reset interrupt jump vector
                     5576  
                     5577  
                     5578  ;*  Bootloader Program  *********************************************************************
                     5579  ;*
                     5580  
 0047                5581  init_stack:     equ     ram_exec-1          ; initialize stack pointer to before RAM routine
                     5582  ;
 0047                5583  init_scc1:      equ     %01000000           ; enable SCI, 8-bits, no parity, 1 stop
 0047                5584  init_scc2:      equ     %00001100           ; no interupts, receiver and transmitter enabled
                     5585  
 FB00                5586          org     boot_start                  ; beginning of code
                     5587  
                     5588  
                     5589  ;*  CGM Parameter Tables  ===================================================================
                     5590  ;*
                     5591  ;*  The following CGM parameter tables are placed here so that they are easy to access via
                     5592  ;*  external application programs.
                     5593  ;*
                     5594  ;*  7.3728 MHz bus frequency parameters (located at address "boot_start").
                     5595  ;*
                     5596  bus7372800:
 FB00      02        5597          db      $02                         ; P & E
 FB01      C0        5598          db      $C0                         ; L
 FB02      03        5599          db      $03                         ; N msb
 FB03      84        5600          db      $84                         ; N lsb
                     5601  
                     5602  ;*  8.003584 MHz bus frequency parameters (located at address "boot_start+4").
                     5603  ;*
                     5604  bus8003584:
 FB04      02        5605          db      $02                         ; P & E
 FB05      D0        5606          db      $D0                         ; L
 FB06      03        5607          db      $03                         ; N msb
 FB07      D1        5608          db      $D1                         ; N lsb
                     5609  
                     5610  
                     5611  ;*  Power-on Reset  =========================================================================
                     5612  ;* MODIFIED FOR MEGASQUIRT - Initialization code here
                     5613  ;*
                     5614  
                     5615  BootReset:
 FB08 [01] 4F        5616          clra
 FB09 [04] C7FFFF    5617          sta     copctl
 FB0C [04] 6E011E    5618          mov     #%00000001,config2
 FB0F [04] 6E011F    5619          mov     #%00000001,config1
 FB12 [03] 450240    5620          ldhx    #ram_last+1
 FB15 [02] 94        5621          txs
                     5622  
 FB16 [03] 45FB00    5623          ldhx    #bus7372800                 ; point to 7.3728 MHz parameters
 FB19 [04] AD22      5624          bsr     PLLset                      ; change bus speed
                     5625  
 FB1B [02] A600      5626          lda      #%00000000
 FB1D [03] B705      5627          sta      ddrb                       ; ADC Channels - inputs
                     5628  
 FB1F [02] A670      5629          lda     #%01110000                  ; Set up ADC for divide by 8 and internal clock
 FB21 [03] B73E      5630          sta     adclk
 FB23 [02] A604      5631          lda     #%00000100                  ; No interrupt, channel AD4 selected
 FB25 [03] B73C      5632          sta     adscr
 FB27 [05] 0F3CFD    5633          brclr   coco,adscr,*                ; wait until conversion complete
                     5634  
 FB2A [03] B63D      5635          lda     adr
 FB2C [02] A105      5636          cmp     #$05                        ; Check for low voltage on divider
 FB2E [03] 2529      5637          blo     BootReset1                  ; enter bootloader if low voltage
                     5638  
                     5639  ;
                     5640  ;   Test application reset vector.
                     5641  ;
 FB30 [04] C6FAFE    5642          lda     user_reset+1                ; get the MSB of the user reset vector
 FB33 [02] A1FF      5643          cmp     #flash_erased               ; check if it's erased
 FB35 [03] 2722      5644          beq     BootReset1                  ; enter bootloader if erased
 FB37 [03] 20C4      5645          bra     user_reset                  ; else, jump to user reset jump vector
                     5646  
                     5647  
                     5648  ;*  External CGM PLL Bus Frequency Change Subroutine  =======================================
                     5649  ;*
                     5650  ;*  This subroutine will program the CGM PLL to change the bus frequency in accordance with
                     5651  ;*  the data being pointed to by X:A (which is a common implementation for pointer parameter
                     5652  ;*  passing used by HC08 C compilers).
                     5653  ;*
                     5654  ;*  C function prototype:
                     5655  ;*
                     5656  ;*      void CGMChange (char parameters*);
                     5657  ;*
                     5658  ;*  Calling convention:
                     5659  ;*
                     5660  ;*      ldx     #{parameters>8}             ; get CGM parameter table address msb
                     5661  ;*      lda     #{parameters&$FF}           ; get CGM parameter table address lsb
                     5662  ;*      jsr     CGMChange                   ; go change the bus speed
                     5663  ;*
                     5664  ;*  Returns:    nothing
                     5665  ;*
                     5666  ;*  Changes:    H:X
                     5667  ;*
                     5668  CGMChange:
 FB39 [02] 87        5669          psha                                ; save pointer lsb on stack
 FB3A [02] 89        5670          pshx                                ; save pointer msb on stack
 FB3B [02] 8A        5671          pulh                                ; initialize
 FB3C [02] 88        5672          pulx                                ;  H:X points to data array
                     5673  
                     5674  
                     5675  ;*  Internal CGM PLL Bus Frequency Change Subroutine  =======================================
                     5676  ;*
                     5677  ;*  This subroutine will program the CGM PLL to change the bus frequency in accordance with
                     5678  ;*  the data being pointed to by H:X.
                     5679  ;*
                     5680  ;*  Calling convention:
                     5681  ;*
                     5682  ;*      ldhx    #parameters                 ; point to CGM parameter table
                     5683  ;*      jsr     PLLset                      ; go change the bus speed
                     5684  ;*
                     5685  ;*  Returns:    nothing
                     5686  ;*
                     5687  ;*  Changes:    H:X
                     5688  ;*
                     5689  PLLset:
 FB3D [04] 1936      5690          bclr    BCS,pctl                    ; select external reference as base clock
 FB3F [04] 1B36      5691          bclr    PLLON,pctl                  ; turn off PLL
 FB41 [04] 7E36      5692          mov     x+,pctl                     ; program P & E
 FB43 [04] 7E3A      5693          mov     x+,pmrs                     ; program L
 FB45 [04] 7E38      5694          mov     x+,pmsh                     ; program N msb
 FB47 [04] 7E39      5695          mov     x+,pmsl                     ; program N lsb
 FB49 [04] 1E37      5696          bset    AUTO,pbwc                   ; enable automatic bandwidth control
 FB4B [04] 1A36      5697          bset    PLLON,pctl                  ; turn on PLL
                     5698  PLLwait:
 FB4D [05] 0D37FD    5699          brclr   LOCK,pbwc,PLLwait           ; wait for PLL to lock (Note: won't simulate)
 FB50 [04] 1836      5700          bset    BCS,pctl                    ; select VCO as base clock
 FB52 [04] 81        5701          rts                                 ; return
                     5702  
                     5703  
                     5704  ;*  PutChar Subroutine  =====================================================================
                     5705  ;*
                     5706  ;*  This subroutine will output the character passed in ACC to the SCI.
                     5707  ;*
                     5708  ;*  C function prototype:
                     5709  ;*
                     5710  ;*      void PutChar (char data);
                     5711  ;*
                     5712  ;*  Calling convention:
                     5713  ;*
                     5714  ;*      lda     data                        ; get character
                     5715  ;*      jsr     PutChar                     ; go output it
                     5716  ;*
                     5717  ;*  Returns:    nothing
                     5718  ;*
                     5719  ;*  Changes:    nothing
                     5720  ;*
                     5721  PutChar:
 FB53 [05] 0F16FD    5722          brclr   SCTE,scs1,PutChar           ; wait until SCI transmitter is empty
 FB56 [03] B718      5723          sta     scdr                        ; output character to the SCI
 FB58 [04] 81        5724          rts                                 ; return
                     5725  
                     5726  
                     5727  ;*  Power-on Reset Bootloader Entry  ========================================================
                     5728  ;*
                     5729  ;*  This is where the Bootloader starts from power-on reset.
                     5730  ;*
                     5731  BootReset1:
                     5732  ;
                     5733  ;   Initialize the PLL CGM for 7.3728 MHz bus speed from 32.768 kHz crystal.
                     5734  ;
                     5735  ;        ldhx    #bus7372800                 ; point to 7.3728 MHz parameters
                     5736  ;        bsr     PLLset                      ; change bus speed
                     5737  ;
                     5738  ;   Copy user Flash parameters into RAM.
                     5739  ;
 FB59 [03] 45FAC3    5740          ldhx    #user_scbr                  ; point to first parameter
 FB5C [04] 7E40      5741          mov     x+,count                    ; copy user SCI baud rate
 FB5E [04] 7E41      5742          mov     x+,temp_sp                  ; copy user Configuration Register 1
 FB60 [04] 7E42      5743          mov     x+,temp_sp+1                ; copy user Configuration Register 2
 FB62 [04] 7E43      5744          mov     x+,flash_first              ; copy first user Flash address MSB
 FB64 [04] 7E44      5745          mov     x+,flash_first+1            ; copy first user Flash address LSB
 FB66 [04] 7E45      5746          mov     x+,flash_last               ; copy last user Flash address MSB
 FB68 [04] 7E46      5747          mov     x+,flash_last+1             ; copy last user Flash address LSB
 FB6A [03] 450040    5748          ldhx    #count                      ; point to first parameter, now saved in RAM
 FB6D [02] 94        5749          txs                                 ; use SP to point to parameter list in RAM
                     5750  ;
                     5751  ;   Test the user SCI baud rate.  The user can override the default baud rate.
                     5752  ;
 FB6E [02] 86        5753          pula                                ; get user SCBR initial data
 FB6F [02] A1FF      5754          cmp     #flash_erased               ; check if it's erased
 FB71 [03] 2602      5755          bne     BootReset2                  ; skip if not
 FB73 [02] A612      5756          lda     #init_scbr                  ; else, force default value
                     5757  BootReset2:
 FB75 [03] B740      5758          sta     count                       ; save initial SCI baud rate
                     5759  ;
                     5760  ;   Program the write-once configuration registers.  The user can override the defaults.
                     5761  ;
 FB77 [02] 86        5762          pula                                ; get user Configuration Register 1 initial data
 FB78 [02] A1FF      5763          cmp     #flash_erased               ; check if it's erased
 FB7A [03] 2602      5764          bne     BootReset3                  ; skip if not
 FB7C [02] A601      5765          lda     #init_config1               ; else, force default value
                     5766  BootReset3:
 FB7E [03] B71F      5767          sta     config1                     ; initialize Configuration Register 1
                     5768  ;
 FB80 [02] 86        5769          pula                                ; get user Configuration Register 2 initial data
 FB81 [02] A1FF      5770          cmp     #flash_erased               ; check if it's erased
 FB83 [03] 2602      5771          bne     BootReset4                  ; skip if not
 FB85 [02] A601      5772          lda     #init_config2               ; else, force default value
                     5773  BootReset4:
 FB87 [03] B71E      5774          sta     config2                     ; initialize Configuration Register 2
                     5775  ;
                     5776  ;   Program the first and last user Flash addresses.  The user can override the defaults.
                     5777  ;
 FB89 [02] 88        5778          pulx                                ; get first user Flash address LSB
 FB8A [02] 8A        5779          pulh                                ; get first user Flash address MSB
 FB8B [03] 65FFFF    5780          cphx    #$FFFF                      ; check if it's erased
 FB8E [03] 2608      5781          bne     BootReset5                  ; skip if not
 FB90 [02] A600      5782          lda     #{init_first&$FF}           ; else, get default first user address LSB
 FB92 [02] 87        5783          psha                                ;  save it
 FB93 [02] A680      5784          lda     #{init_first>8}             ;  and get default first user address MSB
 FB95 [02] 87        5785          psha                                ;  save it
 FB96 [02] A702      5786          ais     #2                          ; move stack pointer back
                     5787  ;
                     5788  BootReset5:
 FB98 [02] 88        5789          pulx                                ; get last user Flash address LSB
 FB99 [02] 8A        5790          pulh                                ; get last user Flash address MSB
 FB9A [03] 65FFFF    5791          cphx    #$FFFF                      ; check if it's erased
 FB9D [03] 2606      5792          bne     BootReset6                  ; skip if not
                     5793  ;        ldx     #{init_last&$FF}            ; else, get default last user address LSB
 FB9F [02] A600      5794          lda     #{init_last&$FF}            ; else, get default last user address LSB
 FBA1 [02] 87        5795          psha                                ;  save it
 FBA2 [02] A6FB      5796          lda     #{init_last>8}              ;  and get default last user address MSB
 FBA4 [02] 87        5797          psha                                ;  save it
                     5798  BootReset6:
                     5799  
                     5800  
                     5801  ;*  User Bootloader Entry  ==================================================================
                     5802  ;*
                     5803  ;*  The user can launch the bootloader from here.
                     5804  ;*
                     5805  BootResetUser:
 FBA5 [02] 9B        5806          sei                                 ; disable all interrupts
 FBA6 [04] C7FFFF    5807          sta     copctl                      ; clear the COP counter
 FBA9 [03] 4501ED    5808          ldhx    #init_stack+1               ; initialize
 FBAC [02] 94        5809          txs                                 ;  the stack pointer
                     5810  ;
                     5811  ;   Initialize the PLL CGM for 7.3728 MHz bus speed from 32.768 kHz crystal.
                     5812  ;
 FBAD [03] 45FB00    5813          ldhx    #bus7372800                 ; point to 7.3728 MHz parameters
 FBB0 [04] AD8B      5814          bsr     PLLset                      ; change bus speed
                     5815  ;
                     5816  ;   Take over and initialize the SCI.  The user can override the default baud rate.
                     5817  ;
 FBB2 [05] 4E4019    5818          mov     count,scbr                  ; initialize SCI baud rate
 FBB5 [04] 6E4013    5819          mov     #init_scc1,scc1             ; initialize SCI Control Register 1
 FBB8 [04] 6E0C14    5820          mov     #init_scc2,scc2             ; initialize SCI Control Register 2
                     5821  
                     5822  
                     5823  ;*  Main Bootloader Control Loop  ==========================================================
                     5824  ;*
                     5825  ;*  Bootloader program supports the following commands:
                     5826  ;*
                     5827  ;*      'X'  = Exit and execute user program via user reset vector
                     5828  ;*      'P'  = Program Flash via S-Records
                     5829  ;*      'W'  = Erase Flash (Wipe)
                     5830  ;*      'U'  = Upgrade Flash by erasing all user space, then programming via S-Records
                     5831  ;*      'H'  = Help
                     5832  ;*      '?'  = Help
                     5833  ;*
                     5834  ;*  Note: avoid using 'A' - 'F', as these are valid S-Record characters that could get
                     5835  ;*        misinterpreted.
                     5836  ;*
 FBBB                5837  cmd_exit:       equ     'X'                 ; Exit command
 FBBB                5838  cmd_program:    equ     'P'                 ; Program Flash command
 FBBB                5839  cmd_erase:      equ     'W'                 ; Erase Flash command (Wipe)
 FBBB                5840  cmd_upgrade:    equ     'U'                 ; Upgrade Flash command
 FBBB                5841  cmd_help:       equ     'H'                 ; Help command
 FBBB                5842  cmd_help1:      equ     $1F                 ; '?' = alternate Help command
                     5843  ;
                     5844  Boot:
 FBBB [03] 45FD88    5845          ldhx    #msg_hello                  ; point to hello message
 FBBE [04] AD38      5846          bsr     PrintString                 ; output it
 FBC0 [05] CDFC6A    5847          jsr     GetChar                     ; get a character from the SCI
 FBC3 [02] A10D      5848          cmp     #ascii_CR                   ; check for ASCII carriage return
 FBC5 [03] 27F4      5849          beq     Boot                        ; just loop back if so
 FBC7 [04] AD8A      5850          bsr     PutChar                     ; else, echo character back
 FBC9 [02] A4DF      5851          and     #$DF                        ; convert to uppercase
                     5852  
                     5853  
                     5854  ;*  Execute User Program Command Check  =====================================================
                     5855  ;*
 FBCB [02] A158      5856          cmp     #cmd_exit                   ; check for Exit command
 FBCD [03] 2611      5857          bne     Boot2                       ; skip if not
 FBCF [04] C6FAFE    5858          lda     user_reset+1                ; else, get the MSB of the user reset vector
 FBD2 [02] A1FF      5859          cmp     #flash_erased               ; check if it's erased
 FBD4 [03] 2703      5860          beq     Boot1                       ; skip if not
 FBD6 [03] CCFAFD    5861          jmp     user_reset                  ; else, jump to user reset jump vector
                     5862  ;
                     5863  ;   Remain in the Bootloader if the MSB of the User Reset Jump Vector is erased.
                     5864  ;
                     5865  Boot1:
 FBD9 [03] 45FDE0    5866          ldhx    #msg_noreset                ; point to error message
 FBDC [04] AD1A      5867          bsr     PrintString                 ; output it
 FBDE [03] 20DB      5868          bra     Boot                        ; jump back to top
                     5869  
                     5870  
                     5871  ;*  Erase Flash Command Check  ==============================================================
                     5872  ;*
                     5873  Boot2:
 FBE0 [02] A157      5874          cmp     #cmd_erase                  ; check for Erase Flash command
 FBE2 [03] 2618      5875          bne     Boot3                       ; skip if not
 FBE4 [04] AD76      5876          bsr     EraseFlash                  ; else, go erase Flash
                     5877  ;
                     5878  ;   Common Bootloader command completion points.
                     5879  ;
                     5880  BootDone:
 FBE6 [03] 45FDB4    5881          ldhx    #msg_complete               ; point to operation complete message
                     5882  BootDone1:
 FBE9 [04] AD0D      5883          bsr     PrintString                 ; output it
                     5884  BootDone2:
 FBEB [03] 20CE      5885          bra     Boot                        ; jump back to top
                     5886  
                     5887  
                     5888  ;*  External PutString Subroutine  ==========================================================
                     5889  ;*
                     5890  ;*  This subroutine will output the null terminated string pointed to by X:A (which is a
                     5891  ;*  common implementation for pointer parameter passing used by HC08 C compilers) to the SCI.
                     5892  ;*
                     5893  ;*  C function prototype:
                     5894  ;*
                     5895  ;*      void PutString (char string*);
                     5896  ;*
                     5897  ;*  Calling convention:
                     5898  ;*
                     5899  ;*      ldx     #{string>8}                 ; get CGM parameter table address msb
                     5900  ;*      lda     #{string&$FF}               ; get CGM parameter table address lsb
                     5901  ;*      jsr     PutString                   ; go change the bus speed
                     5902  ;*
                     5903  ;*  Returns:    nothing
                     5904  ;*
                     5905  ;*  Changes:    H:X
                     5906  ;*
                     5907  PutString:
 FBED [02] 87        5908          psha                                ; save pointer lsb on stack
 FBEE [02] 89        5909          pshx                                ; save pointer msb on stack
 FBEF [02] 8A        5910          pulh                                ; initialize
 FBF0 [02] 88        5911          pulx                                ;  H:X points to data array
 FBF1 [03] 2005      5912          bra     PrintString                 ; go output string
                     5913  
                     5914  
                     5915  ;*  PrintString Subroutine  =================================================================
                     5916  ;*
                     5917  ;*  This subroutine will output the null teminated string pointed to by H:X to the SCI.
                     5918  ;*
                     5919  ;*  Calling convention:
                     5920  ;*
                     5921  ;*      ldhx    #string                     ; point to start of string
                     5922  ;*      jsr     PrintString                 ; go output it
                     5923  ;*
                     5924  ;*  Returns:    nothing
                     5925  ;*
                     5926  ;*  Changes:    H:X
                     5927  ;*
                     5928  PrintString1:
 FBF3 [05] 0F16FD    5929          brclr   SCTE,scs1,PrintString1      ; wait until SCI transmitter is empty
 FBF6 [04] 7E18      5930          mov     x+,scdr                     ; output character to the SCI and advance pointer
                     5931  PrintString:
 FBF8 [02] 7D        5932          tst     ,x                          ; test string character
 FBF9 [03] 26F8      5933          bne     PrintString1                ; loop back if not null
 FBFB [04] 81        5934          rts                                 ; else, return
                     5935  
                     5936  
                     5937  ;*  Program Flash Command Check  ============================================================
                     5938  ;*
                     5939  Boot3:
 FBFC [02] A150      5940          cmp     #cmd_program                ; check for Program Flash command
 FBFE [03] 264A      5941          bne     Boot4                       ; skip if not
                     5942  ;
 FC00 [04] AD02      5943          bsr     BootProg                    ; go accept S19 records and program the Flash
 FC02 [03] 20B7      5944          bra     Boot                        ; return to top of control loop
                     5945  
                     5946  
                     5947  ;*  Program Flash Subroutine  ===============================================================
                     5948  ;*
                     5949  ;*  This subroutine will copy the Flash Program algorithm into RAM and execute it in
                     5950  ;*  conjunction with the S19 record retrieval to program the required Flash pages between
                     5951  ;*  address pointers "flash_first" and "flash_last".
                     5952  ;*
                     5953  ;*  Calling convention:
                     5954  ;*
                     5955  ;*      jsr     BootProg                    ; retrieve S19 records and program Flash
                     5956  ;*
                     5957  ;*  Returns:    nothing
                     5958  ;*
                     5959  ;*  Changes:    everything
                     5960  ;*
                     5961  BootProg:
 FC04 [03] 45004F    5962          ldhx    #ProgramRamSize             ; initialize pointer
                     5963  BootProg1:
 FC07 [04] D6FD38    5964          lda     Delay-1,x                   ; get program from Flash
 FC0A [04] D701EC    5965          sta     ram_exec-1,x                ; copy into RAM
 FC0D [03] 5BF8      5966          dbnzx   BootProg1                   ; decrement pointer and loop back until done
 FC0F [03] 45FDBF    5967          ldhx    #msg_waiting                ; point to waiting message
 FC12 [04] ADE4      5968          bsr     PrintString                 ; output it
                     5969  ;
                     5970  ;   Get S-Record from host.
                     5971  ;
                     5972  BootProg2:
 FC14 [02] 95        5973          tsx                                 ; get the Stack Pointer
 FC15 [04] 3541      5974          sthx    temp_sp                     ; save it temporarily
 FC17 [02] A7DC      5975          ais     #-36                        ; allocate stack space for data
 FC19 [04] AD58      5976          bsr     GetSRec                     ; get an S-Record
 FC1B [03] 2625      5977          bne     BootProg5                   ; indicate error if S-Record is invalid
 FC1D [02] 86        5978          pula                                ; get S-Record type
 FC1E [02] A130      5979          cmp     #'0'                        ; check for text header record type
 FC20 [03] 270B      5980          beq     BootProg3                   ; ignore and get next record
 FC22 [02] A139      5981          cmp     #'9'                        ; check for end record type
 FC24 [03] 270B      5982          beq     BootProg4                   ; indicate operation complete
 FC26 [02] A131      5983          cmp     #'1'                        ; check for data record type
 FC28 [03] 2618      5984          bne     BootProg5                   ; indicate error if S-Record is invalid
                     5985  ;
                     5986  ;   Program Flash.
                     5987  ;
 FC2A [05] CD01F8    5988          jsr     {ram_exec+ProgramRam}       ; execute Program Flash algorithm from RAM
                     5989  BootProg3:
 FC2D [02] A723      5990          ais     #35                         ; deallocate stack space
 FC2F [03] 20E3      5991          bra     BootProg2                   ; loop back for next S-Record
                     5992  ;
                     5993  BootProg4:
 FC31 [02] A723      5994          ais     #35                         ; deallocate stack space
 FC33 [05] 0B16B0    5995          brclr   SCRF,scs1,BootDone          ; skip if SCI receiver is empty
 FC36 [04] AD32      5996          bsr     GetChar                     ; else, clear last ASCII carriage return from SCI
 FC38 [05] 0B16AB    5997          brclr   SCRF,scs1,BootDone          ; skip if SCI receiver is empty
 FC3B [04] AD2D      5998          bsr     GetChar                     ; else, clear last ASCII line feed from the SCI
 FC3D [03] 45FDB4    5999          ldhx    #msg_complete               ; point to operation complete message
 FC40 [03] 2005      6000          bra     BootProg6                   ; go output it
                     6001  ;
                     6002  BootProg5:
 FC42 [02] A724      6003          ais     #36                         ; deallocate stack space
 FC44 [03] 45FDCE    6004          ldhx    #msg_error                  ; point to error message
                     6005  BootProg6:
 FC47 [04] ADAF      6006          bsr     PrintString                 ; output it
 FC49 [04] 81        6007          rts                                 ; return
                     6008  
                     6009  
                     6010  ;*  Upgrade Flash Command Check  ============================================================
                     6011  ;*
                     6012  Boot4:
 FC4A [02] A155      6013          cmp     #cmd_upgrade                ; check for Upgrade Flash command
 FC4C [03] 2670      6014          bne     Boot5                       ; skip if not
                     6015  ;
 FC4E [03] 458000    6016          ldhx    #init_first                 ; force
 FC51 [04] 3543      6017          sthx    flash_first                 ;  first Flash address
 FC53 [03] 45FB00    6018          ldhx    #init_last                  ; force
 FC56 [04] 3545      6019          sthx    flash_last                  ;  last Flash address
 FC58 [04] AD02      6020          bsr     EraseFlash                  ; go erase Flash
 FC5A [03] 20A8      6021          bra     BootProg                    ; go program Flash
                     6022  
                     6023  
                     6024  ;*  Multiple Flash Page Erase Subroutine  ===================================================
                     6025  ;*
                     6026  ;*  This subroutine will copy the Flash Erase algorithm into RAM and execute it to erase
                     6027  ;*  all pages between address pointers "flash_first" and "flash_last".
                     6028  ;*
                     6029  ;*  Calling convention:
                     6030  ;*
                     6031  ;*      ldhx    #init_first                 ; initialize
                     6032  ;*      sthx    flash_first                 ;  first Flash address
                     6033  ;*      ldhx    #init_last                  ; initialize
                     6034  ;*      sthx    flash_last                  ;  last Flash address
                     6035  ;*      jsr     EraseFlash                  ; go erase flash
                     6036  ;*
                     6037  ;*  Returns:    nothing
                     6038  ;*
                     6039  ;*  Changes:    everything
                     6040  ;*
                     6041  EraseFlash:
 FC5C [03] 45003B    6042          ldhx    #EraseRamSize               ; initialize pointer
                     6043  EraseFlash1:
 FC5F [04] D6FD08    6044          lda     MassErase-1,x               ; get program from Flash
 FC62 [04] D701EC    6045          sta     ram_exec-1,x                ; copy into RAM
 FC65 [03] 5BF8      6046          dbnzx   EraseFlash1                 ; decrement pointer and loop back until done
 FC67 [03] CC01ED    6047          jmp     ram_exec                    ; execute Flash Mass Erase algorithm from RAM
                     6048  
                     6049  
                     6050  ;*  GetChar Subroutine  =====================================================================
                     6051  ;*
                     6052  ;*  This subroutine will wait forever for a character to be received by the SCI and then
                     6053  ;*  returns with that character in ACC.  No error checking is performed.  Note that this
                     6054  ;*  is the primary loop where the COP counter is cleared.
                     6055  ;*
                     6056  ;*  C function prototype:
                     6057  ;*
                     6058  ;*      char GetChar (void);
                     6059  ;*
                     6060  ;*  Calling convention:
                     6061  ;*
                     6062  ;*      jsr     GetChar                     ; get a character from the SCI
                     6063  ;*
                     6064  ;*  Returns:
                     6065  ;*      ACC= data
                     6066  ;*
                     6067  GetChar:
 FC6A [04] C7FFFF    6068          sta     copctl                      ; clear the COP counter
 FC6D [05] 0B16FA    6069          brclr   SCRF,scs1,GetChar           ; wait forever until SCI receiver is full
 FC70 [03] B618      6070          lda     scdr                        ; get data
 FC72 [04] 81        6071          rts                                 ; return
                     6072  
                     6073  
                     6074  ;*  GetSRec Subroutine  =====================================================================
                     6075  ;*
                     6076  ;*  This subroutine will retrieve data in S19 record format via the SCI.
                     6077  ;*
                     6078  ;*  Calling convention:
                     6079  ;*
                     6080  ;*      ais     #-buffer_length             ; allocate stack space for data
                     6081  ;*      jsr     GetSRec                     ; go get S-record data
                     6082  ;*
                     6083  ;*  Returns:    CCRZ= 1 if valid S-Record retrieved.  Otherwise, CCRZ= 0.
                     6084  ;*              S-Record Type at SP+1     (1 byte)
                     6085  ;*              S-Record Size at SP+2     (1 byte)
                     6086  ;*              S-Record Address at SP+3  (2 bytes)
                     6087  ;*              S-Record Data at SP+5     (up to 32 bytes, typically)
                     6088  ;*
                     6089  ;*              |                |    <-sp (after local space allocation)
                     6090  ;*      H:X->   | SRecCount      |
                     6091  ;*              | SRecChkSum     |    <-sp (when called)
                     6092  ;*              | ReturnAddr msb |
                     6093  ;*              | ReturnAddr lsb |    <-sp (upon return)
                     6094  ;*              | SRecType       |
                     6095  ;*              | SRecSize       |
                     6096  ;*      H:X->   | SRecAddr msb   |
                     6097  ;*              | SRecAddr lsb   |
                     6098  ;*              | SRecData 00    |
                     6099  ;*              | SRecData 01    |  etc..
                     6100  ;*
                     6101  ;*  Changes:    everything
                     6102  ;*
 FC73                6103  SRecCount:      equ     1                   ; stack pointer offset for S-Record Counter
 FC73                6104  SRecChkSum:     equ     2                   ; stack pointer offset for S-Record Check Sum
 FC73                6105  SRecType:       equ     5                   ; stack pointer offset for S-Record Type
 FC73                6106  SRecSize:       equ     6                   ; stack pointer offset for S-Record Size
 FC73                6107  SRecAddr:       equ     7                   ; stack pointer offset for S-Record Address
 FC73                6108  SRedData:       equ     8                   ; stack pointer offset for S-Record Data
                     6109  ;
                     6110  GetSRec:
 FC73 [02] A7FE      6111          ais     #-2                         ; allocate local variable space
 FC75 [04] 9E6F06    6112          clr     SRecSize,sp                 ; initialize S-Record size
                     6113  GetSRec1:
 FC78 [04] ADF0      6114          bsr     GetChar                     ; get a character from the SCI
 FC7A [02] A10D      6115          cmp     #ascii_CR                   ; check for ASCII carriage return
 FC7C [03] 2602      6116          bne     GetSRec1a                   ; just loop back if so
 FC7E [02] A60A      6117          lda     #ascii_LF                   ; get ASCII line feed
                     6118  GetSRec1a:
 FC80 [02] A153      6119          cmp     #'S'                        ; check for start of record character
 FC82 [03] 26F4      6120          bne     GetSRec1                    ; loop back if not
 FC84 [04] ADE4      6121          bsr     GetChar                     ; else, get next character from the SCI
 FC86 [02] A130      6122          cmp     #'0'                        ; check for header record type
 FC88 [03] 27EE      6123          beq     GetSRec1                    ; loop back if so
 FC8A [02] A139      6124          cmp     #'9'                        ; else, check for end record type
 FC8C [03] 2704      6125          beq     GetSRec2                    ; continue if so
 FC8E [02] A131      6126          cmp     #'1'                        ; else, check for data record type
 FC90 [03] 26E6      6127          bne     GetSRec1                    ; loop back if not
                     6128  GetSRec2:
 FC92 [04] 9EE705    6129          sta     SRecType,sp                 ; save S-Record type
 FC95 [04] AD3B      6130          bsr     GetHexByte                  ; get the S-Record length
 FC97 [03] 2622      6131          bne     GetSRec4                    ; exit if not a valid hex byte
 FC99 [04] 9EE701    6132          sta     SRecCount,sp                ; initialize S-Record counter
 FC9C [04] 9EE702    6133          sta     SRecChkSum,sp               ; initialize S-Record check sum
 FC9F [02] A003      6134          sub     #3                          ; adjust for address and checksum
 FCA1 [04] 9EE706    6135          sta     SRecSize,sp                 ; save S-Record size
 FCA4 [02] 95        6136          tsx                                 ; use H:X as data stack frame pointer
 FCA5 [02] AF06      6137          aix     #{SRecAddr-1}               ; adjust so pointer starts at S-Record Address
                     6138  GetSRec3:
 FCA7 [04] AD29      6139          bsr     GetHexByte                  ; get next S-Record hex byte
 FCA9 [03] 2610      6140          bne     GetSRec4                    ; exit if not a valid hex byte
 FCAB [02] F7        6141          sta     ,x                          ; save data in stack frame
 FCAC [04] 9EEB02    6142          add     SRecChkSum,sp               ; add data to check sum
 FCAF [04] 9EE702    6143          sta     SRecChkSum,sp               ; save new check sum
 FCB2 [02] AF01      6144          aix     #1                          ; move data stack frame pointer
 FCB4 [06] 9E6B01EF  6145          dbnz    SRecCount,sp,GetSRec3       ; loop back until all data has been received
 FCB8 [05] 9E6C02    6146          inc     SRecChkSum,sp               ; final calculation zeros check sum if it's okay
                     6147  GetSRec4:
 FCBB [02] A702      6148          ais     #2                          ; deallocate local variables
 FCBD [04] 81        6149          rts                                 ; return
                     6150  
                     6151  
                     6152  ;*  Help Command Response  ==================================================================
                     6153  ;*
                     6154  Boot5:
 FCBE [02] A148      6155          cmp     #cmd_help                   ; check for Help command
 FCC0 [03] 2704      6156          beq     Boot6                       ; continue if so
 FCC2 [02] A11F      6157          cmp     #cmd_help1                  ; check for alternate Help command
 FCC4 [03] 2606      6158          bne     Boot7                       ; skip if not
                     6159  boot6:
 FCC6 [03] 45FD90    6160          ldhx    #msg_help                   ; point to Help command message
 FCC9 [03] CCFBE9    6161          jmp     BootDone1                   ; go output it
                     6162  
                     6163  
                     6164  ;*  Unknown Command Response  ===============================================================
                     6165  ;*
                     6166  Boot7:
 FCCC [03] 45FDD7    6167          ldhx    #msg_what                   ; point to unknown command message
 FCCF [03] CCFBE9    6168          jmp     BootDone1                   ; go output it
                     6169  
                     6170  
                     6171  ;*  GetHexByte Subroutine  ==================================================================
                     6172  ;*
                     6173  ;*  This subroutine retrieves two ASCII bytes via the SCI and converts (packs) them into one
                     6174  ;*  hex byte, which is returned in ACC.
                     6175  ;*
                     6176  ;*  Calling convention:
                     6177  ;*
                     6178  ;*      jsr     GetHexByte
                     6179  ;*
                     6180  ;*  Returns:    CCRZ= 1 if valid hex byte retrieved.  Otherwise, CCRZ= 0.
                     6181  ;*              ACC= data
                     6182  ;*
                     6183  ;*  Changes:    ACC
                     6184  ;*
                     6185  GetHexByte:
 FCD2 [04] AD96      6186          bsr     GetChar                     ; get msb character from the SCI
 FCD4 [04] AD20      6187          bsr     IsHex                       ; check if valid ASCII hex character
 FCD6 [03] 2614      6188          bne     GetHexByte2                 ; exit if not
 FCD8 [04] AD13      6189          bsr     ToHex                       ; convert ASCII hex character to hex value
 FCDA [03] 62        6190          nsa                                 ; swap lower nibble up
 FCDB [02] 87        6191          psha                                ; save temporarily
 FCDC [05] CDFC6A    6192          jsr     GetChar                     ; get lsb character from the SCI
 FCDF [04] AD15      6193          bsr     IsHex                       ; check if valid ASCII hex character
 FCE1 [03] 2607      6194          bne     GetHexByte1                 ; exit if not
 FCE3 [04] AD08      6195          bsr     ToHex                       ; convert ASCII hex character to hex value
 FCE5 [04] 9EEB01    6196          add     1,sp                        ; combine msb and lsb nibbles
 FCE8 [02] A500      6197          bit     #0                          ; CCRZ= 1
                     6198  GetHexByte1:
 FCEA [02] A701      6199          ais     #1                          ; deallocate local variable
                     6200  GetHexByte2:
 FCEC [04] 81        6201          rts                                 ; return
                     6202  
                     6203  
                     6204  ;*  ToHex Subroutine  =======================================================================
                     6205  ;*
                     6206  ;*  This subroutine converts the ASCII hex value passed in ACC to a binary hex value.
                     6207  ;*
                     6208  ;*  Calling convention:
                     6209  ;*
                     6210  ;*      lda     data
                     6211  ;*      jsr     ToHex
                     6212  ;*
                     6213  ;*  Returns:    ACC= data.
                     6214  ;*
                     6215  ;*  Changes:    ACC
                     6216  ;*
                     6217  ToHex:
 FCED [02] A030      6218          sub     #'0'                        ; adjust first by subtracting '0'
 FCEF [02] A109      6219          cmp     #9                          ; check if value was between '0' to '9'
 FCF1 [03] 2302      6220          bls     ToHex1                      ; exit if so
 FCF3 [02] A007      6221          sub     #7                          ; else, adjust for value between 'A' to 'F'
                     6222  ToHex1:
 FCF5 [04] 81        6223          rts                                 ; return
                     6224  
                     6225  
                     6226  ;*  IsHex Subroutine  =======================================================================
                     6227  ;*
                     6228  ;*  This subroutine checks if the value passed in ACC is a valid ASCII hex character within
                     6229  ;*  within the ranges of '0' to '9' or 'A' to 'F'.  Note that the range 'a' to 'f' is not
                     6230  ;*  checked.
                     6231  ;*
                     6232  ;*  Calling convention:
                     6233  ;*
                     6234  ;*      lda     data
                     6235  ;*      jsr     IsHex
                     6236  ;*
                     6237  ;*  Returns:    CCRZ= 1 if data is a valid hex character.  Otherwise, CCRZ= 0.
                     6238  ;*
                     6239  ;*  Changes:    nothing
                     6240  ;*
                     6241  IsHex:
 FCF6 [02] A130      6242          cmp     #'0'                        ; check value against '0'
 FCF8 [03] 250E      6243          blo     IsntHex                     ; not hex if lower
 FCFA [02] A139      6244          cmp     #'9'                        ; check value against '9'
 FCFC [03] 2308      6245          bls     IsHex1                      ; is hex if lower
 FCFE [02] A141      6246          cmp     #'A'                        ; check value against 'A'
 FD00 [03] 2506      6247          blo     IsntHex                     ; not hex if lower
 FD02 [02] A146      6248          cmp     #'F'                        ; check value against 'F'
 FD04 [03] 2202      6249          bhi     IsntHex                     ; not hex if higher
                     6250  IsHex1:
 FD06 [02] A500      6251          bit     #0                          ; CCRZ= 1
                     6252  IsntHex:
 FD08 [04] 81        6253          rts                                 ; return
                     6254  
                     6255  
                     6256  ;*  Flash Mass Erase Subroutine  ============================================================
                     6257  ;*
                     6258  ;*  This subroutine performs multiple Page Erase operations in order to erase the application
                     6259  ;*  space Flash memory between "flash_first" and "flash_last".  This subroutine has been
                     6260  ;*  tuned for a bus speed of 7.3728 MHz.
                     6261  ;*  This subroutine is copied into and executed from RAM.
                     6262  ;*
                     6263  MassErase:
 FD09 [04] 5545      6264          ldhx    flash_last                  ; initialize pointer to last Flash memory address
 FD0B [03] 2023      6265          bra     MassErase2                  ; go move pointer before erasing Flash
                     6266  MassErase1:
                     6267  ;
                     6268  ;   Set ERASE, read the Flash Block Protect Register and write any data into Flash page.
                     6269  ;
 FD0D [02] A602      6270          lda     #{ERASE}                    ; set ERASE control bit
 FD0F [04] C7FE08    6271          sta     flcr                        ;  in Flash Control Register
 FD12 [04] C6FF7E    6272          lda     flbpr                       ; read from Flash Block Protect Register
 FD15 [02] F7        6273          sta     ,x                          ; write any data to address within page
                     6274  ;
                     6275  ;   Wait for >10us, then set HVEN.
                     6276  ;
 FD16 [02] A601      6277          lda     #1                          ; wait
 FD18 [04] AD1F      6278          bsr     delay                       ;  for 11.7us
 FD1A [02] A60A      6279          lda     #{ERASE | HVEN}             ; set HVEN control bit
 FD1C [04] C7FE08    6280          sta     flcr                        ;  in Flash Control Register
                     6281  ;
                     6282  ;   Wait for >1ms, then clear ERASE.
                     6283  ;
 FD1F [02] A664      6284          lda     #100                        ; wait
 FD21 [04] AD16      6285          bsr     delay                       ;  for 1.005ms
 FD23 [02] A608      6286          lda     #{HVEN}                     ; clear ERASE control bit
 FD25 [04] C7FE08    6287          sta     flcr                        ;  in Flash Control Register
                     6288  ;
                     6289  ;   Wait for >5us, then clear HVEN.
                     6290  ;
 FD28 [02] A601      6291          lda     #1                          ; wait
 FD2A [04] AD0D      6292          bsr     delay                       ;  for 11.7us
 FD2C [01] 4F        6293          clra                                ; clear HVEN control bit
 FD2D [04] C7FE08    6294          sta     flcr                        ;  in Flash Control Register
                     6295  ;
                     6296  ;   Advance pointer and repeat until finished.
                     6297  ;
                     6298  MassErase2:
 FD30 [02] AFC0      6299          aix     #-64                        ; move pointer back
 FD32 [02] AFC0      6300          aix     #-64                        ;  by one complete erase page
 FD34 [04] 7543      6301          cphx    flash_first                 ; check if finished
 FD36 [03] 22D5      6302          bhi     MassErase1                  ; loop back if not
                     6303  ;
 FD38 [04] 81        6304          rts                                 ; return
                     6305  
                     6306  
                     6307  ;*  Delay Subroutine  =======================================================================
                     6308  ;*
                     6309  ;*  This subroutine performs a simple software delay loop based upon the value passed in ACC.
                     6310  ;*  The following timing calculation applies:
                     6311  ;*
                     6312  ;*              delay = ((ACC * 74) + 12) (tcyc)
                     6313  ;*
                     6314  ;*  Calling convention:
                     6315  ;*
                     6316  ;*      lda     data
                     6317  ;*      jsr     delay
                     6318  ;*
                     6319  ;*  Returns:    nothing
                     6320  ;*
                     6321  ;*  Changes:    ACC
                     6322  ;*
                     6323  Delay:
 FD39 [02] 87        6324          psha                                ; [2] save outer delay loop parameter
                     6325  Delay1:
 FD3A [02] A616      6326          lda     #22                         ; [2] initialize inner delay loop counter
                     6327  Delay2:
 FD3C [03] 4BFE      6328          dbnza   Delay2                      ; [3] decrement inner delay loop counter
 FD3E [06] 9E6B01F8  6329          dbnz    1,sp,Delay1                 ; [6] decrement outer delay loop counter
 FD42 [02] 86        6330          pula                                ; [2] deallocate local variable
 FD43 [04] 81        6331          rts                                 ; [4] return
                     6332  
 FD44                6333  EraseRamSize:   equ     {*-MassErase}
 FD44                6334  ProgramRam:     equ     {*-Delay}
                     6335  
                     6336  
                     6337  ;*  Flash Program Subroutine  ===============================================================
                     6338  ;*
                     6339  ;*  This subroutine controls the Flash programming sequence.  A stack frame data block is
                     6340  ;*  passed to it in the format shown below.  This subroutine has been tuned for a bus speed
                     6341  ;*  of 7.3728 MHz.
                     6342  ;*  This subroutine is copied into and executed from RAM.
                     6343  ;*
                     6344  ;*              |                |    <-sp (when called)
                     6345  ;*              | ReturnAddr msb |
                     6346  ;*              | ReturnAddr lsb |    <-sp (upon return)
                     6347  ;*              | SRecSize       |
                     6348  ;*              | SRecAddr msb   |
                     6349  ;*              | SRecAddr lsb   |
                     6350  ;*              | SRecData 00    |
                     6351  ;*              | SRecData 01    |  etc..
                     6352  ;*
                     6353  FlashProgram:
 FD44 [02] 95        6354          tsx                                 ; get the Stack Pointer
 FD45 [04] 3541      6355          sthx    temp_sp                     ; save it temporarily
                     6356  ;
                     6357  ;   Get S-Record size and use the Stack Pointer as the data source pointer.
                     6358  ;
 FD47 [02] A702      6359          ais     #2                          ; SP points to SRecSize
 FD49 [02] 86        6360          pula                                ; get SRecSize
 FD4A [03] B740      6361          sta     count                       ; save it temporarily
                     6362  ;
                     6363  ;   Establish H:X as the destination pointer.
                     6364  ;
 FD4C [02] 8A        6365          pulh                                ; get destination address msb
 FD4D [02] 88        6366          pulx                                ; get destination address lsb
                     6367  
                     6368  FlashProgram1:
 FD4E [04] 7543      6369          cphx    flash_first                 ; check against minimum address
 FD50 [03] 252D      6370          blo     FlashProgram2               ; skip if lower
 FD52 [04] 7545      6371          cphx    flash_last                  ; check against maximum address
 FD54 [03] 2429      6372          bhs     FlashProgram2               ; skip if the same or higher
                     6373  ;
                     6374  ;   Set PGM, read the Flash Block Protect Register and write anywhere in desired Flash row.
                     6375  ;
 FD56 [02] A601      6376          lda     #{PGM}                      ; set PGM control bit
 FD58 [04] C7FE08    6377          sta     flcr                        ;  in Flash Control Register
 FD5B [04] C6FF7E    6378          lda     flbpr                       ; read from Flash Block Protect Register
 FD5E [02] F7        6379          sta     ,x                          ; write any data to first Flash address
                     6380  ;
                     6381  ;   Wait for >10us, then set HVEN.
                     6382  ;
 FD5F [02] A601      6383          lda     #1                          ; wait
 FD61 [04] ADD6      6384          bsr     delay                       ;  for 11.7us
 FD63 [02] A609      6385          lda     #{PGM | HVEN}               ; set HVEN control bit
 FD65 [04] C7FE08    6386          sta     flcr                        ;  in Flash Control Register
                     6387  ;
                     6388  ;   Wait for >5us.
                     6389  ;
 FD68 [02] A601      6390          lda     #1                          ; wait
 FD6A [04] ADCD      6391          bsr     delay                       ;  for 11.7us
                     6392  ;
                     6393  ;   Write data to Flash and wait for 30 - 40us.
                     6394  ;
 FD6C [02] 86        6395          pula                                ; get S-Record data
 FD6D [02] F7        6396          sta     ,x                          ; write data to Flash
 FD6E [02] A603      6397          lda     #3                          ; wait
 FD70 [04] ADC7      6398          bsr     delay                       ;  for 31.7us
                     6399  ;
                     6400  ;   Clear PGM.
                     6401  ;
 FD72 [02] A608      6402          lda     #{HVEN}                     ; clear PGM
 FD74 [04] C7FE08    6403          sta     flcr                        ;  in Flash Control Register
                     6404  ;
                     6405  ;   Wait for >5us, then clear HVEN.
                     6406  ;
 FD77 [02] A601      6407          lda     #1                          ; wait
 FD79 [04] ADBE      6408          bsr     delay                       ;  for 11.7us
 FD7B [01] 4F        6409          clra                                ; clear HVEN control bit
 FD7C [04] C7FE08    6410          sta     flcr                        ;  in Flash Control Register
                     6411  ;
                     6412  ;   Advance destination pointer and data counter.
                     6413  ;
                     6414  FlashProgram2:
 FD7F [02] AF01      6415          aix     #1                          ; advance destination pointer
 FD81 [05] 3B40CA    6416          dbnz    count,FlashProgram1         ; decrement counter and loop back if not done.
                     6417  ;
 FD84 [04] 5541      6418          ldhx    temp_sp                     ; restore
 FD86 [02] 94        6419          txs                                 ;  Stack Pointer
 FD87 [04] 81        6420          rts                                 ; return
                     6421  
 FD88                6422  ProgramRamSize: equ     {*-Delay}
                     6423  
                     6424  
                     6425  ;*  Messages  ===================================================================================
                     6426  ;*
 FD88                6427  ascii_CR:       equ     $0D                 ; ASCII carriage return
 FD88                6428  ascii_LF:       equ     $0A                 ; ASCII line feed
                     6429  ;
 FD88      0D0A426F  6430  msg_hello:      db      ascii_CR,ascii_LF,'Boot>',0
           6F743E00 
 FD90      20202850  6431  msg_help:       db      '  (P)rogram (W)ipe (U)pgrade e(X)it',0
           29726F67 
           72616D20 
           28572969 
           70652028 
           55297067 
           72616465 
           20652858 
           29697400 
                     6432  ;
 FDB4      2020436F  6433  msg_complete:   db      '  Complete',0
           6D706C65 
           746500 
 FDBF      202D2077  6434  msg_waiting:    db      ' - waiting ...',0
           61697469 
           6E67202E 
           2E2E00 
 FDCE      202D2065  6435  msg_error:      db      ' - error',0
           72726F72 
           00 
 FDD7      202D2077  6436  msg_what:       db      ' - what?',0
           6861743F 
           00 
 FDE0      202D2052  6437  msg_noreset:    db      ' - Reset Vector Invalid',0
           65736574 
           20566563 
           746F7220 
           496E7661 
           6C696400 
                     6438  
                     6439  ;
                     6440  ;   Last location not to exceed $FDFF
                     6441  ;
                     6442  BootEnd:
                     6443  
                     6444  
                     6445  ;*  Vectors  ************************************************************************************
                     6446  ;*
 FFDC                6447          org     vec_timebase                ; Timebase vector
 FFDC      FACA      6448          dw      user_timebase
 FFDE                6449          org     vec_adc                     ; ADC vector
 FFDE      FACD      6450          dw      user_ADC
 FFE0                6451          org     vec_kbd                     ; Keyboard vector
 FFE0      FAD0      6452          dw      user_keyboard
 FFE2                6453          org     vec_scitx                   ; SCI transmit vector
 FFE2      FAD3      6454          dw      user_SCItx
 FFE4                6455          org     vec_scirx                   ; SCI receive vector
 FFE4      FAD6      6456          dw      user_SCIrx
 FFE6                6457          org     vec_scierr                  ; SCI error vector
 FFE6      FAD9      6458          dw      user_SCIerr
 FFE8                6459          org     vec_spitx                   ; SPI transmit vector
 FFE8      FADC      6460          dw      user_SPItx
 FFEA                6461          org     vec_spirx                   ; SPI receive vector
 FFEA      FADF      6462          dw      user_SPIrx
 FFEC                6463          org     vec_tim2ov                  ; Timer 2 overflow vector
 FFEC      FAE2      6464          dw      user_Tim2Ov
 FFEE                6465          org     vec_tim2ch1                 ; Timer 2 channel 1 vector
 FFEE      FAE5      6466          dw      user_Tim2Ch1
 FFF0                6467          org     vec_tim2ch0                 ; Timer 2 channel 0 vector
 FFF0      FAE8      6468          dw      user_Tim2Ch0
 FFF2                6469          org     vec_tim1ov                  ; Timer 1 oveflow vector
 FFF2      FAEB      6470          dw      user_Tim1Ov
 FFF4                6471          org     vec_tim1ch1                 ; Timer 1 channel 1 vector
 FFF4      FAEE      6472          dw      user_Tim1Ch1
 FFF6                6473          org     vec_tim1ch0                 ; Timer 1 channel 0 vector
 FFF6      FAF1      6474          dw      user_Tim1Ch0
 FFF8                6475          org     vec_pll                     ; PLL vector
 FFF8      FAF4      6476          dw      user_PLL
 FFFA                6477          org     vec_irq                     ; IRQ vector
 FFFA      FAF7      6478          dw      user_IRQ
 FFFC                6479          org     vec_swi                     ; SWI vector
 FFFC      FAFA      6480          dw      user_SWI
 FFFE                6481          org     vec_reset                   ; Reset vector
 FFFE      FB08      6482          dw      BootReset
                     6483  
                     6484  
                     6485  ;*  Flash Block Protect Register  ***************************************************************
                     6486  ;*
 FF7E                6487          org     flbpr
 FF7E      F6        6488          db      flash_protect
                     6489  
 FF7F                6490          end
                     6491  
                     6492  ;****************************************************************************
                     6493  ; - Lookup Tables
                     6494  ;****************************************************************************
                     6495  
 F000                6496       org     $F000     ; $F000 to $F600 (61440 to 62976)
                     6497  
 F000                6498       include "KPAfac_RH.inc" ; table=KPAfac_RH:,  offset=MAP,  result=KPA
                     6499  KPAfac_RH:
 F000      64        6500          DB      100T     ; x=000;=0.000v;sensor failure
 F001      0C        6501          DB      12T      ; x=001;=0.020v
 F002      0D        6502          DB      13T      ; x=002;=0.039v
 F003      0E        6503          DB      14T      ; x=003;=0.059v
 F004      0F        6504          DB      15T      ; x=004;=0.078v
 F005      10        6505          DB      16T      ; x=005;=0.098v
 F006      11        6506          DB      17T      ; x=006;=0.118v
 F007      12        6507          DB      18T      ; x=007;=0.137v
 F008      13        6508          DB      19T      ; x=008;=0.157v
 F009      14        6509          DB      20T      ; x=009;=0.176v
 F00A      15        6510          DB      21T      ; x=010;=0.196v
 F00B      16        6511          DB      22T      ; x=011;=0.216v
 F00C      17        6512          DB      23T      ; x=012;=0.235v
 F00D      18        6513          DB      24T      ; x=013;=0.255v
 F00E      19        6514          DB      25T      ; x=014;=0.275v
 F00F      1A        6515          DB      26T      ; x=015;=0.294v
 F010      1B        6516          DB      27T      ; x=016;=0.314v
 F011      1C        6517          DB      28T      ; x=017;=0.333v
 F012      1D        6518          DB      29T      ; x=018;=0.353v
 F013      1E        6519          DB      30T      ; x=019;=0.373v
 F014      1F        6520          DB      31T      ; x=020;=0.392v
 F015      20        6521          DB      32T      ; x=021;=0.412v
 F016      21        6522          DB      33T      ; x=022;=0.431v
 F017      22        6523          DB      34T      ; x=023;=0.451v
 F018      23        6524          DB      35T      ; x=024;=0.471v
 F019      24        6525          DB      36T      ; x=025;=0.490v
 F01A      25        6526          DB      37T      ; x=026;=0.510v
 F01B      26        6527          DB      38T      ; x=027;=0.529v
 F01C      27        6528          DB      39T      ; x=028;=0.549v
 F01D      28        6529          DB      40T      ; x=029;=0.569v
 F01E      29        6530          DB      41T      ; x=030;=0.588v
 F01F      2A        6531          DB      42T      ; x=031;=0.608v
 F020      2B        6532          DB      43T      ; x=032;=0.627v
 F021      2C        6533          DB      44T      ; x=033;=0.647v
 F022      2D        6534          DB      45T      ; x=034;=0.667v
 F023      2E        6535          DB      46T      ; x=035;=0.686v
 F024      2F        6536          DB      47T      ; x=036;=0.706v
 F025      30        6537          DB      48T      ; x=037;=0.725v
 F026      31        6538          DB      49T      ; x=038;=0.745v
 F027      32        6539          DB      50T      ; x=039;=0.765v
 F028      33        6540          DB      51T      ; x=040;=0.784v
 F029      34        6541          DB      52T      ; x=041;=0.804v
 F02A      35        6542          DB      53T      ; x=042;=0.824v
 F02B      36        6543          DB      54T      ; x=043;=0.843v
 F02C      37        6544          DB      55T      ; x=044;=0.863v
 F02D      38        6545          DB      56T      ; x=045;=0.882v
 F02E      39        6546          DB      57T      ; x=046;=0.902v
 F02F      3A        6547          DB      58T      ; x=047;=0.922v
 F030      3B        6548          DB      59T      ; x=048;=0.941v
 F031      3B        6549          DB      59T      ; x=049;=0.961v
 F032      3C        6550          DB      60T      ; x=050;=0.980v
 F033      3D        6551          DB      61T      ; x=051;=1.000v
 F034      3E        6552          DB      62T      ; x=052;=1.020v
 F035      3F        6553          DB      63T      ; x=053;=1.039v
 F036      40        6554          DB      64T      ; x=054;=1.059v
 F037      41        6555          DB      65T      ; x=055;=1.078v
 F038      42        6556          DB      66T      ; x=056;=1.096v
 F039      43        6557          DB      67T      ; x=057;=1.118v
 F03A      44        6558          DB      68T      ; x=058;=1.137v
 F03B      45        6559          DB      69T      ; x=059;=1.157v
 F03C      46        6560          DB      70T      ; x=060;=1.176v
 F03D      47        6561          DB      71T      ; x=061;=1,196v
 F03E      48        6562          DB      72T      ; x=062;=1,216v
 F03F      49        6563          DB      73T      ; x=063;=1.235v
 F040      4A        6564          DB      74T      ; x=064;=1.255v
 F041      4B        6565          DB      75T      ; x=065;=1.275v
 F042      4C        6566          DB      76T      ; x=066;=1.294v
 F043      4D        6567          DB      77T      ; x=067;=1.314v
 F044      4E        6568          DB      78T      ; x=068;=1.333v
 F045      4F        6569          DB      79T      ; x=069;=1.353v
 F046      50        6570          DB      80T      ; x=070;=1.373v
 F047      51        6571          DB      81T      ; x=071;=1.392v
 F048      52        6572          DB      82T      ; x=072;=1.412v
 F049      53        6573          DB      83T      ; x=073;=1.431v
 F04A      54        6574          DB      84T      ; x=074;=1.451v
 F04B      55        6575          DB      85T      ; x=075;=1.471v
 F04C      56        6576          DB      86T      ; x=076;=1.490v
 F04D      57        6577          DB      87T      ; x=077;=1.510v
 F04E      58        6578          DB      88T      ; x=078;=1.529v
 F04F      59        6579          DB      89T      ; x=079;=1.549v
 F050      5A        6580          DB      90T      ; x=080;=1.569v
 F051      5B        6581          DB      91T      ; x=081;=1.588v
 F052      5C        6582          DB      92T      ; x=082;=1.608v
 F053      5D        6583          DB      93T      ; x=083;=1.627v
 F054      5E        6584          DB      94T      ; x=084;=1.647v
 F055      5F        6585          DB      95T      ; x=085;=1.667v
 F056      60        6586          DB      96T      ; x=086;=1.686v
 F057      61        6587          DB      97T      ; x=087;=1.706v
 F058      62        6588          DB      98T      ; x=088;=1.725v
 F059      63        6589          DB      99T      ; x=089;=1.745v
 F05A      64        6590          DB      100T     ; x=090;=1.765v
 F05B      65        6591          DB      101T     ; x=091;=1.784v
 F05C      66        6592          DB      102T     ; x=092;=1.804v
 F05D      67        6593          DB      103T     ; x=093;=1.824v
 F05E      68        6594          DB      104T     ; x=094;=1.843v
 F05F      69        6595          DB      105T     ; x=095;=1.863v
 F060      6A        6596          DB      106T     ; x=096;=1.882v
 F061      6B        6597          DB      107T     ; x=097;=1.902v
 F062      6C        6598          DB      108T     ; x=098;=1.922v
 F063      6D        6599          DB      109T     ; x=099;=1.941v
 F064      6E        6600          DB      110T     ; x=100;=1.961v
 F065      6E        6601          DB      110T     ; x=101;=1.980v
 F066      6F        6602          DB      111T     ; x=102;=2.000v
 F067      70        6603          DB      112T     ; x=103;=2.020v
 F068      71        6604          DB      113T     ; x=104;=2.039v
 F069      72        6605          DB      114T     ; x=105;=2.059v
 F06A      73        6606          DB      115T     ; x=106;=2.078v
 F06B      74        6607          DB      116T     ; x=107;=2.098v
 F06C      75        6608          DB      117T     ; x=108;=2.118v
 F06D      76        6609          DB      118T     ; x=109;=2.137v
 F06E      77        6610          DB      119T     ; x=110;=2.157v
 F06F      78        6611          DB      120T     ; x=111;=2.176v
 F070      79        6612          DB      121T     ; x=112;=2.196v
 F071      7A        6613          DB      122T     ; x=113;=2.216v
 F072      7B        6614          DB      123T     ; x=114;=2.235v
 F073      7C        6615          DB      124T     ; x=115;=2.255v
 F074      7D        6616          DB      125T     ; x=116;=2.275v
 F075      7E        6617          DB      126T     ; x=117;=2.294v
 F076      7F        6618          DB      127T     ; x=118;=2.314v
 F077      80        6619          DB      128T     ; x=119;=2.333v
 F078      81        6620          DB      129T     ; x=120;=2.353v
 F079      82        6621          DB      130T     ; x=121;=2.373v
 F07A      83        6622          DB      131T     ; x=122;=2.392v
 F07B      84        6623          DB      132T     ; x=123;=2.412v
 F07C      85        6624          DB      133T     ; x=124;=2.431v
 F07D      86        6625          DB      134T     ; x=125;=2.451v
 F07E      87        6626          DB      135T     ; x=126;=2.471v
 F07F      88        6627          DB      136T     ; x=127;=2.490v
 F080      89        6628          DB      137T     ; x=128;=2.510v
 F081      8A        6629          DB      138T     ; x=129;=2.529v
 F082      8B        6630          DB      139T     ; x=130,=2.549v
 F083      8C        6631          DB      140T     ; x=131;=2.569v
 F084      8D        6632          DB      141T     ; x=132;=2.588v
 F085      8E        6633          DB      142T     ; x=133;=2.608v
 F086      8F        6634          DB      143T     ; x=134;=2.627v
 F087      90        6635          DB      144T     ; x=135;=2.647v
 F088      91        6636          DB      145T     ; x=136;=2.667v
 F089      92        6637          DB      146T     ; x=137;=2.686v
 F08A      93        6638          DB      147T     ; x=138;=2.706v
 F08B      94        6639          DB      148T     ; x=139;=2.725v
 F08C      95        6640          DB      149T     ; x=140;=2.745v
 F08D      96        6641          DB      150T     ; x=141;=2.765v
 F08E      97        6642          DB      151T     ; x=142;=2.784v
 F08F      98        6643          DB      152T     ; x=143;=2.804v
 F090      99        6644          DB      153T     ; x=144;=0.824v
 F091      9A        6645          DB      154T     ; x=145;=2.843v
 F092      9B        6646          DB      155T     ; x=146;=2.863v
 F093      9C        6647          DB      156T     ; x=147;=2.882v
 F094      9D        6648          DB      157T     ; x=148;=2.902v
 F095      9E        6649          DB      158T     ; x=149;=2.922v
 F096      9F        6650          DB      159T     ; x=150;=2.941v
 F097      A0        6651          DB      160T     ; x=151;=2.961v
 F098      A0        6652          DB      160T     ; x=152;=2.980v
 F099      A1        6653          DB      161T     ; x=153;=3.000v
 F09A      A2        6654          DB      162T     ; x=154;=3.020v
 F09B      A3        6655          DB      163T     ; x=155;=3.039v
 F09C      A4        6656          DB      164T     ; x=156;=3.059v
 F09D      A5        6657          DB      165T     ; x=157;=3.078v
 F09E      A6        6658          DB      166T     ; x=158;=3.098v
 F09F      A7        6659          DB      167T     ; x=159;=3.118v
 F0A0      A8        6660          DB      168T     ; x=160;=3.137v
 F0A1      A9        6661          DB      169T     ; x=161;=3.157v
 F0A2      AA        6662          DB      170T     ; x=162;=3.176v
 F0A3      AB        6663          DB      171T     ; x=163;=3.196v
 F0A4      AC        6664          DB      172T     ; x=164;=3.216v
 F0A5      AD        6665          DB      173T     ; x=165;=3.235v
 F0A6      AE        6666          DB      174T     ; x=166;=3.255v
 F0A7      AF        6667          DB      175T     ; x=167;=3.275v
 F0A8      B0        6668          DB      176T     ; x=168;=3.294v
 F0A9      B1        6669          DB      177T     ; x=169;=3.314v
 F0AA      B2        6670          DB      178T     ; x=170;=3.333v
 F0AB      B3        6671          DB      179T     ; x=171;=3.353v
 F0AC      B4        6672          DB      180T     ; x=172;=3.373v
 F0AD      B5        6673          DB      181T     ; x=173;=3.392v
 F0AE      B6        6674          DB      182T     ; x=174;=3.412v
 F0AF      B7        6675          DB      183T     ; x=175;=3.431v
 F0B0      B8        6676          DB      184T     ; x=176;=3.451v
 F0B1      B9        6677          DB      185T     ; x=177;=3.471v
 F0B2      BA        6678          DB      186T     ; x=178;=3.490v
 F0B3      BB        6679          DB      187T     ; x=179;=3.510v
 F0B4      BC        6680          DB      188T     ; x=180;=3.529v
 F0B5      BD        6681          DB      189T     ; x=181;=3.549v
 F0B6      BE        6682          DB      190T     ; x=182;=3.569v
 F0B7      BF        6683          DB      191T     ; x=183;=3.588v
 F0B8      C0        6684          DB      192T     ; x=184;=3.608v
 F0B9      C1        6685          DB      193T     ; x=185;=3.627v
 F0BA      C2        6686          DB      194T     ; x=186;=3.647v
 F0BB      C3        6687          DB      195T     ; x=187;=3.667v
 F0BC      C4        6688          DB      196T     ; x=188;=3.686v
 F0BD      C5        6689          DB      197T     ; x=189;=3.706v
 F0BE      C6        6690          DB      198T     ; x=190;=3.725v
 F0BF      C7        6691          DB      199T     ; x=191;=3.745v
 F0C0      C8        6692          DB      200T     ; x=192;=3.765v
 F0C1      C9        6693          DB      201T     ; x=193;=3.784v
 F0C2      CA        6694          DB      202T     ; x=194;=3.804v
 F0C3      CB        6695          DB      203T     ; x=195;=3.824v
 F0C4      CC        6696          DB      204T     ; x=196;=3.843v
 F0C5      CD        6697          DB      205T     ; x=197;=3.863v
 F0C6      CE        6698          DB      206T     ; x=198;=3.882v
 F0C7      CF        6699          DB      207T     ; x=199;=3.902v
 F0C8      D0        6700          DB      208T     ; x=200;=3.922v
 F0C9      D1        6701          DB      209T     ; x=201;=3.941v
 F0CA      D2        6702          DB      210T     ; x=202;=3.961v
 F0CB      D2        6703          DB      210T     ; x=203;=3.980v
 F0CC      D3        6704          DB      211T     ; x=204;=4.000v
 F0CD      D4        6705          DB      212T     ; x=205;=4.020v
 F0CE      D5        6706          DB      213T     ; x=206;=4.039v
 F0CF      D6        6707          DB      214T     ; x=207;=4.059v
 F0D0      D7        6708          DB      215T     ; x=208;=4.078v
 F0D1      D8        6709          DB      216T     ; x=209;=4.098v
 F0D2      D9        6710          DB      217T     ; x=210;=4.118v
 F0D3      DA        6711          DB      218T     ; x=211;=4.137v
 F0D4      DB        6712          DB      219T     ; x=212;=4.157v
 F0D5      DC        6713          DB      220T     ; x=213;=4.176v
 F0D6      DD        6714          DB      221T     ; x=214;=4.196v
 F0D7      DE        6715          DB      222T     ; x=215;=4.216v
 F0D8      DF        6716          DB      223T     ; x=216;=4.235v
 F0D9      E0        6717          DB      224T     ; x=217;=4.255v
 F0DA      E1        6718          DB      225T     ; x=218;=4.275v
 F0DB      E2        6719          DB      226T     ; x=219;=4.294v
 F0DC      E3        6720          DB      227T     ; x=220;=4.314v
 F0DD      E4        6721          DB      228T     ; x=221;=4.333v
 F0DE      E5        6722          DB      229T     ; x=222;=4.353v
 F0DF      E6        6723          DB      230T     ; x=223;=4.373v
 F0E0      E7        6724          DB      231T     ; x=224;=4.392v
 F0E1      E8        6725          DB      232T     ; x=225;=4.412v
 F0E2      E9        6726          DB      233T     ; x=226;=4.431v
 F0E3      EA        6727          DB      234T     ; x=227;=4.451v
 F0E4      EB        6728          DB      235T     ; x=228;=4.471v
 F0E5      EC        6729          DB      236T     ; x=229;=4.490v
 F0E6      ED        6730          DB      237T     ; x=230;=4.510v
 F0E7      EE        6731          DB      238T     ; x=231;=4.529v
 F0E8      EF        6732          DB      239T     ; x=232;=4.549v
 F0E9      F0        6733          DB      240T     ; x=233;=4.569v
 F0EA      F1        6734          DB      241T     ; x=234;=4.588v
 F0EB      F2        6735          DB      242T     ; x=235;=4.608v
 F0EC      F3        6736          DB      243T     ; x=236;=4.627v
 F0ED      F4        6737          DB      244T     ; x=237;=4.647v
 F0EE      F5        6738          DB      245T     ; x=238;=4.667v
 F0EF      F6        6739          DB      246T     ; x=239;=4.686v
 F0F0      F7        6740          DB      247T     ; x=240;=4.706v
 F0F1      F8        6741          DB      248T     ; x=241;=4.725v
 F0F2      F9        6742          DB      249T     ; x=242;=4.745v
 F0F3      FA        6743          DB      250T     ; x=243;=4.765v
 F0F4      FB        6744          DB      251T     ; x=244;=4.784v
 F0F5      FC        6745          DB      252T     ; x=245;=4.804v
 F0F6      FD        6746          DB      253T     ; x=246;=4.824v
 F0F7      FE        6747          DB      254T     ; x=247;=4.843v
 F0F8      FF        6748          DB      255T     ; x=248;=4.863v
 F0F9      FF        6749          DB      255T     ; x=249;=4.882v
 F0FA      FF        6750          DB      255T     ; x=250;=4.902v
 F0FB      FF        6751          DB      255T     ; x=251;=4.922v
 F0FC      FF        6752          DB      255T     ; x=252;=4.941v
 F0FD      FF        6753          DB      255T     ; x=253;=4.961v
 F0FE      FF        6754          DB      255T     ; x=254;=4.980v
 F0FF      64        6755          DB      100T     ; x=255;=5.000v;sensor failure
 F100                6756       include "BatVolt.inc"   ; table=BatVolt:,    offset=BAT,  result=Volts
                     6757  BatVolt:
 F100      00        6758       DB      0T       ; x=000        ;=0.000v        ;=sens fail
 F101      01        6759       DB      1T       ; x=001        ;=0.020v
 F102      02        6760       DB      2T       ; x=002        ;=0.039v
 F103      03        6761       DB      3T       ; x=003        ;=0.059v
 F104      05        6762       DB      5T       ; x=004        ;=0.078v
 F105      06        6763       DB      6T       ; x=005        ;=0.098v
 F106      07        6764       DB      7T       ; x=006        ;=0.118v
 F107      08        6765       DB      8T       ; x=007        ;=0.137v
 F108      09        6766       DB      9T       ; x=008        ;=0.157v
 F109      0B        6767       DB      11T      ; x=009        ;=0.176v
 F10A      0C        6768       DB      12T      ; x=010        ;=0.196v
 F10B      0D        6769       DB      13T      ; x=011        ;=0.216v
 F10C      0E        6770       DB      14T      ; x=012        ;=0.235v
 F10D      0F        6771       DB      15T      ; x=013        ;=0.255v
 F10E      11        6772       DB      17T      ; x=014        ;=0.275v
 F10F      12        6773       DB      18T      ; x=015        ;=0.294v
 F110      13        6774       DB      19T      ; x=016        ;=0.314v
 F111      14        6775       DB      20T      ; x=017        ;=0.333v
 F112      15        6776       DB      21T      ; x=018        ;=0.353v
 F113      16        6777       DB      22T      ; x=019        ;=0.373v
 F114      18        6778       DB      24T      ; x=020        ;=0.392v
 F115      19        6779       DB      25T      ; x=021        ;=0.412v
 F116      1A        6780       DB      26T      ; x=022        ;=0.431v
 F117      1B        6781       DB      27T      ; x=023        ;=0.451v
 F118      1C        6782       DB      28T      ; x=024        ;=0.471v
 F119      1D        6783       DB      29T      ; x=025        ;=0.490v
 F11A      1F        6784       DB      31T      ; x=026        ;=0.510v
 F11B      20        6785       DB      32T      ; x=027        ;=0.529v
 F11C      21        6786       DB      33T      ; x=028        ;=0.549v
 F11D      22        6787       DB      34T      ; x=029        ;=0.569v
 F11E      23        6788       DB      35T      ; x=030        ;=0.588v
 F11F      24        6789       DB      36T      ; x=031        ;=0.608v
 F120      26        6790       DB      38T      ; x=032        ;=0.627v
 F121      27        6791       DB      39T      ; x=033        ;=0.647v
 F122      28        6792       DB      40T      ; x=034        ;=0.667v
 F123      29        6793       DB      41T      ; x=035        ;=0.686v
 F124      2A        6794       DB      42T      ; x=036        ;=0.706v
 F125      2C        6795       DB      44T      ; x=037        ;=0.725v
 F126      2D        6796       DB      45T      ; x=038        ;=0.745v
 F127      2E        6797       DB      46T      ; x=039        ;=0.765v
 F128      2F        6798       DB      47T      ; x=040        ;=0.784v
 F129      30        6799       DB      48T      ; x=041        ;=0.804v
 F12A      31        6800       DB      49T      ; x=042        ;=0.824v
 F12B      33        6801       DB      51T      ; x=043        ;=0.843v
 F12C      34        6802       DB      52T      ; x=044        ;=0.863v
 F12D      35        6803       DB      53T      ; x=045        ;=0.882v
 F12E      36        6804       DB      54T      ; x=046        ;=0.902v
 F12F      37        6805       DB      55T      ; x=047        ;=0.922v
 F130      38        6806       DB      56T      ; x=048        ;=0.941v
 F131      3A        6807       DB      58T      ; x=049        ;=0.961v
 F132      3B        6808       DB      59T      ; x=050        ;=0.980v
 F133      3C        6809       DB      60T      ; x=051        ;=1.000v
 F134      3D        6810       DB      61T      ; x=052        ;=1.020v
 F135      3E        6811       DB      62T      ; x=053        ;=1.039v
 F136      40        6812       DB      64T      ; x=054        ;=1.059v
 F137      41        6813       DB      65T      ; x=055        ;=1.078v
 F138      42        6814       DB      66T      ; x=056        ;=1.096v
 F139      43        6815       DB      67T      ; x=057        ;=1.118v
 F13A      44        6816       DB      68T      ; x=058        ;=1.137v
 F13B      45        6817       DB      69T      ; x=059        ;=1.157v
 F13C      47        6818       DB      71T      ; x=060        ;=1.176v
 F13D      48        6819       DB      72T      ; x=061        ;=1,196v
 F13E      49        6820       DB      73T      ; x=062        ;=1,216v
 F13F      4A        6821       DB      74T      ; x=063        ;=1.235v
 F140      4B        6822       DB      75T      ; x=064        ;=1.255v
 F141      4D        6823       DB      77T      ; x=065        ;=1.275v
 F142      4E        6824       DB      78T      ; x=066        ;=1.294v
 F143      4F        6825       DB      79T      ; x=067        ;=1.314v
 F144      50        6826       DB      80T      ; x=068        ;=1.333v
 F145      51        6827       DB      81T      ; x=069        ;=1.353v
 F146      52        6828       DB      82T      ; x=070        ;=1.373v
 F147      54        6829       DB      84T      ; x=071        ;=1.392v
 F148      55        6830       DB      85T      ; x=072        ;=1.412v
 F149      56        6831       DB      86T      ; x=073        ;=1.431v
 F14A      57        6832       DB      87T      ; x=074        ;=1.451v
 F14B      58        6833       DB      88T      ; x=075        ;=1.471v
 F14C      59        6834       DB      89T      ; x=076        ;=1.490v
 F14D      5B        6835       DB      91T      ; x=077        ;=1.510v
 F14E      5C        6836       DB      92T      ; x=078        ;=1.529v
 F14F      5D        6837       DB      93T      ; x=079        ;=1.549v
 F150      5E        6838       DB      94T      ; x=080        ;=1.569v
 F151      5F        6839       DB      95T      ; x=081        ;=1.588v
 F152      60        6840       DB      96T      ; x=082        ;=1.608v
 F153      62        6841       DB      98T      ; x=083        ;=1.627v
 F154      63        6842       DB      99T      ; x=084        ;=1.647v
 F155      64        6843       DB      100T     ; x=085        ;=1.667v
 F156      65        6844       DB      101T     ; x=086        ;=1.686v
 F157      66        6845       DB      102T     ; x=087        ;=1.706v
 F158      68        6846       DB      104T     ; x=088        ;=1.725v
 F159      69        6847       DB      105T     ; x=089        ;=1.745v
 F15A      6A        6848       DB      106T     ; x=090        ;=1.765v
 F15B      6B        6849       DB      107T     ; x=091        ;=1.784v
 F15C      6C        6850       DB      108T     ; x=092        ;=1.804v
 F15D      6D        6851       DB      109T     ; x=093        ;=1.824v
 F15E      6F        6852       DB      111T     ; x=094        ;=1.843v
 F15F      70        6853       DB      112T     ; x=095        ;=1.863v
 F160      71        6854       DB      113T     ; x=096        ;=1.882v
 F161      72        6855       DB      114T     ; x=097        ;=1.902v
 F162      73        6856       DB      115T     ; x=098        ;=1.922v
 F163      74        6857       DB      116T     ; x=099        ;=1.941v
 F164      76        6858       DB      118T     ; x=100        ;=1.961v
 F165      77        6859       DB      119T     ; x=101        ;=1.980v
 F166      78        6860       DB      120T     ; x=102        ;=2.000v
 F167      79        6861       DB      121T     ; x=103        ;=2.020v
 F168      7A        6862       DB      122T     ; x=104        ;=2.039v
 F169      7C        6863       DB      124T     ; x=105        ;=2.059v
 F16A      7D        6864       DB      125T     ; x=106        ;=2.078v
 F16B      7E        6865       DB      126T     ; x=107        ;=2.098v
 F16C      7F        6866       DB      127T     ; x=108        ;=2.118v
 F16D      80        6867       DB      128T     ; x=109        ;=2.137v
 F16E      81        6868       DB      129T     ; x=110        ;=2.157v
 F16F      83        6869       DB      131T     ; x=111        ;=2.176v
 F170      84        6870       DB      132T     ; x=112        ;=2.196v
 F171      85        6871       DB      133T     ; x=113        ;=2.216v
 F172      86        6872       DB      134T     ; x=114        ;=2.235v
 F173      87        6873       DB      135T     ; x=115        ;=2.255v
 F174      89        6874       DB      137T     ; x=116        ;=2.275v
 F175      8A        6875       DB      138T     ; x=117        ;=2.294v
 F176      8B        6876       DB      139T     ; x=118        ;=2.314v
 F177      8C        6877       DB      140T     ; x=119        ;=2.333v
 F178      8D        6878       DB      141T     ; x=120        ;=2.353v
 F179      8E        6879       DB      142T     ; x=121        ;=2.373v
 F17A      90        6880       DB      144T     ; x=122        ;=2.392v
 F17B      91        6881       DB      145T     ; x=123        ;=2.412v
 F17C      92        6882       DB      146T     ; x=124        ;=2.431v
 F17D      93        6883       DB      147T     ; x=125        ;=2.451v
 F17E      94        6884       DB      148T     ; x=126        ;=2.471v
 F17F      95        6885       DB      149T     ; x=127        ;=2.490v
 F180      97        6886       DB      151T     ; x=128        ;=2.510v
 F181      98        6887       DB      152T     ; x=129        ;=2.529v
 F182      99        6888       DB      153T     ; x=130        ,=2.549v
 F183      9A        6889       DB      154T     ; x=131        ;=2.569v
 F184      9B        6890       DB      155T     ; x=132        ;=2.588v
 F185      9C        6891       DB      156T     ; x=133        ;=2.608v
 F186      9E        6892       DB      158T     ; x=134        ;=2.627v
 F187      9F        6893       DB      159T     ; x=135        ;=2.647v
 F188      A0        6894       DB      160T     ; x=136        ;=2.667v
 F189      A1        6895       DB      161T     ; x=137        ;=2.686v
 F18A      A2        6896       DB      162T     ; x=138        ;=2.706v
 F18B      A4        6897       DB      164T     ; x=139        ;=2.725v
 F18C      A5        6898       DB      165T     ; x=140        ;=2.745v
 F18D      A6        6899       DB      166T     ; x=141        ;=2.765v
 F18E      A7        6900       DB      167T     ; x=142        ;=2.784v
 F18F      A8        6901       DB      168T     ; x=143        ;=2.804v
 F190      A9        6902       DB      169T     ; x=144        ;=2.824V
 F191      AB        6903       DB      171T     ; x=145        ;=2.843v
 F192      AC        6904       DB      172T     ; x=146        ;=2.863v
 F193      AD        6905       DB      173T     ; x=147        ;=2.882v
 F194      AE        6906       DB      174T     ; x=148        ;=2.902v
 F195      AF        6907       DB      175T     ; x=149        ;=2.922v
 F196      B0        6908       DB      176T     ; x=150        ;=2.941v
 F197      B2        6909       DB      178T     ; x=151        ;=2.961v
 F198      B3        6910       DB      179T     ; x=152        ;=2.980v
 F199      B4        6911       DB      180T     ; x=153        ;=3.000v
 F19A      B5        6912       DB      181T     ; x=154        ;=3.020v
 F19B      B6        6913       DB      182T     ; x=155        ;=3.039v
 F19C      B8        6914       DB      184T     ; x=156        ;=3.059v
 F19D      B9        6915       DB      185T     ; x=157        ;=3.078v
 F19E      BA        6916       DB      186T     ; x=158        ;=3.098v
 F19F      BB        6917       DB      187T     ; x=159        ;=3.118v
 F1A0      12        6918       DB      18T      ; x=160        ;=3.137v
 F1A1      BD        6919       DB      189T     ; x=161        ;=3.157v
 F1A2      BF        6920       DB      191T     ; x=162        ;=3.176v
 F1A3      C0        6921       DB      192T     ; x=163        ;=3.196v
 F1A4      C1        6922       DB      193T     ; x=164        ;=3.216v
 F1A5      C2        6923       DB      194T     ; x=165        ;=3.235v
 F1A6      C3        6924       DB      195T     ; x=166        ;=3.255v
 F1A7      C5        6925       DB      197T     ; x=167        ;=3.275v
 F1A8      C6        6926       DB      198T     ; x=168        ;=3.294v
 F1A9      C7        6927       DB      199T     ; x=169        ;=3.314v
 F1AA      C8        6928       DB      200T     ; x=170        ;=3.333v
 F1AB      C9        6929       DB      201T     ; x=171        ;=3.353v
 F1AC      CA        6930       DB      202T     ; x=172        ;=3.373v
 F1AD      CC        6931       DB      204T     ; x=173        ;=3.392v
 F1AE      CD        6932       DB      205T     ; x=174        ;=3.412v
 F1AF      CE        6933       DB      206T     ; x=175        ;=3.431v
 F1B0      CF        6934       DB      207T     ; x=176        ;=3.451v
 F1B1      D0        6935       DB      208T     ; x=177        ;=3.471v
 F1B2      D1        6936       DB      209T     ; x=178        ;=3.490v
 F1B3      D3        6937       DB      211T     ; x=179        ;=3.510v
 F1B4      D4        6938       DB      212T     ; x=180        ;=3.529v
 F1B5      D5        6939       DB      213T     ; x=181        ;=3.549v
 F1B6      D6        6940       DB      214T     ; x=182        ;=3.569v
 F1B7      D7        6941       DB      215T     ; x=183        ;=3.588v
 F1B8      D8        6942       DB      216T     ; x=184        ;=3.608v
 F1B9      DA        6943       DB      218T     ; x=185        ;=3.627v
 F1BA      DB        6944       DB      219T     ; x=186        ;=3.647v
 F1BB      DC        6945       DB      220T     ; x=187        ;=3.667v
 F1BC      DD        6946       DB      221T     ; x=188        ;=3.686v
 F1BD      DE        6947       DB      222T     ; x=189        ;=3.706v
 F1BE      E0        6948       DB      224T     ; x=190        ;=3.725v
 F1BF      E1        6949       DB      225T     ; x=191        ;=3.745v
 F1C0      E2        6950       DB      226T     ; x=192        ;=3.765v
 F1C1      E3        6951       DB      227T     ; x=193        ;=3.784v
 F1C2      E4        6952       DB      228T     ; x=194        ;=3.804v
 F1C3      E5        6953       DB      229T     ; x=195        ;=3.824v
 F1C4      E7        6954       DB      231T     ; x=196        ;=3.843v
 F1C5      E8        6955       DB      232T     ; x=197        ;=3.863v
 F1C6      E9        6956       DB      233T     ; x=198        ;=3.882v
 F1C7      EA        6957       DB      234T     ; x=199        ;=3.902v
 F1C8      EB        6958       DB      235T     ; x=200        ;=3.922v
 F1C9      EC        6959       DB      236T     ; x=201        ;=3.941v
 F1CA      EE        6960       DB      238T     ; x=202        ;=3.961v
 F1CB      EF        6961       DB      239T     ; x=203        ;=3.980v
 F1CC      F0        6962       DB      240T     ; x=204        ;=4.000v
 F1CD      F1        6963       DB      241T     ; x=205        ;=4.020v
 F1CE      F2        6964       DB      242T     ; x=206        ;=4.039v
 F1CF      F4        6965       DB      244T     ; x=207        ;=4.059v
 F1D0      F5        6966       DB      245T     ; x=208        ;=4.078v
 F1D1      F6        6967       DB      246T     ; x=209        ;=4.098v
 F1D2      F7        6968       DB      247T     ; x=210        ;=4.118v
 F1D3      F8        6969       DB      248T     ; x=211        ;=4.137v
 F1D4      F9        6970       DB      249T     ; x=212        ;=4.157v
 F1D5      FA        6971       DB      250T     ; x=213        ;=4.176v
 F1D6      FC        6972       DB      252T     ; x=214        ;=4.196v
 F1D7      FD        6973       DB      253T     ; x=215        ;=4.216v
 F1D8      FE        6974       DB      254T     ; x=216        ;=4.235v
 F1D9      FF        6975       DB      255T     ; x=217        ;=4.255v
 F1DA      FF        6976       DB      255T     ; x=218        ;=4.275v
 F1DB      FF        6977       DB      255T     ; x=219        ;=4.294v
 F1DC      FF        6978       DB      255T     ; x=220        ;=4.314v
 F1DD      FF        6979       DB      255T     ; x=221        ;=4.333v
 F1DE      FF        6980       DB      255T     ; x=222        ;=4.353v
 F1DF      FF        6981       DB      255T     ; x=223        ;=4.373v
 F1E0      FF        6982       DB      255T     ; x=224        ;=4.392v
 F1E1      FF        6983       DB      255T     ; x=225        ;=4.412v
 F1E2      FF        6984       DB      255T     ; x=226        ;=4.431v
 F1E3      FF        6985       DB      255T     ; x=227        ;=4.451v
 F1E4      FF        6986       DB      255T     ; x=228        ;=4.471v
 F1E5      FF        6987       DB      255T     ; x=229        ;=4.490v
 F1E6      FF        6988       DB      255T     ; x=230        ;=4.510v
 F1E7      FF        6989       DB      255T     ; x=231        ;=4.529v
 F1E8      FF        6990       DB      255T     ; x=232        ;=4.549v
 F1E9      FF        6991       DB      255T     ; x=233        ;=4.569v
 F1EA      FF        6992       DB      255T     ; x=234        ;=4.588v
 F1EB      FF        6993       DB      255T     ; x=235        ;=4.608v
 F1EC      FF        6994       DB      255T     ; x=236        ;=4.627v
 F1ED      FF        6995       DB      255T     ; x=237        ;=4.647v
 F1EE      FF        6996       DB      255T     ; x=238        ;=4.667v
 F1EF      FF        6997       DB      255T     ; x=239        ;=4.686v
 F1F0      FF        6998       DB      255T     ; x=240        ;=4.706v
 F1F1      FF        6999       DB      255T     ; x=241        ;=4.725v
 F1F2      FF        7000       DB      255T     ; x=242        ;=4.745v
 F1F3      FF        7001       DB      255T     ; x=243        ;=4.765v
 F1F4      FF        7002       DB      255T     ; x=244        ;=4.784v
 F1F5      FF        7003       DB      255T     ; x=245        ;=4.804v
 F1F6      FF        7004       DB      255T     ; x=246        ;=4.824v
 F1F7      FF        7005       DB      255T     ; x=247        ;=4.843v
 F1F8      FF        7006       DB      255T     ; x=248        ;=4.863v
 F1F9      FF        7007       DB      255T     ; x=249        ;=4.882v
 F1FA      FF        7008       DB      255T     ; x=250        ;=4.902v
 F1FB      FF        7009       DB      255T     ; x=251        ;=4.922v
 F1FC      FF        7010       DB      255T     ; x=252        ;=4.941v
 F1FD      FF        7011       DB      255T     ; x=253        ;=4.961v
 F1FE      FF        7012       DB      255T     ; x=254        ;=4.980v
 F1FF      00        7013       DB      0T       ; x=255        ;=5.000v        ;=sens fail
                     7014  
 F200                7015       include "TOTdeg.inc"    ; table=TOTdegrees:, offset=TOT,  result=TOTemp
                     7016  TOTdegrees:
 F200      A0        7017          DB      160T     ; x=000;=0.000v;=sens fail
 F201      FF        7018          DB      255T     ; x=001;=0.020v;=435.4dF
 F202      FF        7019          DB      255T     ; x=002;=0.039v;=369.4dF
 F203      FF        7020          DB      255T     ; x=003;=0.059v;=334.8dF
 F204      FF        7021          DB      255T     ; x=004;=0.078v;=311.7dF
 F205      FF        7022          DB      255T     ; x=005;=0.098v;=294.7dF
 F206      FF        7023          DB      255T     ; x=006;=0.118v;=281.2dF
 F207      FF        7024          DB      255T     ; x=007;=0.137v;=270.1dF
 F208      FF        7025          DB      255T     ; x=008;=0.157v;=260.7dF
 F209      FD        7026          DB      253T     ; x=009;=0.176v;=252.6dF
 F20A      F5        7027          DB      245T     ; x=010;=0.196v;=245.4dF
 F20B      EF        7028          DB      239T     ; x=011;=0.216v;=239.0dF
 F20C      E9        7029          DB      233T     ; x=012;=0.235v;=233.2dF
 F20D      E4        7030          DB      228T     ; x=013;=0.255v;=228.0dF
 F20E      DF        7031          DB      223T     ; x=014;=0.275v;=223.2dF
 F20F      DB        7032          DB      219T     ; x=015;=0.294v;=218.7dF
 F210      D7        7033          DB      215T     ; x=016;=0.314v;=214.6dF
 F211      D3        7034          DB      211T     ; x=017;=0.333v;=210.7dF
 F212      CF        7035          DB      207T     ; x=018;=0.353v;=207.1dF
 F213      CC        7036          DB      204T     ; x=019;=0.373v;=203.7dF
 F214      C9        7037          DB      201T     ; x=020;=0.392v;=200.5dF
 F215      C6        7038          DB      198T     ; x=021;=0.412v;=197.5dF
 F216      C3        7039          DB      195T     ; x=022;=0.431v;=194.6dF
 F217      C0        7040          DB      192T     ; x=023;=0.451v;=191.8dF
 F218      BD        7041          DB      189T     ; x=024;=0.471v;=189.2dF
 F219      BB        7042          DB      187T     ; x=025;=0.490v;=186.7dF
 F21A      B8        7043          DB      184T     ; x=026;=0.510v;=184.3dF
 F21B      B6        7044          DB      182T     ; x=027;=0.529v;=182.0dF
 F21C      B4        7045          DB      180T     ; x=028;=0.549v;=179.8dF
 F21D      B2        7046          DB      178T     ; x=029;=0.569v;=177.6dF
 F21E      B0        7047          DB      176T     ; x=030;=0.588v;=175.6dF
 F21F      AE        7048          DB      174T     ; x=031;=0.608v;=173.6dF
 F220      AC        7049          DB      172T     ; x=032;=0.627v;=171.7dF
 F221      AA        7050          DB      170T     ; x=033;=0.647v;=169.8dF
 F222      A8        7051          DB      168T     ; x=034;=0.667v;=168.0dF
 F223      A6        7052          DB      166T     ; x=035;=0.686v;=166.2dF
 F224      A5        7053          DB      165T     ; x=036;=0.706v;=164.5dF
 F225      A3        7054          DB      163T     ; x=037;=0.725v;=162.9dF
 F226      A1        7055          DB      161T     ; x=038;=0.745v;=161.3dF
 F227      A0        7056          DB      160T     ; x=039;=0.765v;=159.7dF
 F228      9E        7057          DB      158T     ; x=040;=0.784v;=158.2dF
 F229      9D        7058          DB      157T     ; x=041;=0.804v;=156.7dF
 F22A      9B        7059          DB      155T     ; x=042;=0.824v;=155.2dF
 F22B      9A        7060          DB      154T     ; x=043;=0.843v;=153.8dF
 F22C      98        7061          DB      152T     ; x=044;=0.863v;=152.4dF
 F22D      97        7062          DB      151T     ; x=045;=0.882v;=151.0dF
 F22E      96        7063          DB      150T     ; x=046;=0.902v;=149.7dF
 F22F      94        7064          DB      148T     ; x=047;=0.922v;=148.4dF
 F230      93        7065          DB      147T     ; x=048;=0.941v;=147.1dF
 F231      92        7066          DB      146T     ; x=049;=0.961v;=145.8dF
 F232      91        7067          DB      145T     ; x=050;=0.980v;=144.6dF
 F233      8F        7068          DB      143T     ; x=051;=1.000v;=143.4dF
 F234      8E        7069          DB      142T     ; x=052;=1.020v;=142.2dF
 F235      8D        7070          DB      141T     ; x=053;=1.039v;=141.0dF
 F236      8C        7071          DB      140T     ; x=054;=1.059v;=139.9dF
 F237      8B        7072          DB      139T     ; x=055;=1.078v;=138.8dF
 F238      8A        7073          DB      138T     ; x=056;=1.096v;=137.7dF
 F239      89        7074          DB      137T     ; x=057;=1.118v;=136.6dF
 F23A      88        7075          DB      136T     ; x=058;=1.137v;=135.5dF
 F23B      86        7076          DB      134T     ; x=059;=1.157v;=134.4dF
 F23C      85        7077          DB      133T     ; x=060;=1.176v;=133.4dF
 F23D      84        7078          DB      132T     ; x=061;=1,196v;=132.4dF
 F23E      83        7079          DB      131T     ; x=062;=1,216v;=131.4dF
 F23F      82        7080          DB      130T     ; x=063;=1.235v;=130.4dF
 F240      81        7081          DB      129T     ; x=064;=1.255v;=129.4dF
 F241      80        7082          DB      128T     ; x=065;=1.275v;=128.4dF
 F242      7F        7083          DB      127T     ; x=066;=1.294v;=127.4dF
 F243      7F        7084          DB      127T     ; x=067;=1.314v;=126.5dF
 F244      7E        7085          DB      126T     ; x=068;=1.333v;=125.6dF
 F245      7D        7086          DB      125T     ; x=069;=1.353v;=124.6dF
 F246      7C        7087          DB      124T     ; x=070;=1.373v;=123.7dF
 F247      7B        7088          DB      123T     ; x=071;=1.392v;=122.8dF
 F248      7A        7089          DB      122T     ; x=072;=1.412v;=121.9dF
 F249      79        7090          DB      121T     ; x=073;=1.431v;=121.0dF
 F24A      78        7091          DB      120T     ; x=074;=1.451v;=120.0dF
 F24B      77        7092          DB      119T     ; x=075;=1.471v;=119.3dF
 F24C      77        7093          DB      119T     ; x=076;=1.490v;=118.5dF
 F24D      76        7094          DB      118T     ; x=077;=1.510v;=117.6dF
 F24E      75        7095          DB      117T     ; x=078;=1.529v;=116.8dF
 F24F      74        7096          DB      116T     ; x=079;=1.549v;=115.9dF
 F250      73        7097          DB      115T     ; x=080;=1.569v;=115.1dF
 F251      72        7098          DB      114T     ; x=081;=1.588v;=114.3dF
 F252      72        7099          DB      114T     ; x=082;=1.608v;=113.5dF
 F253      71        7100          DB      113T     ; x=083;=1.627v;=112.7dF
 F254      70        7101          DB      112T     ; x=084;=1.647v;=111.9dF
 F255      6F        7102          DB      111T     ; x=085;=1.667v;=111.1dF
 F256      6E        7103          DB      110T     ; x=086;=1.686v;=110.3dF
 F257      6E        7104          DB      110T     ; x=087;=1.706v;=109.6dF
 F258      6D        7105          DB      109T     ; x=088;=1.725v;=108.8dF
 F259      6C        7106          DB      108T     ; x=089;=1.745v;=108.0dF
 F25A      6B        7107          DB      107T     ; x=090;=1.765v;=107.3dF
 F25B      6A        7108          DB      106T     ; x=091;=1.784v;=106.5dF
 F25C      6A        7109          DB      106T     ; x=092;=1.804v;=105.8dF
 F25D      69        7110          DB      105T     ; x=093;=1.824v;=105.0dF
 F25E      68        7111          DB      104T     ; x=094;=1.843v;=104.3dF
 F25F      67        7112          DB      103T     ; x=095;=1.863v;=103.6dF
 F260      67        7113          DB      103T     ; x=096;=1.882v;=102.9dF
 F261      66        7114          DB      102T     ; x=097;=1.902v;=102.1dF
 F262      65        7115          DB      101T     ; x=098;=1.922v;=101.4dF
 F263      65        7116          DB      101T     ; x=099;=1.941v;=100.7dF
 F264      64        7117          DB      100T     ; x=100;=1.961v;=100.0dF
 F265      63        7118          DB       99T     ; x=101;=1.980v;=99.3dF
 F266      63        7119          DB       99T     ; x=102;=2.000v;=98.6dF
 F267      62        7120          DB       98T     ; x=103;=2.020v;=97.9dF
 F268      61        7121          DB       97T     ; x=104;=2.039v;=97.2dF
 F269      61        7122          DB       97T     ; x=105;=2.059v;=96.5dF
 F26A      60        7123          DB       96T     ; x=106;=2.078v;=95.8dF
 F26B      5F        7124          DB       95T     ; x=107;=2.098v;=95.2dF
 F26C      5F        7125          DB       95T     ; x=108;=2.118v;=94.5dF
 F26D      5E        7126          DB       94T     ; x=109;=2.137v;=93.8dF
 F26E      5D        7127          DB       93T     ; x=110;=2.157v;=93.1dF
 F26F      5D        7128          DB       93T     ; x=111;=2.176v;=92.5dF
 F270      5C        7129          DB       92T     ; x=112;=2.196v;=91.8dF
 F271      5B        7130          DB       91T     ; x=113;=2.216v;=91.1dF
 F272      5B        7131          DB       91T     ; x=114;=2.235v;=90.5dF
 F273      5A        7132          DB       90T     ; x=115;=2.255v;=89.8dF
 F274      59        7133          DB       89T     ; x=116;=2.275v;=89.1dF
 F275      59        7134          DB       89T     ; x=117;=2.294v;=88.5dF
 F276      58        7135          DB       88T     ; x=118;=2.314v;=87.8dF
 F277      57        7136          DB       87T     ; x=119;=2.333v;=87.2dF
 F278      57        7137          DB       87T     ; x=120;=2.353v;=86.5dF
 F279      56        7138          DB       86T     ; x=121;=2.373v;=85.9dF
 F27A      55        7139          DB       85T     ; x=122;=2.392v;=85.2dF
 F27B      55        7140          DB       85T     ; x=123;=2.412v;=84.6dF
 F27C      54        7141          DB       84T     ; x=124;=2.431v;=84.0dF
 F27D      53        7142          DB       83T     ; x=125;=2.451v;=83.3dF
 F27E      53        7143          DB       83T     ; x=126;=2.471v;=82.7dF
 F27F      52        7144          DB       82T     ; x=127;=2.490v;=82.0dF
 F280      51        7145          DB       81T     ; x=128;=2.510v;=81.4dF
 F281      51        7146          DB       81T     ; x=129;=2.529v;=80.8dF
 F282      50        7147          DB       80T     ; x=130,=2.549v;=80.1dF
 F283      50        7148          DB       80T     ; x=131;=2.569v;=79.5dF
 F284      4F        7149          DB       79T     ; x=132;=2.588v;=78.9dF
 F285      4E        7150          DB       78T     ; x=133;=2.608v;=78.3dF
 F286      4E        7151          DB       78T     ; x=134;=2.627v;=77.6dF
 F287      4D        7152          DB       77T     ; x=135;=2.647v;=77.0dF
 F288      4C        7153          DB       76T     ; x=136;=2.667v;=76.4dF
 F289      4C        7154          DB       76T     ; x=137;=2.686v;=75.7dF
 F28A      4B        7155          DB       75T     ; x=138;=2.706v;=75.1dF
 F28B      4B        7156          DB       75T     ; x=139;=2.725v;=74.5dF
 F28C      4A        7157          DB       74T     ; x=140;=2.745v;=73.9dF
 F28D      49        7158          DB       73T     ; x=141;=2.765v;=73.2dF
 F28E      49        7159          DB       73T     ; x=142;=2.784v;=72.6dF
 F28F      48        7160          DB       72T     ; x=143;=2.804v;=72.0dF
 F290      47        7161          DB       71T     ; x=144;=0.824v;=71.4dF
 F291      47        7162          DB       71T     ; x=145;=2.843v;=70.7dF
 F292      46        7163          DB       70T     ; x=146;=2.863v;=70.1dF
 F293      46        7164          DB       70T     ; x=147;=2.882v;=69.5dF
 F294      45        7165          DB       69T     ; x=148;=2.902v;=68.9dF
 F295      44        7166          DB       68T     ; x=149;=2.922v;=68.2dF
 F296      44        7167          DB       68T     ; x=150;=2.941v;=67.6dF
 F297      43        7168          DB       67T     ; x=151;=2.961v;=67.0dF
 F298      42        7169          DB       66T     ; x=152;=2.980v;=66.3dF
 F299      42        7170          DB       66T     ; x=153;=3.000v;=65.7dF
 F29A      41        7171          DB       65T     ; x=154;=3.020v;=65.1dF
 F29B      41        7172          DB       65T     ; x=155;=3.039v;=64.5dF
 F29C      40        7173          DB       64T     ; x=156;=3.059v;=63.8dF
 F29D      3F        7174          DB       63T     ; x=157;=3.078v;=63.2dF
 F29E      3F        7175          DB       63T     ; x=158;=3.098v;=62.6dF
 F29F      3E        7176          DB       62T     ; x=159;=3.118v;=61.9dF
 F2A0      3D        7177          DB       61T     ; x=160;=3.137v;=61.3dF
 F2A1      3D        7178          DB       61T     ; x=161;=3.157v;=60.6dF
 F2A2      3C        7179          DB       60T     ; x=162;=3.176v;=60.0dF
 F2A3      3B        7180          DB       59T     ; x=163;=3.196v;=59.4dF
 F2A4      3B        7181          DB       59T     ; x=164;=3.216v;=58.7dF
 F2A5      3A        7182          DB       58T     ; x=165;=3.235v;=58.1dF
 F2A6      39        7183          DB       57T     ; x=166;=3.255v;=57.4dF
 F2A7      39        7184          DB       57T     ; x=167;=3.275v;=56.8dF
 F2A8      38        7185          DB       56T     ; x=168;=3.294v;=56.1dF
 F2A9      38        7186          DB       56T     ; x=169;=3.314v;=55.5dF
 F2AA      37        7187          DB       55T     ; x=170;=3.333v;=54.8dF
 F2AB      36        7188          DB       54T     ; x=171;=3.353v;=54.2dF
 F2AC      36        7189          DB       54T     ; x=172;=3.373v;=53.5dF
 F2AD      35        7190          DB       53T     ; x=173;=3.392v;=52.9dF
 F2AE      34        7191          DB       52T     ; x=174;=3.412v;=52.2dF
 F2AF      34        7192          DB       52T     ; x=175;=3.431v;=51.5dF
 F2B0      33        7193          DB       51T     ; x=176;=3.451v;=50.8dF
 F2B1      32        7194          DB       50T     ; x=177;=3.471v;=50.2dF
 F2B2      32        7195          DB       50T     ; x=178;=3.490v;=49.5dF
 F2B3      31        7196          DB       49T     ; x=179;=3.510v;=48.8dF
 F2B4      30        7197          DB       48T     ; x=180;=3.529v;=48.1dF
 F2B5      2F        7198          DB       47T     ; x=181;=3.549v;=47.4dF
 F2B6      2F        7199          DB       47T     ; x=182;=3.569v;=46.7dF
 F2B7      2E        7200          DB       46T     ; x=183;=3.588v;=46.0dF
 F2B8      2D        7201          DB       45T     ; x=184;=3.608v;=45.3dF
 F2B9      2D        7202          DB       45T     ; x=185;=3.627v;=44.6dF
 F2BA      2C        7203          DB       44T     ; x=186;=3.647v;=43.9dF
 F2BB      2B        7204          DB       43T     ; x=187;=3.667v;=43.2dF
 F2BC      2B        7205          DB       43T     ; x=188;=3.686v;=42.5dF
 F2BD      2A        7206          DB       42T     ; x=189;=3.706v;=41.8dF
 F2BE      29        7207          DB       41T     ; x=190;=3.725v;=41.0dF
 F2BF      28        7208          DB       40T     ; x=191;=3.745v;=40.3dF
 F2C0      28        7209          DB       40T     ; x=192;=3.765v;=39.6dF
 F2C1      27        7210          DB       39T     ; x=193;=3.784v;=38.8dF
 F2C2      26        7211          DB       38T     ; x=194;=3.804v;=38.1dF
 F2C3      25        7212          DB       37T     ; x=195;=3.824v;=37.3dF
 F2C4      25        7213          DB       37T     ; x=196;=3.843v;=36.5dF
 F2C5      24        7214          DB       36T     ; x=197;=3.863v;=35.8dF
 F2C6      23        7215          DB       35T     ; x=198;=3.882v;=35.0dF
 F2C7      22        7216          DB       34T     ; x=199;=3.902v;=34.2dF
 F2C8      21        7217          DB       33T     ; x=200;=3.922v;=33.4dF
 F2C9      21        7218          DB       33T     ; x=201;=3.941v;=32.6dF
 F2CA      20        7219          DB       32T     ; x=202;=3.961v;=31.8dF
 F2CB      1F        7220          DB       31T     ; x=203;=3.980v;=30.9dF
 F2CC      1E        7221          DB       30T     ; x=204;=4.000v;=30.1dF
 F2CD      1D        7222          DB       29T     ; x=205;=4.020v;=29.3dF
 F2CE      1C        7223          DB       28T     ; x=206;=4.039v;=28.4dF
 F2CF      1C        7224          DB       28T     ; x=207;=4.059v;=27.5dF
 F2D0      1B        7225          DB       27T     ; x=208;=4.078v;=26.7dF
 F2D1      1A        7226          DB       26T     ; x=209;=4.098v;=25.8dF
 F2D2      19        7227          DB       25T     ; x=210;=4.118v;=24.9dF
 F2D3      18        7228          DB       24T     ; x=211;=4.137v;=23.9dF
 F2D4      17        7229          DB       23T     ; x=212;=4.157v;=23.0dF
 F2D5      16        7230          DB       22T     ; x=213;=4.176v;=22.1dF
 F2D6      15        7231          DB       21T     ; x=214;=4.196v;=21.1dF
 F2D7      14        7232          DB       20T     ; x=215;=4.216v;=20.1dF
 F2D8      13        7233          DB       19T     ; x=216;=4.235v;=19.2dF
 F2D9      12        7234          DB       18T     ; x=217;=4.255v;=18.1dF
 F2DA      11        7235          DB       17T     ; x=218;=4.275v;=17.1dF
 F2DB      10        7236          DB       16T     ; x=219;=4.294v;=16.1dF
 F2DC      0F        7237          DB       15T     ; x=220;=4.314v;=15.0dF
 F2DD      0E        7238          DB       14T     ; x=221;=4.333v;=13.9dF
 F2DE      0D        7239          DB       13T     ; x=222;=4.353v;=12.8dF
 F2DF      0C        7240          DB       12T     ; x=223;=4.373v;=11.7dF
 F2E0      0B        7241          DB       11T     ; x=224;=4.392v;=10.5dF
 F2E1      09        7242          DB        9T     ; x=225;=4.412v;=9.3dF
 F2E2      08        7243          DB        8T     ; x=226;=4.431v;=8.1dF
 F2E3      07        7244          DB        7T     ; x=227;=4.451v;=6.8dF
 F2E4      06        7245          DB        6T     ; x=228;=4.471v;=5.6dF
 F2E5      04        7246          DB        4T     ; x=229;=4.490v;=4.2dF
 F2E6      03        7247          DB        3T     ; x=230;=4.510v;=2.9dF
 F2E7      02        7248          DB        2T     ; x=231;=4.529v;=1.5dF
 F2E8      00        7249          DB        0T     ; x=232;=4.549v;=0.0dF
 F2E9      00        7250          DB        0T     ; x=233;=4.569v;=-1.5dF
 F2EA      00        7251          DB        0T     ; x=234;=4.588v;=-3.1dF
 F2EB      00        7252          DB        0T     ; x=235;=4.608v;=-4.7dF
 F2EC      00        7253          DB        0T     ; x=236;=4.627v;=-6.4dF
 F2ED      00        7254          DB        0T     ; x=237;=4.647v;=-8.1dF
 F2EE      00        7255          DB        0T     ; x=238;=4.667v;=-10.0dF
 F2EF      00        7256          DB        0T     ; x=239;=4.686v;=-11.9dF
 F2F0      00        7257          DB        0T     ; x=240;=4.706v;=-13.9dF
 F2F1      00        7258          DB        0T     ; x=241;=4.725v;=-16.1dF
 F2F2      00        7259          DB        0T     ; x=242;=4.745v;=-18.3dF
 F2F3      00        7260          DB        0T     ; x=243;=4.765v;=-20.8dF
 F2F4      00        7261          DB        0T     ; x=244;=4.784v;=-23.4dF
 F2F5      00        7262          DB        0T     ; x=245;=4.804v;=-26.2dF
 F2F6      00        7263          DB        0T     ; x=246;=4.824v;=-29.2dF
 F2F7      00        7264          DB        0T     ; x=247;=4.843v;=-32.6dF
 F2F8      00        7265          DB        0T     ; x=248;=4.863v;=-36.4dF
 F2F9      00        7266          DB        0T     ; x=249;=4.882v;=-40.6dF
 F2FA      00        7267          DB        0T     ; x=250;=4.902v;=-45.6dF
 F2FB      00        7268          DB        0T     ; x=251;=4.922v;=-51.5dF
 F2FC      00        7269          DB        0T     ; x=252;=4.941v;=-58.9dF
 F2FD      00        7270          DB        0T     ; x=253;=4.961v;=-68.9dF
 F2FE      00        7271          DB        0T     ; x=254;=4.980v;=-85.1dF
 F2FF      A0        7272          DB      160T     ; x=255;=5.000v;=sens fail
 F300                7273       include "LinePrs.inc"   ; table=LinePress:,  offset=Lprs, result=Lpsi
                     7274  Linepress:                                   
 F300      00        7275       DB      0T       ; x=000        ;=0.000v        ;=sens fail
 F301      00        7276       DB      0T       ; x=001        ;=0.020v        
 F302      00        7277       DB      0T       ; x=002        ;=0.039v        
 F303      00        7278       DB      0T       ; x=003        ;=0.059v        
 F304      00        7279       DB      0T       ; x=004        ;=0.078v        
 F305      00        7280       DB      0T       ; x=005        ;=0.098v        
 F306      00        7281       DB      0T       ; x=006        ;=0.118v        
 F307      00        7282       DB      0T       ; x=007        ;=0.137v        
 F308      00        7283       DB      0T       ; x=008        ;=0.157v        
 F309      00        7284       DB      0T       ; x=009        ;=0.176v        
 F30A      00        7285       DB      0T       ; x=010        ;=0.196v        
 F30B      00        7286       DB      0T       ; x=011        ;=0.216v        
 F30C      00        7287       DB      0T       ; x=012        ;=0.235v        
 F30D      00        7288       DB      0T       ; x=013        ;=0.255v        
 F30E      00        7289       DB      0T       ; x=014        ;=0.275v        
 F30F      00        7290       DB      0T       ; x=015        ;=0.294v
 F310      00        7291       DB      0T       ; x=016        ;=0.314v
 F311      00        7292       DB      0T       ; x=017        ;=0.333v
 F312      00        7293       DB      0T       ; x=018        ;=0.353v
 F313      00        7294       DB      0T       ; x=019        ;=0.373v
 F314      00        7295       DB      0T       ; x=020        ;=0.392v
 F315      00        7296       DB      0T       ; x=021        ;=0.412v
 F316      00        7297       DB      0T       ; x=022        ;=0.431v
 F317      00        7298       DB      0T       ; x=023        ;=0.451v
 F318      00        7299       DB      0T       ; x=024        ;=0.471v
 F319      00        7300       DB      0T       ; x=025        ;=0.490v
 F31A      01        7301       DB      1T       ; x=026        ;=0.510v
 F31B      02        7302       DB      2T       ; x=027        ;=0.529v
 F31C      04        7303       DB      4T       ; x=028        ;=0.549v
 F31D      05        7304       DB      5T       ; x=029        ;=0.569v
 F31E      06        7305       DB      6T       ; x=030        ;=0.588v
 F31F      07        7306       DB      7T       ; x=031        ;=0.608v
 F320      09        7307       DB      9T       ; x=032        ;=0.627v
 F321      09        7308       DB      9T       ; x=033        ;=0.647v
 F322      0A        7309       DB      10T      ; x=034        ;=0.667v
 F323      0C        7310       DB      12T      ; x=035        ;=0.686v
 F324      0E        7311       DB      14T      ; x=036        ;=0.706v
 F325      0F        7312       DB      15T      ; x=037        ;=0.725v
 F326      10        7313       DB      16T      ; x=038        ;=0.745v
 F327      11        7314       DB      17T      ; x=039        ;=0.765v
 F328      12        7315       DB      18T      ; x=040        ;=0.784v
 F329      14        7316       DB      20T      ; x=041        ;=0.804v
 F32A      15        7317       DB      21T      ; x=042        ;=0.824v
 F32B      16        7318       DB      22T      ; x=043        ;=0.843v
 F32C      17        7319       DB      23T      ; x=044        ;=0.863v
 F32D      19        7320       DB      25T      ; x=045        ;=0.882v
 F32E      1A        7321       DB      26T      ; x=046        ;=0.902v
 F32F      1B        7322       DB      27T      ; x=047        ;=0.922v
 F330      1C        7323       DB      28T      ; x=048        ;=0.941v
 F331      1E        7324       DB      30T      ; x=049        ;=0.961v
 F332      1F        7325       DB      31T      ; x=050        ;=0.980v
 F333      20        7326       DB      32T      ; x=051        ;=1.000v
 F334      21        7327       DB      33T      ; x=052        ;=1.020v
 F335      22        7328       DB      34T      ; x=053        ;=1.039v
 F336      24        7329       DB      36T      ; x=054        ;=1.059v
 F337      25        7330       DB      37T      ; x=055        ;=1.078v
 F338      26        7331       DB      38T      ; x=056        ;=1.096v
 F339      27        7332       DB      39T      ; x=057        ;=1.118v
 F33A      29        7333       DB      41T      ; x=058        ;=1.137v
 F33B      2A        7334       DB      42T      ; x=059        ;=1.157v
 F33C      2B        7335       DB      43T      ; x=060        ;=1.176v
 F33D      2C        7336       DB      44T      ; x=061        ;=1,196v
 F33E      2E        7337       DB      46T      ; x=062        ;=1,216v
 F33F      2F        7338       DB      47T      ; x=063        ;=1.235v
 F340      30        7339       DB      48T      ; x=064        ;=1.255v
 F341      31        7340       DB      49T      ; x=065        ;=1.275v
 F342      32        7341       DB      50T      ; x=066        ;=1.294v
 F343      34        7342       DB      52T      ; x=067        ;=1.314v
 F344      35        7343       DB      53T      ; x=068        ;=1.333v
 F345      36        7344       DB      54T      ; x=069        ;=1.353v
 F346      37        7345       DB      55T      ; x=070        ;=1.373v
 F347      39        7346       DB      57T      ; x=071        ;=1.392v
 F348      3A        7347       DB      58T      ; x=072        ;=1.412v
 F349      3B        7348       DB      59T      ; x=073        ;=1.431v
 F34A      3C        7349       DB      60T      ; x=074        ;=1.451v
 F34B      3E        7350       DB      62T      ; x=075        ;=1.471v
 F34C      3F        7351       DB      63T      ; x=076        ;=1.490v
 F34D      40        7352       DB      64T      ; x=077        ;=1.510v
 F34E      41        7353       DB      65T      ; x=078        ;=1.529v
 F34F      42        7354       DB      66T      ; x=079        ;=1.549v
 F350      44        7355       DB      68T      ; x=080        ;=1.569v
 F351      45        7356       DB      69T      ; x=081        ;=1.588v
 F352      46        7357       DB      70T      ; x=082        ;=1.608v
 F353      47        7358       DB      71T      ; x=083        ;=1.627v
 F354      49        7359       DB      73T      ; x=084        ;=1.647v
 F355      4A        7360       DB      74T      ; x=085        ;=1.667v
 F356      4B        7361       DB      75T      ; x=086        ;=1.686v
 F357      4C        7362       DB      76T      ; x=087        ;=1.706v
 F358      4D        7363       DB      77T      ; x=088        ;=1.725v
 F359      4F        7364       DB      79T      ; x=089        ;=1.745v
 F35A      50        7365       DB      80T      ; x=090        ;=1.765v
 F35B      51        7366       DB      81T      ; x=091        ;=1.784v
 F35C      52        7367       DB      82T      ; x=092        ;=1.804v
 F35D      54        7368       DB      84T      ; x=093        ;=1.824v
 F35E      55        7369       DB      85T      ; x=094        ;=1.843v
 F35F      56        7370       DB      86T      ; x=095        ;=1.863v
 F360      57        7371       DB      87T      ; x=096        ;=1.882v
 F361      59        7372       DB      89T      ; x=097        ;=1.902v
 F362      5A        7373       DB      90T      ; x=098        ;=1.922v
 F363      5B        7374       DB      91T      ; x=099        ;=1.941v
 F364      5C        7375       DB      92T      ; x=100        ;=1.961v
 F365      5D        7376       DB      93T      ; x=101        ;=1.980v
 F366      5F        7377       DB      95T      ; x=102        ;=2.000v
 F367      60        7378       DB      96T      ; x=103        ;=2.020v
 F368      61        7379       DB      97T      ; x=104        ;=2.039v
 F369      62        7380       DB      98T      ; x=105        ;=2.059v
 F36A      64        7381       DB      100T     ; x=106        ;=2.078v
 F36B      65        7382       DB      101T     ; x=107        ;=2.098v
 F36C      66        7383       DB      102T     ; x=108        ;=2.118v
 F36D      67        7384       DB      103T     ; x=109        ;=2.137v
 F36E      69        7385       DB      105T     ; x=110        ;=2.157v
 F36F      6A        7386       DB      106T     ; x=111        ;=2.176v
 F370      6B        7387       DB      107T     ; x=112        ;=2.196v
 F371      6C        7388       DB      108T     ; x=113        ;=2.216v
 F372      6D        7389       DB      109T     ; x=114        ;=2.235v
 F373      6F        7390       DB      111T     ; x=115        ;=2.255v
 F374      70        7391       DB      112T     ; x=116        ;=2.275v
 F375      71        7392       DB      113T     ; x=117        ;=2.294v
 F376      72        7393       DB      114T     ; x=118        ;=2.314v
 F377      74        7394       DB      116T     ; x=119        ;=2.333v
 F378      75        7395       DB      117T     ; x=120        ;=2.353v
 F379      76        7396       DB      118T     ; x=121        ;=2.373v
 F37A      77        7397       DB      119T     ; x=122        ;=2.392v
 F37B      79        7398       DB      121T     ; x=123        ;=2.412v
 F37C      7A        7399       DB      122T     ; x=124        ;=2.431v
 F37D      7B        7400       DB      123T     ; x=125        ;=2.451v
 F37E      7C        7401       DB      124T     ; x=126        ;=2.471v
 F37F      7D        7402       DB      125T     ; x=127        ;=2.490v
 F380      7F        7403       DB      127T     ; x=128        ;=2.510v
 F381      80        7404       DB      128T     ; x=129        ;=2.529v
 F382      81        7405       DB      129T     ; x=130        ,=2.549v
 F383      82        7406       DB      130T     ; x=131        ;=2.569v
 F384      84        7407       DB      132T     ; x=132        ;=2.588v
 F385      85        7408       DB      133T     ; x=133        ;=2.608v
 F386      86        7409       DB      134T     ; x=134        ;=2.627v
 F387      87        7410       DB      135T     ; x=135        ;=2.647v
 F388      89        7411       DB      137T     ; x=136        ;=2.667v
 F389      8A        7412       DB      138T     ; x=137        ;=2.686v
 F38A      8B        7413       DB      139T     ; x=138        ;=2.706v
 F38B      8C        7414       DB      140T     ; x=139        ;=2.725v
 F38C      8D        7415       DB      141T     ; x=140        ;=2.745v
 F38D      8F        7416       DB      143T     ; x=141        ;=2.765v
 F38E      90        7417       DB      144T     ; x=142        ;=2.784v
 F38F      91        7418       DB      145T     ; x=143        ;=2.804v
 F390      92        7419       DB      146T     ; x=144        ;=0.824v
 F391      94        7420       DB      148T     ; x=145        ;=2.843v
 F392      95        7421       DB      149T     ; x=146        ;=2.863v
 F393      96        7422       DB      150T     ; x=147        ;=2.882v
 F394      97        7423       DB      151T     ; x=148        ;=2.902v
 F395      99        7424       DB      153T     ; x=149        ;=2.922v
 F396      9A        7425       DB      154T     ; x=150        ;=2.941v
 F397      9B        7426       DB      155T     ; x=151        ;=2.961v
 F398      9C        7427       DB      156T     ; x=152        ;=2.980v
 F399      9D        7428       DB      157T     ; x=153        ;=3.000v
 F39A      9F        7429       DB      159T     ; x=154        ;=3.020v
 F39B      A0        7430       DB      160T     ; x=155        ;=3.039v
 F39C      A1        7431       DB      161T     ; x=156        ;=3.059v
 F39D      A2        7432       DB      162T     ; x=157        ;=3.078v
 F39E      A4        7433       DB      164T     ; x=158        ;=3.098v
 F39F      A5        7434       DB      165T     ; x=159        ;=3.118v
 F3A0      A6        7435       DB      166T     ; x=160        ;=3.137v
 F3A1      A7        7436       DB      167T     ; x=161        ;=3.157v
 F3A2      A9        7437       DB      169T     ; x=162        ;=3.176v
 F3A3      AA        7438       DB      170T     ; x=163        ;=3.196v
 F3A4      AB        7439       DB      171T     ; x=164        ;=3.216v
 F3A5      AC        7440       DB      172T     ; x=165        ;=3.235v
 F3A6      AD        7441       DB      173T     ; x=166        ;=3.255v
 F3A7      AF        7442       DB      175T     ; x=167        ;=3.275v
 F3A8      B0        7443       DB      176T     ; x=168        ;=3.294v
 F3A9      B1        7444       DB      177T     ; x=169        ;=3.314v
 F3AA      B2        7445       DB      178T     ; x=170        ;=3.333v
 F3AB      B4        7446       DB      180T     ; x=171        ;=3.353v
 F3AC      B5        7447       DB      181T     ; x=172        ;=3.373v
 F3AD      B6        7448       DB      182T     ; x=173        ;=3.392v
 F3AE      B7        7449       DB      183T     ; x=174        ;=3.412v
 F3AF      B9        7450       DB      185T     ; x=175        ;=3.431v
 F3B0      BA        7451       DB      186T     ; x=176        ;=3.451v
 F3B1      BB        7452       DB      187T     ; x=177        ;=3.471v
 F3B2      BC        7453       DB      188T     ; x=178        ;=3.490v
 F3B3      BD        7454       DB      189T     ; x=179        ;=3.510v
 F3B4      BF        7455       DB      191T     ; x=180        ;=3.529v
 F3B5      C0        7456       DB      192T     ; x=181        ;=3.549v
 F3B6      C1        7457       DB      193T     ; x=182        ;=3.569v
 F3B7      C2        7458       DB      194T     ; x=183        ;=3.588v
 F3B8      C4        7459       DB      196T     ; x=184        ;=3.608v
 F3B9      C5        7460       DB      197T     ; x=185        ;=3.627v
 F3BA      C6        7461       DB      198T     ; x=186        ;=3.647v
 F3BB      C7        7462       DB      199T     ; x=187        ;=3.667v
 F3BC      C8        7463       DB      200T     ; x=188        ;=3.686v
 F3BD      CA        7464       DB      202T     ; x=189        ;=3.706v
 F3BE      CB        7465       DB      203T     ; x=190        ;=3.725v
 F3BF      CC        7466       DB      204T     ; x=191        ;=3.745v
 F3C0      CD        7467       DB      205T     ; x=192        ;=3.765v
 F3C1      CF        7468       DB      207T     ; x=193        ;=3.784v
 F3C2      D0        7469       DB      208T     ; x=194        ;=3.804v
 F3C3      D1        7470       DB      209T     ; x=195        ;=3.824v
 F3C4      D2        7471       DB      210T     ; x=196        ;=3.843v
 F3C5      D4        7472       DB      212T     ; x=197        ;=3.863v
 F3C6      D5        7473       DB      213T     ; x=198        ;=3.882v
 F3C7      D6        7474       DB      214T     ; x=199        ;=3.902v
 F3C8      D7        7475       DB      215T     ; x=200        ;=3.922v
 F3C9      D8        7476       DB      216T     ; x=201        ;=3.941v
 F3CA      DA        7477       DB      218T     ; x=202        ;=3.961v
 F3CB      DB        7478       DB      219T     ; x=203        ;=3.980v
 F3CC      DC        7479       DB      220T     ; x=204        ;=4.000v
 F3CD      DD        7480       DB      221T     ; x=205        ;=4.020v
 F3CE      DF        7481       DB      223T     ; x=206        ;=4.039v
 F3CF      E0        7482       DB      224T     ; x=207        ;=4.059v
 F3D0      E1        7483       DB      225T     ; x=208        ;=4.078v
 F3D1      E2        7484       DB      226T     ; x=209        ;=4.098v
 F3D2      E4        7485       DB      228T     ; x=210        ;=4.118v
 F3D3      E5        7486       DB      229T     ; x=211        ;=4.137v
 F3D4      E6        7487       DB      230T     ; x=212        ;=4.157v
 F3D5      E7        7488       DB      231T     ; x=213        ;=4.176v
 F3D6      E8        7489       DB      232T     ; x=214        ;=4.196v
 F3D7      EA        7490       DB      234T     ; x=215        ;=4.216v
 F3D8      EB        7491       DB      235T     ; x=216        ;=4.235v
 F3D9      EC        7492       DB      236T     ; x=217        ;=4.255v
 F3DA      ED        7493       DB      237T     ; x=218        ;=4.275v
 F3DB      EF        7494       DB      239T     ; x=219        ;=4.294v
 F3DC      F0        7495       DB      240T     ; x=220        ;=4.314v
 F3DD      F1        7496       DB      241T     ; x=221        ;=4.333v
 F3DE      F2        7497       DB      242T     ; x=222        ;=4.353v
 F3DF      F4        7498       DB      244T     ; x=223        ;=4.373v
 F3E0      F5        7499       DB      245T     ; x=224        ;=4.392v
 F3E1      F6        7500       DB      246T     ; x=225        ;=4.412v
 F3E2      F7        7501       DB      247T     ; x=226        ;=4.431v
 F3E3      F8        7502       DB      248T     ; x=227        ;=4.451v
 F3E4      F9        7503       DB      249T     ; x=228        ;=4.471v
 F3E5      FB        7504       DB      251T     ; x=229        ;=4.490v
 F3E6      FC        7505       DB      252T     ; x=230        ;=4.510v
 F3E7      FD        7506       DB      253T     ; x=231        ;=4.529v
 F3E8      FF        7507       DB      255T     ; x=232        ;=4.549v
 F3E9      FF        7508       DB      255T     ; x=233        ;=4.569v
 F3EA      FF        7509       DB      255T     ; x=234        ;=4.588v
 F3EB      FF        7510       DB      255T     ; x=235        ;=4.608v
 F3EC      FF        7511       DB      255T     ; x=236        ;=4.627v
 F3ED      FF        7512       DB      255T     ; x=237        ;=4.647v
 F3EE      FF        7513       DB      255T     ; x=238        ;=4.667v
 F3EF      FF        7514       DB      255T     ; x=239        ;=4.686v
 F3F0      FF        7515       DB      255T     ; x=240        ;=4.706v
 F3F1      FF        7516       DB      255T     ; x=241        ;=4.725v
 F3F2      FF        7517       DB      255T     ; x=242        ;=4.745v
 F3F3      FF        7518       DB      255T     ; x=243        ;=4.765v
 F3F4      FF        7519       DB      255T     ; x=244        ;=4.784v
 F3F5      FF        7520       DB      255T     ; x=245        ;=4.804v
 F3F6      FF        7521       DB      255T     ; x=246        ;=4.824v
 F3F7      FF        7522       DB      255T     ; x=247        ;=4.843v
 F3F8      FF        7523       DB      255T     ; x=248        ;=4.863v
 F3F9      FF        7524       DB      255T     ; x=249        ;=4.882v
 F3FA      FF        7525       DB      255T     ; x=250        ;=4.902v
 F3FB      FF        7526       DB      255T     ; x=251        ;=4.922v
 F3FC      FF        7527       DB      255T     ; x=252        ;=4.941v
 F3FD      FF        7528       DB      255T     ; x=253        ;=4.961v
 F3FE      00        7529       DB      0T       ; x=254        ;=4.980v
 F3FF      00        7530       DB      0T       ; x=255        ;=5.000v        ;=sens fail
 F400                7531       include "IdleCntrl.inc" ; table=IACcntrl:,   offset=IAC,  result=IACpw
                     7532  IACcntrl:                                    
 F400      00        7533       DB      0T       ; x=000        ;=0.000v
 F401      00        7534       DB      0T       ; x=001        ;=0.020v        
 F402      00        7535       DB      0T       ; x=002        ;=0.039v        
 F403      00        7536       DB      0T       ; x=003        ;=0.059v        
 F404      00        7537       DB      0T       ; x=004        ;=0.078v        
 F405      01        7538       DB      1T       ; x=005        ;=0.098v        
 F406      01        7539       DB      1T       ; x=006        ;=0.118v        
 F407      01        7540       DB      1T       ; x=007        ;=0.137v        
 F408      01        7541       DB      1T       ; x=008        ;=0.157v        
 F409      01        7542       DB      1T       ; x=009        ;=0.176v        
 F40A      02        7543       DB      2T       ; x=010        ;=0.196v        
 F40B      02        7544       DB      2T       ; x=011        ;=0.216v        
 F40C      02        7545       DB      2T       ; x=012        ;=0.235v        
 F40D      02        7546       DB      2T       ; x=013        ;=0.255v        
 F40E      02        7547       DB      2T       ; x=014        ;=0.275v        
 F40F      03        7548       DB      3T       ; x=015        ;=0.294v
 F410      03        7549       DB      3T       ; x=016        ;=0.314v
 F411      03        7550       DB      3T       ; x=017        ;=0.333v
 F412      03        7551       DB      3T       ; x=018        ;=0.353v
 F413      03        7552       DB      3T       ; x=019        ;=0.373v
 F414      04        7553       DB      4T       ; x=020        ;=0.392v
 F415      04        7554       DB      4T       ; x=021        ;=0.412v
 F416      04        7555       DB      4T       ; x=022        ;=0.431v
 F417      04        7556       DB      4T       ; x=023        ;=0.451v
 F418      04        7557       DB      4T       ; x=024        ;=0.471v
 F419      04        7558       DB      4T       ; x=025        ;=0.490v
 F41A      05        7559       DB      5T       ; x=026        ;=0.510v
 F41B      05        7560       DB      5T       ; x=027        ;=0.529v
 F41C      05        7561       DB      5T       ; x=028        ;=0.549v
 F41D      05        7562       DB      5T       ; x=029        ;=0.569v
 F41E      05        7563       DB      5T       ; x=030        ;=0.588v
 F41F      06        7564       DB      6T       ; x=031        ;=0.608v
 F420      06        7565       DB      6T       ; x=032        ;=0.627v
 F421      06        7566       DB      6T       ; x=033        ;=0.647v
 F422      06        7567       DB      6T       ; x=034        ;=0.667v
 F423      06        7568       DB      6T       ; x=035        ;=0.686v
 F424      07        7569       DB      7T       ; x=036        ;=0.706v
 F425      07        7570       DB      7T       ; x=037        ;=0.725v
 F426      07        7571       DB      7T       ; x=038        ;=0.745v
 F427      07        7572       DB      7T       ; x=039        ;=0.765v
 F428      07        7573       DB      7T       ; x=040        ;=0.784v
 F429      08        7574       DB      8T       ; x=041        ;=0.804v
 F42A      08        7575       DB      8T       ; x=042        ;=0.824v
 F42B      08        7576       DB      8T       ; x=043        ;=0.843v
 F42C      08        7577       DB      8T       ; x=044        ;=0.863v
 F42D      08        7578       DB      8T       ; x=045        ;=0.882v
 F42E      09        7579       DB      9T       ; x=046        ;=0.902v
 F42F      09        7580       DB      9T       ; x=047        ;=0.922v
 F430      09        7581       DB      9T       ; x=048        ;=0.941v
 F431      09        7582       DB      9T       ; x=049        ;=0.961v
 F432      09        7583       DB      9T       ; x=050        ;=0.980v
 F433      0A        7584       DB      10T      ; x=051        ;=1.000v
 F434      0A        7585       DB      10T      ; x=052        ;=1.020v
 F435      0A        7586       DB      10T      ; x=053        ;=1.039v
 F436      0A        7587       DB      10T      ; x=054        ;=1.059v
 F437      0A        7588       DB      10T      ; x=055        ;=1.078v
 F438      0B        7589       DB      11T      ; x=056        ;=1.096v
 F439      0B        7590       DB      11T      ; x=057        ;=1.118v
 F43A      0B        7591       DB      11T      ; x=058        ;=1.137v
 F43B      0B        7592       DB      11T      ; x=059        ;=1.157v
 F43C      0B        7593       DB      11T      ; x=060        ;=1.176v
 F43D      0C        7594       DB      12T      ; x=061        ;=1,196v
 F43E      0C        7595       DB      12T      ; x=062        ;=1,216v
 F43F      0C        7596       DB      12T      ; x=063        ;=1.235v
 F440      0C        7597       DB      12T      ; x=064        ;=1.255v
 F441      0C        7598       DB      12T      ; x=065        ;=1.275v
 F442      0C        7599       DB      12T      ; x=066        ;=1.294v
 F443      0D        7600       DB      13T      ; x=067        ;=1.314v
 F444      0D        7601       DB      13T      ; x=068        ;=1.333v
 F445      0D        7602       DB      13T      ; x=069        ;=1.353v
 F446      0D        7603       DB      13T      ; x=070        ;=1.373v
 F447      0D        7604       DB      13T      ; x=071        ;=1.392v
 F448      0E        7605       DB      14T      ; x=072        ;=1.412v
 F449      0E        7606       DB      14T      ; x=073        ;=1.431v
 F44A      0E        7607       DB      14T      ; x=074        ;=1.451v
 F44B      0E        7608       DB      14T      ; x=075        ;=1.471v
 F44C      0E        7609       DB      14T      ; x=076        ;=1.490v
 F44D      0F        7610       DB      15T      ; x=077        ;=1.510v
 F44E      0F        7611       DB      15T      ; x=078        ;=1.529v
 F44F      0F        7612       DB      15T      ; x=079        ;=1.549v
 F450      0F        7613       DB      15T      ; x=080        ;=1.569v
 F451      0F        7614       DB      15T      ; x=081        ;=1.588v
 F452      10        7615       DB      16T      ; x=082        ;=1.608v
 F453      10        7616       DB      16T      ; x=083        ;=1.627v
 F454      10        7617       DB      16T      ; x=084        ;=1.647v
 F455      10        7618       DB      16T      ; x=085        ;=1.667v
 F456      10        7619       DB      16T      ; x=086        ;=1.686v
 F457      10        7620       DB      16T      ; x=087        ;=1.706v
 F458      11        7621       DB      17T      ; x=088        ;=1.725v
 F459      11        7622       DB      17T      ; x=089        ;=1.745v
 F45A      11        7623       DB      17T      ; x=090        ;=1.765v
 F45B      11        7624       DB      17T      ; x=091        ;=1.784v
 F45C      11        7625       DB      17T      ; x=092        ;=1.804v
 F45D      12        7626       DB      18T      ; x=093        ;=1.824v
 F45E      12        7627       DB      18T      ; x=094        ;=1.843v
 F45F      12        7628       DB      18T      ; x=095        ;=1.863v
 F460      12        7629       DB      18T      ; x=096        ;=1.882v
 F461      12        7630       DB      18T      ; x=097        ;=1.902v
 F462      13        7631       DB      19T      ; x=098        ;=1.922v
 F463      13        7632       DB      19T      ; x=099        ;=1.941v
 F464      13        7633       DB      19T      ; x=100        ;=1.961v
 F465      13        7634       DB      19T      ; x=101        ;=1.980v
 F466      13        7635       DB      19T      ; x=102        ;=2.000v
 F467      14        7636       DB      20T      ; x=103        ;=2.020v
 F468      14        7637       DB      20T      ; x=104        ;=2.039v
 F469      14        7638       DB      20T      ; x=105        ;=2.059v
 F46A      14        7639       DB      20T      ; x=106        ;=2.078v
 F46B      14        7640       DB      20T      ; x=107        ;=2.098v
 F46C      14        7641       DB      20T      ; x=108        ;=2.118v
 F46D      15        7642       DB      21T      ; x=109        ;=2.137v
 F46E      15        7643       DB      21T      ; x=110        ;=2.157v
 F46F      15        7644       DB      21T      ; x=111        ;=2.176v
 F470      15        7645       DB      21T      ; x=112        ;=2.196v
 F471      15        7646       DB      21T      ; x=113        ;=2.216v
 F472      16        7647       DB      22T      ; x=114        ;=2.235v
 F473      16        7648       DB      22T      ; x=115        ;=2.255v
 F474      16        7649       DB      22T      ; x=116        ;=2.275v
 F475      16        7650       DB      22T      ; x=117        ;=2.294v
 F476      16        7651       DB      22T      ; x=118        ;=2.314v
 F477      17        7652       DB      23T      ; x=119        ;=2.333v
 F478      17        7653       DB      23T      ; x=120        ;=2.353v
 F479      17        7654       DB      23T      ; x=121        ;=2.373v
 F47A      17        7655       DB      23T      ; x=122        ;=2.392v
 F47B      17        7656       DB      23T      ; x=123        ;=2.412v
 F47C      18        7657       DB      24T      ; x=124        ;=2.431v
 F47D      18        7658       DB      24T      ; x=125        ;=2.451v
 F47E      18        7659       DB      24T      ; x=126        ;=2.471v
 F47F      18        7660       DB      24T      ; x=127        ;=2.490v
 F480      18        7661       DB      24T      ; x=128        ;=2.510v
 F481      19        7662       DB      25T      ; x=129        ;=2.529v
 F482      19        7663       DB      25T      ; x=130        ,=2.549v
 F483      19        7664       DB      25T      ; x=131        ;=2.569v
 F484      19        7665       DB      25T      ; x=132        ;=2.588v
 F485      19        7666       DB      25T      ; x=133        ;=2.608v
 F486      1A        7667       DB      26T      ; x=134        ;=2.627v
 F487      1A        7668       DB      26T      ; x=135        ;=2.647v
 F488      1A        7669       DB      26T      ; x=136        ;=2.667v
 F489      1A        7670       DB      26T      ; x=137        ;=2.686v
 F48A      1A        7671       DB      26T      ; x=138        ;=2.706v
 F48B      1B        7672       DB      27T      ; x=139        ;=2.725v
 F48C      1B        7673       DB      27T      ; x=140        ;=2.745v
 F48D      1B        7674       DB      27T      ; x=141        ;=2.765v
 F48E      1B        7675       DB      27T      ; x=142        ;=2.784v
 F48F      1B        7676       DB      27T      ; x=143        ;=2.804v
 F490      1C        7677       DB      28T      ; x=144        ;=0.824v
 F491      1C        7678       DB      28T      ; x=145        ;=2.843v
 F492      1C        7679       DB      28T      ; x=146        ;=2.863v
 F493      1C        7680       DB      28T      ; x=147        ;=2.882v
 F494      1C        7681       DB      28T      ; x=148        ;=2.902v
 F495      1D        7682       DB      29T      ; x=149        ;=2.922v
 F496      1D        7683       DB      29T      ; x=150        ;=2.941v
 F497      1D        7684       DB      29T      ; x=151        ;=2.961v
 F498      1D        7685       DB      29T      ; x=152        ;=2.980v
 F499      1D        7686       DB      29T      ; x=153        ;=3.000v
 F49A      1D        7687       DB      29T      ; x=154        ;=3.020v
 F49B      1E        7688       DB      30T      ; x=155        ;=3.039v
 F49C      1E        7689       DB      30T      ; x=156        ;=3.059v
 F49D      1E        7690       DB      30T      ; x=157        ;=3.078v
 F49E      1E        7691       DB      30T      ; x=158        ;=3.098v
 F49F      1E        7692       DB      30T      ; x=159        ;=3.118v
 F4A0      1F        7693       DB      31T      ; x=160        ;=3.137v
 F4A1      1F        7694       DB      31T      ; x=161        ;=3.157v
 F4A2      1F        7695       DB      31T      ; x=162        ;=3.176v
 F4A3      1F        7696       DB      31T      ; x=163        ;=3.196v
 F4A4      1F        7697       DB      31T      ; x=164        ;=3.216v
 F4A5      20        7698       DB      32T      ; x=165        ;=3.235v
 F4A6      20        7699       DB      32T      ; x=166        ;=3.255v
 F4A7      20        7700       DB      32T      ; x=167        ;=3.275v
 F4A8      20        7701       DB      32T      ; x=168        ;=3.294v
 F4A9      20        7702       DB      32T      ; x=169        ;=3.314v
 F4AA      21        7703       DB      33T      ; x=170        ;=3.333v
 F4AB      21        7704       DB      33T      ; x=171        ;=3.353v
 F4AC      21        7705       DB      33T      ; x=172        ;=3.373v
 F4AD      21        7706       DB      33T      ; x=173        ;=3.392v
 F4AE      21        7707       DB      33T      ; x=174        ;=3.412v
 F4AF      22        7708       DB      34T      ; x=175        ;=3.431v
 F4B0      22        7709       DB      34T      ; x=176        ;=3.451v
 F4B1      22        7710       DB      34T      ; x=177        ;=3.471v
 F4B2      22        7711       DB      34T      ; x=178        ;=3.490v
 F4B3      22        7712       DB      34T      ; x=179        ;=3.510v
 F4B4      23        7713       DB      35T      ; x=180        ;=3.529v
 F4B5      23        7714       DB      35T      ; x=181        ;=3.549v
 F4B6      23        7715       DB      35T      ; x=182        ;=3.569v
 F4B7      23        7716       DB      35T      ; x=183        ;=3.588v
 F4B8      23        7717       DB      35T      ; x=184        ;=3.608v
 F4B9      24        7718       DB      36T      ; x=185        ;=3.627v
 F4BA      24        7719       DB      36T      ; x=186        ;=3.647v
 F4BB      24        7720       DB      36T      ; x=187        ;=3.667v
 F4BC      24        7721       DB      36T      ; x=188        ;=3.686v
 F4BD      24        7722       DB      36T      ; x=189        ;=3.706v
 F4BE      25        7723       DB      37T      ; x=190        ;=3.725v
 F4BF      25        7724       DB      37T      ; x=191        ;=3.745v
 F4C0      25        7725       DB      37T      ; x=192        ;=3.765v
 F4C1      25        7726       DB      37T      ; x=193        ;=3.784v
 F4C2      25        7727       DB      37T      ; x=194        ;=3.804v
 F4C3      25        7728       DB      37T      ; x=195        ;=3.824v
 F4C4      26        7729       DB      38T      ; x=196        ;=3.843v
 F4C5      26        7730       DB      38T      ; x=197        ;=3.863v
 F4C6      26        7731       DB      38T      ; x=198        ;=3.882v
 F4C7      26        7732       DB      38T      ; x=199        ;=3.902v
 F4C8      26        7733       DB      38T      ; x=200        ;=3.922v
 F4C9      27        7734       DB      39T      ; x=201        ;=3.941v
 F4CA      27        7735       DB      39T      ; x=202        ;=3.961v
 F4CB      27        7736       DB      39T      ; x=203        ;=3.980v
 F4CC      27        7737       DB      39T      ; x=204        ;=4.000v
 F4CD      27        7738       DB      39T      ; x=205        ;=4.020v
 F4CE      28        7739       DB      40T      ; x=206        ;=4.039v
 F4CF      29        7740       DB      41T      ; x=207        ;=4.059v
 F4D0      29        7741       DB      41T      ; x=208        ;=4.078v
 F4D1      29        7742       DB      41T      ; x=209        ;=4.098v
 F4D2      29        7743       DB      41T      ; x=210        ;=4.118v
 F4D3      2A        7744       DB      42T      ; x=211        ;=4.137v
 F4D4      2A        7745       DB      42T      ; x=212        ;=4.157v
 F4D5      2A        7746       DB      42T      ; x=213        ;=4.176v
 F4D6      2A        7747       DB      42T      ; x=214        ;=4.196v
 F4D7      2A        7748       DB      42T      ; x=215        ;=4.216v
 F4D8      2B        7749       DB      43T      ; x=216        ;=4.235v
 F4D9      2B        7750       DB      43T      ; x=217        ;=4.255v
 F4DA      2B        7751       DB      43T      ; x=218        ;=4.275v
 F4DB      2B        7752       DB      43T      ; x=219        ;=4.294v
 F4DC      2B        7753       DB      43T      ; x=220        ;=4.314v
 F4DD      2C        7754       DB      44T      ; x=221        ;=4.333v
 F4DE      2C        7755       DB      44T      ; x=222        ;=4.353v
 F4DF      2C        7756       DB      44T      ; x=223        ;=4.373v
 F4E0      2C        7757       DB      44T      ; x=224        ;=4.392v
 F4E1      2C        7758       DB      44T      ; x=225        ;=4.412v
 F4E2      2D        7759       DB      45T      ; x=226        ;=4.431v
 F4E3      2D        7760       DB      45T      ; x=227        ;=4.451v
 F4E4      2D        7761       DB      45T      ; x=228        ;=4.471v
 F4E5      2D        7762       DB      45T      ; x=229        ;=4.490v
 F4E6      2D        7763       DB      45T      ; x=230        ;=4.510v
 F4E7      2E        7764       DB      46T      ; x=231        ;=4.529v
 F4E8      2E        7765       DB      46T      ; x=232        ;=4.549v
 F4E9      2E        7766       DB      46T      ; x=233        ;=4.569v
 F4EA      2E        7767       DB      46T      ; x=234        ;=4.588v
 F4EB      2E        7768       DB      46T      ; x=235        ;=4.608v
 F4EC      2E        7769       DB      46T      ; x=236        ;=4.627v
 F4ED      2F        7770       DB      47T      ; x=237        ;=4.647v
 F4EE      2F        7771       DB      47T      ; x=238        ;=4.667v
 F4EF      2F        7772       DB      47T      ; x=239        ;=4.686v
 F4F0      2F        7773       DB      47T      ; x=240        ;=4.706v
 F4F1      2F        7774       DB      47T      ; x=241        ;=4.725v
 F4F2      30        7775       DB      48T      ; x=242        ;=4.745v
 F4F3      30        7776       DB      48T      ; x=243        ;=4.765v
 F4F4      30        7777       DB      48T      ; x=244        ;=4.784v
 F4F5      30        7778       DB      48T      ; x=245        ;=4.804v
 F4F6      30        7779       DB      48T      ; x=246        ;=4.824v
 F4F7      31        7780       DB      49T      ; x=247        ;=4.843v
 F4F8      31        7781       DB      49T      ; x=248        ;=4.863v
 F4F9      31        7782       DB      49T      ; x=249        ;=4.882v
 F4FA      31        7783       DB      49T      ; x=250        ;=4.902v
 F4FB      31        7784       DB      49T      ; x=251        ;=4.922v
 F4FC      32        7785       DB      50T      ; x=252        ;=4.941v
 F4FD      32        7786       DB      50T      ; x=253        ;=4.961v
 F4FE      32        7787       DB      50T      ; x=254        ;=4.980v
 F4FF      32        7788       DB      50T      ; x=255        ;=5.000v
 F500                7789       include "MLPSpos.inc"   ; table=MLPSposit:,  offset=MLPS, result=MLPSp
                     7790  MLPSposit:
 F500      07        7791       DB      7T       ; x=000        ;=0.000v        ;sens-fail
 F501      07        7792       DB      7T       ; x=001        ;=0.020v    ;sens-fail
 F502      00        7793       DB      0T       ; x=002        ;=0.039v
 F503      00        7794       DB      0T       ; x=003        ;=0.059v
 F504      00        7795       DB      0T       ; x=004        ;=0.078v
 F505      00        7796       DB      0T       ; x=005        ;=0.098v
 F506      00        7797       DB      0T       ; x=006        ;=0.118v
 F507      00        7798       DB      0T       ; x=007        ;=0.137v
 F508      00        7799       DB      0T       ; x=008        ;=0.157v
 F509      00        7800       DB      0T       ; x=009        ;=0.176v
 F50A      00        7801       DB      0T       ; x=010        ;=0.196v
 F50B      00        7802       DB      0T       ; x=011        ;=0.216v
 F50C      00        7803       DB      0T       ; x=012        ;=0.235v
 F50D      00        7804       DB      0T       ; x=013        ;=0.255v
 F50E      00        7805       DB      0T       ; x=014        ;=0.275v
 F50F      00        7806       DB      0T       ; x=015        ;=0.294v
 F510      00        7807       DB      0T       ; x=016        ;=0.314v
 F511      00        7808       DB      0T       ; x=017        ;=0.333v
 F512      00        7809       DB      0T       ; x=018        ;=0.353v
 F513      00        7810       DB      0T       ; x=019        ;=0.373v
 F514      00        7811       DB      0T       ; x=020        ;=0.392v
 F515      00        7812       DB      0T       ; x=021        ;=0.412v
 F516      00        7813       DB      0T       ; x=022        ;=0.431v
 F517      00        7814       DB      0T       ; x=023        ;=0.451v
 F518      00        7815       DB      0T       ; x=024        ;=0.471v
 F519      00        7816       DB      0T       ; x=025        ;=0.490v
 F51A      00        7817       DB      0T       ; x=026        ;=0.510v
 F51B      00        7818       DB      0T       ; x=027        ;=0.529v
 F51C      00        7819       DB      0T       ; x=028        ;=0.549v
 F51D      00        7820       DB      0T       ; x=029        ;=0.569v
 F51E      00        7821       DB      0T       ; x=030        ;=0.588v
 F51F      06        7822       DB      6T       ; x=031        ;=0.608v
 F520      06        7823       DB      6T       ; x=032        ;=0.627v
 F521      06        7824       DB      6T       ; x=033        ;=0.647v
 F522      06        7825       DB      6T       ; x=034        ;=0.667v
 F523      06        7826       DB      6T       ; x=035        ;=0.686v
 F524      06        7827       DB      6T       ; x=036        ;=0.706v
 F525      06        7828       DB      6T       ; x=037        ;=0.725v
 F526      00        7829       DB      0T       ; x=038        ;=0.745v
 F527      00        7830       DB      0T       ; x=039        ;=0.765v
 F528      00        7831       DB      0T       ; x=040        ;=0.784v
 F529      00        7832       DB      0T       ; x=041        ;=0.804v
 F52A      00        7833       DB      0T       ; x=042        ;=0.824v
 F52B      00        7834       DB      0T       ; x=043        ;=0.843v
 F52C      00        7835       DB      0T       ; x=044        ;=0.863v
 F52D      00        7836       DB      0T       ; x=045        ;=0.882v
 F52E      00        7837       DB      0T       ; x=046        ;=0.902v
 F52F      00        7838       DB      0T       ; x=047        ;=0.922v
 F530      00        7839       DB      0T       ; x=048        ;=0.941v
 F531      00        7840       DB      0T       ; x=049        ;=0.961v
 F532      00        7841       DB      0T       ; x=050        ;=0.980v
 F533      00        7842       DB      0T       ; x=051        ;=1.000v
 F534      00        7843       DB      0T       ; x=052        ;=1.020v
 F535      00        7844       DB      0T       ; x=053        ;=1.039v
 F536      00        7845       DB      0T       ; x=054        ;=1.059v
 F537      00        7846       DB      0T       ; x=055        ;=1.078v
 F538      00        7847       DB      0T       ; x=056        ;=1.096v
 F539      00        7848       DB      0T       ; x=057        ;=1.118v
 F53A      00        7849       DB      0T       ; x=058        ;=1.137v
 F53B      00        7850       DB      0T       ; x=059        ;=1.157v
 F53C      00        7851       DB      0T       ; x=060        ;=1.176v
 F53D      00        7852       DB      0T       ; x=061        ;=1,196v
 F53E      00        7853       DB      0T       ; x=062        ;=1,216v
 F53F      00        7854       DB      0T       ; x=063        ;=1.235v
 F540      00        7855       DB      0T       ; x=064        ;=1.255v
 F541      05        7856       DB      5T       ; x=065        ;=1.275v
 F542      05        7857       DB      5T       ; x=066        ;=1.294v
 F543      05        7858       DB      5T       ; x=067        ;=1.314v
 F544      05        7859       DB      5T       ; x=068        ;=1.333v
 F545      05        7860       DB      5T       ; x=069        ;=1.353v
 F546      05        7861       DB      5T       ; x=070        ;=1.373v
 F547      05        7862       DB      5T       ; x=071        ;=1.392v
 F548      05        7863       DB      5T       ; x=072        ;=1.412v
 F549      05        7864       DB      5T       ; x=073        ;=1.431v
 F54A      05        7865       DB      5T       ; x=074        ;=1.451v
 F54B      05        7866       DB      5T       ; x=075        ;=1.471v
 F54C      00        7867       DB      0T       ; x=076        ;=1.490v
 F54D      00        7868       DB      0T       ; x=077        ;=1.510v
 F54E      00        7869       DB      0T       ; x=078        ;=1.529v
 F54F      00        7870       DB      0T       ; x=079        ;=1.549v
 F550      00        7871       DB      0T       ; x=080        ;=1.569v
 F551      00        7872       DB      0T       ; x=081        ;=1.588v
 F552      00        7873       DB      0T       ; x=082        ;=1.608v
 F553      00        7874       DB      0T       ; x=083        ;=1.627v
 F554      00        7875       DB      0T       ; x=084        ;=1.647v
 F555      00        7876       DB      0T       ; x=085        ;=1.667v
 F556      00        7877       DB      0T       ; x=086        ;=1.686v
 F557      00        7878       DB      0T       ; x=087        ;=1.706v
 F558      00        7879       DB      0T       ; x=088        ;=1.725v
 F559      00        7880       DB      0T       ; x=089        ;=1.745v
 F55A      00        7881       DB      0T       ; x=090        ;=1.765v
 F55B      00        7882       DB      0T       ; x=091        ;=1.784v
 F55C      00        7883       DB      0T       ; x=092        ;=1.804v
 F55D      00        7884       DB      0T       ; x=093        ;=1.824v
 F55E      00        7885       DB      0T       ; x=094        ;=1.843v
 F55F      00        7886       DB      0T       ; x=095        ;=1.863v
 F560      00        7887       DB      0T       ; x=096        ;=1.882v
 F561      00        7888       DB      0T       ; x=097        ;=1.902v
 F562      00        7889       DB      0T       ; x=098        ;=1.922v
 F563      00        7890       DB      0T       ; x=099        ;=1.941v
 F564      04        7891       DB      4T       ; x=100        ;=1.961v
 F565      04        7892       DB      4T       ; x=101        ;=1.980v
 F566      04        7893       DB      4T       ; x=102        ;=2.000v
 F567      04        7894       DB      4T       ; x=103        ;=2.020v
 F568      04        7895       DB      4T       ; x=104        ;=2.039v
 F569      04        7896       DB      4T       ; x=105        ;=2.059v
 F56A      04        7897       DB      4T       ; x=106        ;=2.078v
 F56B      04        7898       DB      4T       ; x=107        ;=2.098v
 F56C      04        7899       DB      4T       ; x=108        ;=2.118v
 F56D      04        7900       DB      4T       ; x=109        ;=2.137v
 F56E      04        7901       DB      4T       ; x=110        ;=2.157v
 F56F      04        7902       DB      4T       ; x=111        ;=2.176v
 F570      04        7903       DB      4T       ; x=112        ;=2.196v
 F571      04        7904       DB      4T       ; x=113        ;=2.216v
 F572      00        7905       DB      0T       ; x=114        ;=2.235v
 F573      00        7906       DB      0T       ; x=115        ;=2.255v
 F574      00        7907       DB      0T       ; x=116        ;=2.275v
 F575      00        7908       DB      0T       ; x=117        ;=2.294v
 F576      00        7909       DB      0T       ; x=118        ;=2.314v
 F577      00        7910       DB      0T       ; x=119        ;=2.333v
 F578      00        7911       DB      0T       ; x=120        ;=2.353v
 F579      00        7912       DB      0T       ; x=121        ;=2.373v
 F57A      00        7913       DB      0T       ; x=122        ;=2.392v
 F57B      00        7914       DB      0T       ; x=123        ;=2.412v
 F57C      00        7915       DB      0T       ; x=124        ;=2.431v
 F57D      00        7916       DB      0T       ; x=125        ;=2.451v
 F57E      00        7917       DB      0T       ; x=126        ;=2.471v
 F57F      00        7918       DB      0T       ; x=127        ;=2.490v
 F580      00        7919       DB      0T       ; x=128        ;=2.510v
 F581      00        7920       DB      0T       ; x=129        ;=2.529v
 F582      00        7921       DB      0T       ; x=130        ,=2.549v
 F583      00        7922       DB      0T       ; x=131        ;=2.569v
 F584      00        7923       DB      0T       ; x=132        ;=2.588v
 F585      00        7924       DB      0T       ; x=133        ;=2.608v
 F586      00        7925       DB      0T       ; x=134        ;=2.627v
 F587      00        7926       DB      0T       ; x=135        ;=2.647v
 F588      00        7927       DB      0T       ; x=136        ;=2.667v
 F589      00        7928       DB      0T       ; x=137        ;=2.686v
 F58A      03        7929       DB      3T       ; x=138        ;=2.706v
 F58B      03        7930       DB      3T       ; x=139        ;=2.725v
 F58C      03        7931       DB      3T       ; x=140        ;=2.745v
 F58D      03        7932       DB      3T       ; x=141        ;=2.765v
 F58E      03        7933       DB      3T       ; x=142        ;=2.784v
 F58F      03        7934       DB      3T       ; x=143        ;=2.804v
 F590      03        7935       DB      3T       ; x=144        ;=0.824v
 F591      03        7936       DB      3T       ; x=145        ;=2.843v
 F592      03        7937       DB      3T       ; x=146        ;=2.863v
 F593      03        7938       DB      3T       ; x=147        ;=2.882v
 F594      03        7939       DB      3T       ; x=148        ;=2.902v
 F595      03        7940       DB      3T       ; x=149        ;=2.922v
 F596      03        7941       DB      3T       ; x=150        ;=2.941v
 F597      03        7942       DB      3T       ; x=151        ;=2.961v
 F598      00        7943       DB      0T       ; x=152        ;=2.980v
 F599      00        7944       DB      0T       ; x=153        ;=3.000v
 F59A      00        7945       DB      0T       ; x=154        ;=3.020v
 F59B      00        7946       DB      0T       ; x=155        ;=3.039v
 F59C      00        7947       DB      0T       ; x=156        ;=3.059v
 F59D      00        7948       DB      0T       ; x=157        ;=3.078v
 F59E      00        7949       DB      0T       ; x=158        ;=3.098v
 F59F      00        7950       DB      0T       ; x=159        ;=3.118v
 F5A0      00        7951       DB      0T       ; x=160        ;=3.137v
 F5A1      00        7952       DB      0T       ; x=161        ;=3.157v
 F5A2      00        7953       DB      0T       ; x=162        ;=3.176v
 F5A3      00        7954       DB      0T       ; x=163        ;=3.196v
 F5A4      00        7955       DB      0T       ; x=164        ;=3.216v
 F5A5      00        7956       DB      0T       ; x=165        ;=3.235v
 F5A6      00        7957       DB      0T       ; x=166        ;=3.255v
 F5A7      00        7958       DB      0T       ; x=167        ;=3.275v
 F5A8      00        7959       DB      0T       ; x=168        ;=3.294v
 F5A9      00        7960       DB      0T       ; x=169        ;=3.314v
 F5AA      00        7961       DB      0T       ; x=170        ;=3.333v
 F5AB      00        7962       DB      0T       ; x=171        ;=3.353v
 F5AC      00        7963       DB      0T       ; x=172        ;=3.373v
 F5AD      00        7964       DB      0T       ; x=173        ;=3.392v
 F5AE      00        7965       DB      0T       ; x=174        ;=3.412v
 F5AF      00        7966       DB      0T       ; x=175        ;=3.431v
 F5B0      00        7967       DB      0T       ; x=176        ;=3.451v
 F5B1      00        7968       DB      0T       ; x=177        ;=3.471v
 F5B2      02        7969       DB      2T       ; x=178        ;=3.490v
 F5B3      02        7970       DB      2T       ; x=179        ;=3.510v
 F5B4      02        7971       DB      2T       ; x=180        ;=3.529v
 F5B5      02        7972       DB      2T       ; x=181        ;=3.549v
 F5B6      02        7973       DB      2T       ; x=182        ;=3.569v
 F5B7      02        7974       DB      2T       ; x=183        ;=3.588v
 F5B8      02        7975       DB      2T       ; x=184        ;=3.608v
 F5B9      02        7976       DB      2T       ; x=185        ;=3.627v
 F5BA      02        7977       DB      2T       ; x=186        ;=3.647v
 F5BB      02        7978       DB      2T       ; x=187        ;=3.667v
 F5BC      02        7979       DB      2T       ; x=188        ;=3.686v
 F5BD      02        7980       DB      2T       ; x=189        ;=3.706v
 F5BE      00        7981       DB      0T       ; x=190        ;=3.725v
 F5BF      00        7982       DB      0T       ; x=191        ;=3.745v
 F5C0      00        7983       DB      0T       ; x=192        ;=3.765v
 F5C1      00        7984       DB      0T       ; x=193        ;=3.784v
 F5C2      00        7985       DB      0T       ; x=194        ;=3.804v
 F5C3      00        7986       DB      0T       ; x=195        ;=3.824v
 F5C4      00        7987       DB      0T       ; x=196        ;=3.843v
 F5C5      00        7988       DB      0T       ; x=197        ;=3.863v
 F5C6      00        7989       DB      0T       ; x=198        ;=3.882v
 F5C7      00        7990       DB      0T       ; x=199        ;=3.902v
 F5C8      00        7991       DB      0T       ; x=200        ;=3.922v
 F5C9      00        7992       DB      0T       ; x=201        ;=3.941v
 F5CA      00        7993       DB      0T       ; x=202        ;=3.961v
 F5CB      00        7994       DB      0T       ; x=203        ;=3.980v
 F5CC      00        7995       DB      0T       ; x=204        ;=4.000v
 F5CD      00        7996       DB      0T       ; x=205        ;=4.020v
 F5CE      00        7997       DB      0T       ; x=206        ;=4.039v
 F5CF      00        7998       DB      0T       ; x=207        ;=4.059v
 F5D0      00        7999       DB      0T       ; x=208        ;=4.078v
 F5D1      00        8000       DB      0T       ; x=209        ;=4.098v
 F5D2      00        8001       DB      0T       ; x=210        ;=4.118v
 F5D3      00        8002       DB      0T       ; x=211        ;=4.137v
 F5D4      00        8003       DB      0T       ; x=212        ;=4.157v
 F5D5      00        8004       DB      0T       ; x=213        ;=4.176v
 F5D6      00        8005       DB      0T       ; x=214        ;=4.196v
 F5D7      00        8006       DB      0T       ; x=215        ;=4.216v
 F5D8      00        8007       DB      0T       ; x=216        ;=4.235v
 F5D9      00        8008       DB      0T       ; x=217        ;=4.255v
 F5DA      00        8009       DB      0T       ; x=218        ;=4.275v
 F5DB      00        8010       DB      0T       ; x=219        ;=4.294v
 F5DC      00        8011       DB      0T       ; x=220        ;=4.314v
 F5DD      00        8012       DB      0T       ; x=221        ;=4.333v
 F5DE      01        8013       DB      1T       ; x=222        ;=4.353v
 F5DF      01        8014       DB      1T       ; x=223        ;=4.373v
 F5E0      01        8015       DB      1T       ; x=224        ;=4.392v
 F5E1      01        8016       DB      1T       ; x=225        ;=4.412v
 F5E2      01        8017       DB      1T       ; x=226        ;=4.431v
 F5E3      01        8018       DB      1T       ; x=227        ;=4.451v
 F5E4      01        8019       DB      1T       ; x=228        ;=4.471v
 F5E5      00        8020       DB      0T       ; x=229        ;=4.490v
 F5E6      00        8021       DB      0T       ; x=230        ;=4.510v
 F5E7      00        8022       DB      0T       ; x=231        ;=4.529v
 F5E8      00        8023       DB      0T       ; x=232        ;=4.549v
 F5E9      00        8024       DB      0T       ; x=233        ;=4.569v
 F5EA      00        8025       DB      0T       ; x=234        ;=4.588v
 F5EB      00        8026       DB      0T       ; x=235        ;=4.608v
 F5EC      00        8027       DB      0T       ; x=236        ;=4.627v
 F5ED      00        8028       DB      0T       ; x=237        ;=4.647v
 F5EE      00        8029       DB      0T       ; x=238        ;=4.667v
 F5EF      00        8030       DB      0T       ; x=239        ;=4.686v
 F5F0      00        8031       DB      0T       ; x=240        ;=4.706v
 F5F1      00        8032       DB      0T       ; x=241        ;=4.725v
 F5F2      00        8033       DB      0T       ; x=242        ;=4.745v
 F5F3      00        8034       DB      0T       ; x=243        ;=4.765v
 F5F4      00        8035       DB      0T       ; x=244        ;=4.784v
 F5F5      00        8036       DB      0T       ; x=245        ;=4.804v
 F5F6      00        8037       DB      0T       ; x=246        ;=4.824v
 F5F7      00        8038       DB      0T       ; x=247        ;=4.843v
 F5F8      00        8039       DB      0T       ; x=248        ;=4.863v
 F5F9      00        8040       DB      0T       ; x=249        ;=4.882v
 F5FA      00        8041       DB      0T       ; x=250        ;=4.902v
 F5FB      00        8042       DB      0T       ; x=251        ;=4.922v
 F5FC      00        8043       DB      0T       ; x=252        ;=4.941v
 F5FD      00        8044       DB      0T       ; x=253        ;=4.961v
 F5FE      07        8045       DB      7T       ; x=254        ;=4.980v    ;sens-fail
 F5FF      07        8046       DB      7T       ; x=255        ;=5.000v        ;sens-fail
                     8047  
                     8048  
                     8049  
                     8050  ;***************************************************************************
                     8051  ; - Start of bootloader-defined jump table/vector
                     8052  ;***************************************************************************
                     8053  
 FAC3                8054       org     $FAC3              ; start bootloader-defined jump table/vector
                     8055                                  ;(64195)
 FAC3      12        8056       db      $12                ; scbr regi init value
 FAC4      01        8057       db      %00000001          ; config1
 FAC5      01        8058       db      %00000001          ; config2
 FAC6      8100      8059       dw      {rom_start + 256}  ; megasquirt code start
 FAC8      FB00      8060       dw      $FB00              ; bootloader start(64256)
                     8061  
                     8062  ;****************************************************************************
                     8063  ; - Vector table (origin vec_timebase)
                     8064  ;****************************************************************************
                     8065  
 FACA      CC        8066          db      $CC
 FACB      8B78      8067       dw      Dummy          ;Time Base Vector
 FACD      CC        8068          db      $CC
 FACE      8B61      8069       dw      ADC_ISR        ;ADC Conversion Complete
 FAD0      CC        8070          db      $CC
 FAD1      8B4E      8071       dw      KEYBD_ISR      ;Keyboard Vector
 FAD3      CC        8072          db      $CC
 FAD4      8B12      8073       dw      SCITX_ISR      ;SCI Transmit Vector
 FAD6      CC        8074          db      $CC
 FAD7      8A51      8075       dw      SCIRCV_ISR     ;SCI Receive Vector
 FAD9      CC        8076          db      $CC
 FADA      8B78      8077       dw      Dummy          ;SCI Error Vecotr
 FADC      CC        8078          db      $CC
 FADD      8B78      8079       dw      Dummy          ;SPI Transmit Vector
 FADF      CC        8080          db      $CC
 FAE0      8B78      8081       dw      Dummy          ;SPI Receive Vector
 FAE2      CC        8082          db      $CC
 FAE3      8B78      8083       dw      Dummy        ;TIM2 Overflow Vector
 FAE5      CC        8084          db      $CC
 FAE6      8B78      8085       dw        Dummy        ;TIM2 Ch1 Vector
 FAE8      CC        8086          db      $CC
 FAE9      89A2      8087       dw      TIM2CH0_ISR    ;TIM2 Ch0 Vector
 FAEB      CC        8088          db      $CC
 FAEC      8992      8089       dw      TIM1OV_ISR     ;TIM1 Overflow Vector
 FAEE      CC        8090          db      $CC
 FAEF      8B78      8091       dw      Dummy          ;TIM1 Ch1 Vector
 FAF1      CC        8092          db      $CC
 FAF2      8B78      8093       dw      Dummy          ;TIM1 Ch0 Vector
 FAF4      CC        8094          db      $CC
 FAF5      8B78      8095       dw      Dummy          ;PLL Vector
 FAF7      CC        8096          db      $CC
 FAF8      8983      8097       dw      IRQ_ISR        ;IRQ Vector
 FAFA      CC        8098          db      $CC
 FAFB      8B78      8099       dw      Dummy          ;SWI Vector
 FAFD      CC        8100          db      $CC
 FAFE      8256      8101       dw      Start          ;Reset Vector
                     8102  
 FB00                8103       end
                     8104  
                     8105   

 Symbol Table 

ACCEL            0005
ACCEL_EPC        882E
ACK              0002
ACKK             0002
ACQ              0005
ADCC             0002
ADCH0            0000
ADCH1            0001
ADCH2            0002
ADCH3            0003
ADCH4            0004
ADCLK            003E
ADCO             0005
ADCWAIT          83C4
ADC_ISR          8B61
ADC_LOOKUPS      840C
ADICLK           0004
ADIV0            0005
ADIV1            0006
ADIV2            0007
ADR              003D
ADSCR            003C
ADSEL            006A
AIACCNT          00A5
AIEN             0006
ASCII_CR         000D
ASCII_LF         000A
AUTO             0007
AV_MPH           8512
AV_RPM           84B7
BAT              004B
BATVOLT          F100
BCFE             0007
BCS              0004
BKF              0001
BLANK_2          0149
BOOT             FBBB
BOOT1            FBD9
BOOT2            FBE0
BOOT3            FBFC
BOOT4            FC4A
BOOT5            FCBE
BOOT6            FCC6
BOOT7            FCCC
BOOTDONE         FBE6
BOOTDONE1        FBE9
BOOTDONE2        FBEB
BOOTEND          FDF8
BOOTPROG         FC04
BOOTPROG1        FC07
BOOTPROG2        FC14
BOOTPROG3        FC2D
BOOTPROG4        FC31
BOOTPROG5        FC42
BOOTPROG6        FC47
BOOTRESET        FB08
BOOTRESET1       FB59
BOOTRESET2       FB75
BOOTRESET3       FB7E
BOOTRESET4       FB87
BOOTRESET5       FB98
BOOTRESET6       FBA5
BOOTRESETUSER    FBA5
BOOT_START       FB00
BRKA             0006
BRKDEL           0007
BRKE             0007
BRKH             FE09
BRKL             FE0A
BRKON            0003
BRKSCR           FE0B
BRK_CHKOFF       8EC3
BRK_CHK_DONE     8F19
BRK_COM          8EFD
BRK_REL          8F10
BURNBYTE         8FC7
BURNCONST        8FA1
BURNCOUNT        009E
BURNDST          009C
BURNSRC          009A
BUS7372800       FB00
BUS8003584       FB04
CALC_TPSP        8457
CANC_SHFT        8F64
CCS              0003
CCSDEL           0005
CCSON            0000
CCS_DEL          0135
CGMCHANGE        FB39
CHECK_GREATER_TH 8BA3
CHECK_LESS_THAN  8B9B
CHECK_TXCMD      8A8B
CHK_CYL          839C
CHK_RAIL_HI      844B
CHK_TPS_DOT      8528
CHK_TR           8392
CHXF             0007
CHXIE            0006
CHXMAX           0000
CLK100K          0001
CLR_DEL          8EE3
CLSTHRT          0002
CMD_ERASE        0057
CMD_EXIT         0058
CMD_HELP         0048
CMD_HELP1        001F
CMD_PROGRAM      0050
CMD_UPGRADE      0055
COCO             0007
CONFIG1          001F
CONFIG2          001E
CONT_TX          8B37
COP              0005
COPCTL           FFFF
COUNT            0040
CPHA             0003
CPOL             0004
CT_CNT           013B
CT_MIN           013E
CYL              0002
D                0004
D1D2             0006
D2_SOLS          8F2E
D3_SOLS          8F39
D4_SOLS          8F44
DBDN             0147
DBUP             0146
DDRA             0004
DDRB             0005
DDRC             0006
DDRD             0007
DDRE             000C
DECEL_EPC        8819
DECEL_M1         85C9
DECRMT           8C4A
DECR_DF          88FD
DECR_DF1         8956
DECR_TOTP        88BC
DECR_TRIMP       8924
DEC_IAC_CNTR     89DD
DEC_IAC_DONE     89E3
DEC_TIM_CNTR     8A29
DEC_TIM_DONE     8A2F
DELAY            FD39
DELAY1           FD3A
DELAY2           FD3C
DF               005C
DF1              005D
DF1_OK           895F
DFCDIS           0002
DFCEN            0003
DFCON            0002
DFCPER           0002
DFC_CHKON        8ED5
DFC_COM          8EE7
DFC_DIS          8F09
DFC_DONE         8EF4
DFF              005E
DFSEL            0077
DFSEL_DONE       8835
DF_DONE          889D
DF_OK            8906
DIVIDEND         007A
DIVISOR          007C
DIVROUND         8C74
DIVROUND0        8C84
DIVROUND1        8C86
DIVROUND2        8C81
DMARE            0005
DMATE            0004
DNSHIFT          8689
DNSHIFT_COM      8671
DONE_RCV         8B10
DONE_WITH_INTERP 8BE7
DONE_XFER        8B4C
DOT_PASS_DONE    8546
DO_DFSEL         87C7
DO_DFSEL_A       87DC
DO_DFSEL_B       87E7
DO_DFSEL_C       87F2
DO_DFSEL_D       87F8
DO_EPC_M2        8614
DO_IAC           8A0F
DO_INTERP        8BAE
DO_TOTP          88D1
DO_TRIMP         892A
DRIVE            8617
DRIVE_A          855F
DUMMY            8B78
ELSXA            0002
ELSXB            0003
ENG_STOP         8488
ENSCI            0006
EPC              0004
EPCHSS           0003
EPCHTCC          0001
EPCPWH           005F
EPCPWL           0060
EPCRSS           0002
EPCRTCC          0000
EPC_12           0110
EPC_23           0118
EPC_34           0120
EPC_DECEL        0131
EPC_HOLD         0133
EPC_M1           0128
EPC_M1_DECEL     0148
EPC_RISE         0132
EPC_STALL        0108
EPC_TCC          0130
ERASE            0002
ERASEFLASH       FC5C
ERASEFLASH1      FC5F
ERASERAMSIZE     003B
ERRIE            0006
ESTOP            0000
EXBRK_DEL        0137
EXHBRK           0004
EXHPS            0001
E_RUN            89C3
E_STOP_CHK       89B3
FAST_MPH_CALC    8505
FAST_RPM_CALC    84AB
FE               0001
FEIE             0001
FIRE_ADC         89F0
FIRST            0001
FIRST_M2         85EC
FIRST_M2A        85FE
FLASHPROGRAM     FD44
FLASHPROGRAM1    FD4E
FLASHPROGRAM2    FD7F
FLASH_ERASED     00FF
FLASH_FIRST      0043
FLASH_LAST       0045
FLASH_PAGE       0080
FLASH_PROTECT    00F6
FLASH_ROW        0040
FLBPR            FF7E
FLCR             FE08
FORTH            0004
FOUR             86FA
GEAR1_VARS       8F6D
GEAR2_VARS       8F7A
GEAR3_VARS       8F87
GEAR4_VARS       8F94
GEARCNT          0046
GEARCNT_FLAGS    8679
GEARCNT_PRV      006C
GEAR_COM         006E
GEAR_CUR         006D
GETCHAR          FC6A
GETHEXBYTE       FCD2
GETHEXBYTE1      FCEA
GETHEXBYTE2      FCEC
GETSREC          FC73
GETSREC1         FC78
GETSREC1A        FC80
GETSREC2         FC92
GETSREC3         FCA7
GETSREC4         FCBB
GET_12           885F
GET_23           8868
GET_34           8871
GET_DCL          8882
GET_M1           8897
GET_STL          8856
GET_TCC          887A
GET_TO           884D
GOT_ORD_NUM      8B95
HVEN             0008
IAC              004C
IACCNT           00A0
IACCNTRL         F400
IACON            0004
IACPW            0054
IACPWM           0005
IAC_CHK_DONE     83F5
IAC_DONE         8A1F
IDLE             0004
ILAD             0003
ILIE             0004
ILOP             0004
ILTY             0002
IMASK            0001
IMASKK           0001
INCR_DF          88F4
INCR_DF1         894D
INCR_TOTP        88AB
INCR_TRIMP       891B
INC_CMS          8A3B
INC_CUS          89E3
INC_MPH_CNTR     89C5
INC_MS           8A02
INC_MSX20        8A2F
INC_MSX5         8A1F
INC_RPM_CNTR     89AD
INC_S            8A47
INIT_CONFIG1     0001
INIT_CONFIG2     0001
INIT_FIRST       8000
INIT_LAST        FB00
INIT_SCBR        0012
INIT_SCC1        0040
INIT_SCC2        000C
INIT_STACK       01EC
INPUTS           0063
INT1             FE04
INT2             FE05
INT3             FE06
INTACC1          0078
INTACC2          007C
INTKBIER         001B
INTKBSCR         001A
INTSCR           001D
IN_A_OR_C_MODE   8B27
IN_I_MODE        8B2F
IN_Q_MODE        8B34
IN_V_MODE        8B2B
IRQF             0003
IRQ_DONE         898F
IRQ_ISR          8983
ISHEX            FCF6
ISHEX1           FD06
ISNTHEX          FD08
KBIE0            0000
KBIE1            0001
KBIE2            0002
KBIE3            0003
KBIE4            0004
KBIE5            0005
KBIE6            0006
KBIE7            0007
KEYBD_ISR        8B4E
KEYBD_RESET_DONE 84D2
KEYF             0003
KPA              004F
KPAFAC_RH        F000
KPA_RANGE        00F8
LINEPRESS        F300
LININTERP        8B96
LOAD_RAM         82DF
LOCAL_TMP        0095
LOCK             0006
LOOPCHK_DONE     83EA
LOOPCNTR         009F
LOOPER           83E0
LOOPFRQ          0003
LOOPS            0007
LOOP_END         8980
LPRS             004A
LPSI             0052
LVI              0001
LVIOUT           0007
LVISR            FE0C
M                0004
M1               0006
M1D1_SOLS        8F1A
M1_CALCS         8E20
M1_DCL           888F
M2               0005
M2_D2            86B6
M2_D2A           86CA
M2_D2_A          8622
M2_D2_DONE       86DE
M2_SOLS          8F23
MAN1             8599
MAN1_DONE        85D0
MAN1_EPC         85B8
MAN2             85D3
MAN2_A           8562
MAP              0047
MASS             0004
MASSERASE        FD09
MASSERASE1       FD0D
MASSERASE2       FD30
MLPS             0048
MLPSP            0050
MLPSPOSIT        F500
MLPSP_CUR        006B
MODE             0000
MODEK            0000
MODE_A           8AAF
MODE_B           8ABF
MODE_C           8AC6
MODE_I           8AFC
MODE_J           8B0C
MODE_Q           8AEC
MODE_V           8AD6
MODE_W           8AE6
MODF             0004
MODFEN           0002
MODRST           0002
MOVE_CALCS       8CE9
MOVE_EPC         8822
MPH              0043
MPHCH            0073
MPHCL            0074
MPHPH            0075
MPHPL            0076
MPHSTALL         0004
MPH_CALC         84D2
MPH_CALC_DONE    8519
MPH_CHK          851B
MPH_CHK_DONE     8528
MPH_STALL        0139
MS               0066
MSG_COMPLETE     FDB4
MSG_ERROR        FDCE
MSG_HELLO        FD88
MSG_HELP         FD90
MSG_NORESET      FDE0
MSG_WAITING      FDBF
MSG_WHAT         FDD7
MSX100           0069
MSX20            0068
MSX5             0067
MSXA             0004
MSXB             0005
MS_DELAY         901C
MS_DELAY1        901D
MS_DELAY2        901F
MS_ERASEFLASH    8FDA
MS_ERASEFLASH1   8FDD
MS_ERASERAMSIZE  0031
MS_FLASHPROGRAM  9027
MS_FLASHPROGRAM1 9027
MS_FLASHPROGRAM2 9056
MS_MASSERASE     8FF6
MS_PROGRAMFLASH  8FE8
MS_PROGRAMFLASH1 8FEB
MS_PROGRAMRAM    000B
MS_PROGRAMRAMSIZ 004A
MS_RAM_END       00B0
MS_RAM_SIZE      0070
MS_RAM_START     0040
MS_RF_END        0170
MS_RF_END_F      E1C0
MS_RF_SIZE       00C0
MS_RF_START      00B0
MS_RF_START_F    E100
MS_TOTAL_RAM_SIZ 0130
N                0003
NEG_SLOPE        8BDA
NEIE             0002
NEUT             857D
NEUTRAL          8573
NEUTRAL_D        86E1
NEUTRAL_D_A      8625
NEUTRAL_D_DONE   871A
NF               0002
NOSHIFT_D_A      86AA
NOT_MS           89ED
NO_ACCEL         8541
NO_ADC_PASS      847A
NO_CCS           87DA
NO_DECEL_M1      85C0
NO_DOT_PASS      8548
NO_IAC           8A1B
NO_MPH_PASS      851B
NO_PSI_BRK       8401
NO_STALL         8526
NO_TACH_PASS     84CD
NO_TCC           84C9
NO_TPS_BRK       8476
ONE              8712
OR               0003
ORD_TABLE_FIND   8B79
ORIE             0003
OVRF             0005
P                0001
PARK             8565
PARK_REV         857A
PBWC             0037
PCTL             0036
PE               0000
PEIE             0000
PEN              0001
PGM              0001
PIN              0006
PLLF             0006
PLLIE            0007
PLLON            0005
PLLSET           FB3D
PLLWAIT          FB4D
PLL_WAIT         826E
PMDS             003B
PMRS             003A
PMSH             0038
PMSL             0039
POR              0007
PORTA            0000
PORTB            0001
PORTC            0002
PORTD            0003
PORTE            0008
POSINTERP        8BC1
PRE0             0002
PRE1             0003
PRINTSTRING      FBF8
PRINTSTRING1     FBF3
PRN_DONE         8596
PROGRAMRAM       000B
PROGRAMRAMSIZE   004F
PS0              0000
PS1              0001
PS2              0002
PSIBRK           0006
PSI_BRK          83FA
PSI_CHK_DONE     8406
PTAPUE           000D
PTCPUE           000E
PTDPUE           000F
PTY              0000
PUTCHAR          FB53
PUTSTRING        FBED
QUOTIENT         0078
R                0002
R8               0007
RAIL_HI          8452
RAIL_LO          8447
RAIL_TOT_HI      88B7
RAIL_TOT_LO      88CA
RAM_EXEC         01ED
RAM_LAST         023F
RAM_START        0040
RE               0002
READ_SD          83D6
REENT            8B82
REMAINDER        0078
REVERSE          856C
REVNUM           E000
ROM_LAST         FDFF
ROM_START        8000
RPF              0000
RPM              0042
RPMCH            006F
RPMCL            0070
RPMK             0141
RPMPH            0071
RPMPL            0072
RPMTCC           0003
RPM_CALC_DONE    84CB
RPM_CHECK        84BE
RPM_COMP         847A
RPM_RANGE        00F0
RWU              0001
RXOFFSET         0099
SBFCR            FE03
SBK              0000
SBSR             FE00
SBSW             0001
SCBR             0019
SCC1             0013
SCC2             0014
SCC3             0015
SCDR             0018
SCIRCV_ISR       8A51
SCITX_ISR        8B12
SCRF             0005
SCRIE            0005
SCS1             0016
SCS2             0017
SCTE             0007
SCTIE            0007
SDFLG_HI         83DD
SDHI             0006
SECH             0040
SECL             0041
SECOND           0002
SEL12            0002
SEL23            0003
SEL34            0004
SELDCL           0006
SELM1            0007
SELSTL           0001
SELTCC           0005
SELTO            0000
SEQ_DN_DONE      8741
SEQ_SEL_CHECK    8628
SEQ_SEL_CHECK_DO 867F
SETLSB           8C48
SET_CYL          83AF
SET_LOOPCHK      83E8
SET_TR           839A
SET_TT           8390
SF               0007
SHFTDNDB         00A4
SHFTDNDB_CHK_DON 8A02
SHFTDN_CHK_DONE  8662
SHFTDN_HI        8658
SHFTLP           8C0C
SHFTUPDB         00A3
SHFTUPDB_CHK_DON 89FC
SHFTUP_CHK_DONE  8645
SHFTUP_HI        863B
SHIFT            0061
SHIFT12          874B
SHIFT12A         875D
SHIFT12_A        86B3
SHIFT12_CALCS    8DAE
SHIFT12_DONE     8772
SHIFT21          8724
SHIFT21_A        869C
SHIFT23          8775
SHIFT23A         8787
SHIFT23_A        86B0
SHIFT23_CALCS    8DD4
SHIFT23_DONE     879A
SHIFT32          872C
SHIFT32_A        8699
SHIFT34          879D
SHIFT34A         87B3
SHIFT34_A        86AD
SHIFT34_CALCS    8DFA
SHIFT34_DONE     87C7
SHIFT43          8734
SHIFT43_A        8696
SHIFTDN          0006
SHIFTUP          0007
SHIFT_CHK        8E78
SHIFT_EPC        880C
SIGNATURE        E001
SLOW_MPH_CALC    84E7
SLOW_RPM_CALC    848F
SPARE1           00A6
SPARE10          00AF
SPARE2           00A7
SPARE3           00A8
SPARE4           00A9
SPARE5           00AA
SPARE6           00AB
SPARE7           00AC
SPARE8           00AD
SPARE9           00AE
SPCR             0010
SPDR             0012
SPE              0001
SPMSTR           0005
SPR0             0000
SPR1             0001
SPRF             0007
SPRIE            0007
SPSCR            0011
SPTE             0003
SPTIE            0000
SPWOM            0002
SRECADDR         0007
SRECCHKSUM       0002
SRECCOUNT        0001
SRECSIZE         0006
SRECTYPE         0005
SREDDATA         0008
SRSR             FE01
SS1              0001
SS1DEL           0004
SS1_DEL          0134
SS2              0000
SSPROG           0004
SSSDEL           0006
SSS_DEL          0136
STALL_CALCS      8D88
STALL_EPC        8810
START            8256
STB_ADC          83BC
SUBAR            FE02
SUB_A0           88B0
SUFLG_HI         83D4
SUHI             0005
T1CH0H           0026
T1CH0L           0027
T1CH1H           0029
T1CH1L           002A
T1CNTH           0021
T1CNTL           0022
T1MODH           0023
T1MODL           0024
T1SC             0020
T1SC0            0025
T1SC1            0028
T2CH0H           0031
T2CH0L           0032
T2CH1H           0034
T2CH1L           0035
T2CNTH           002C
T2CNTL           002D
T2MODH           002E
T2MODL           002F
T2SC             002B
T2SC0            0030
T2SC1            0033
T8               0006
TACHRISE         0000
TACK             0003
TBCR             001C
TBIE             0002
TBIF             0007
TBON             0001
TBR0             0004
TBR1             0005
TBR2             0006
TC               0006
TCC              0002
TCCAPP           0005
TCCON            0001
TCCREL           0004
TCC_APP          8E8E
TCC_APP_A        8EA3
TCC_APP_B        8EB6
TCC_BRK_OFF      8F4F
TCC_CHKOFF       8E46
TCC_CHKON        8E54
TCC_CHKREL       8E5F
TCC_CHK_DONE     8EC2
TCC_EPC          880E
TCC_MIN_RPM      0138
TCC_REL          8E62
TCIE             0006
TCONF            0062
TCPROG           0005
TE               0003
TEMP_SP          0041
THIRD            0003
THREE            8702
TIM1OV_ISR       8992
TIM2CH0_ISR      89A2
TIM2CH0_ISR_DONE 8A4F
TIMCNT           00A1
TMP1             0080
TMP10            0089
TMP11            008A
TMP12            008B
TMP13            008C
TMP14            008D
TMP15            008E
TMP16            008F
TMP17            0090
TMP18            0091
TMP19            0092
TMP2             0081
TMP20            0093
TMP21            0094
TMP3             0082
TMP4             0083
TMP5             0084
TMP6             0085
TMP7             0086
TMP8             0087
TMP9             0088
TOF              0007
TOHEX            FCED
TOHEX1           FCF5
TOIE             0006
TOT              0049
TOTADD           0058
TOTCALC          88A3
TOTCALC_DONE     890D
TOTDEGREES       F200
TOTEMP           0051
TOTEMPDIF        0056
TOTEMPFAC        0143
TOTEMPP          0057
TOTHI            0144
TOTLO            0145
TOVX             0001
TO_TABLE         00B0
TPS              004E
TPSCALC_DONE     846B
TPSP             0055
TPSRATE          013A
TPSSCALE         0064
TPSSPAN          013D
TPS_CHECK        846B
TPS_CHECK_DONE   8478
TPS_PRV          00A2
TPS_RANGE        0100
TR               0001
TRANS            0044
TRANS2           0045
TRIM             004D
TRIMADD          005B
TRIMCALC         8913
TRIMCALC_DONE    8966
TRIMDIF          0059
TRIMFAC          013F
TRIMP            005A
TRST             0004
TSTOP            0005
TT               0000
TUNECONFIG       0140
TURN_ON_INTS     83DF
TWO              870A
TXCNT            0096
TXGOAL           0097
TXINV            0005
TXMODE           0098
TXMODE_5         8A68
TXMODE_6         8A70
TXMODE_7         8A68
TXMODE_8         8A7D
UDIVBY100        8CCF
UDIVROUNDINGDONE 8CE8
UDVD32           8BE8
UMUL16           8CBE
UMUL32           8C87
UMUL32A          8CAB
UMUL32B          8CBD
UMULANDDIV       8CBE
UPSHIFT          869F
UPSHIFT_COM      8667
USER_ADC         FACD
USER_CONFIG1     FAC4
USER_CONFIG2     FAC5
USER_FIRST       FAC6
USER_IRQ         FAF7
USER_KEYBOARD    FAD0
USER_LAST        FAC8
USER_PLL         FAF4
USER_RESET       FAFD
USER_SCBR        FAC3
USER_SCIERR      FAD9
USER_SCIRX       FAD6
USER_SCITX       FAD3
USER_SPIRX       FADF
USER_SPITX       FADC
USER_SWI         FAFA
USER_TIM1CH0     FAF1
USER_TIM1CH1     FAEE
USER_TIM1OV      FAEB
USER_TIM2CH0     FAE8
USER_TIM2CH1     FAE5
USER_TIM2OV      FAE2
USER_TIMEBASE    FACA
USX100           0065
VEC_ADC          FFDE
VEC_IRQ          FFFA
VEC_KBD          FFE0
VEC_PLL          FFF8
VEC_RESET        FFFE
VEC_SCIERR       FFE6
VEC_SCIRX        FFE4
VEC_SCITX        FFE2
VEC_SPIRX        FFEA
VEC_SPITX        FFE8
VEC_SWI          FFFC
VEC_TIM1CH0      FFF6
VEC_TIM1CH1      FFF4
VEC_TIM1OV       FFF2
VEC_TIM2CH0      FFF0
VEC_TIM2CH1      FFEE
VEC_TIM2OV       FFEC
VEC_TIMEBASE     FFDC
VEHSPD           0000
VEH_STOP         84E0
VOLTS            0053
VPR0             0000
VPR1             0001
VSSP             0003
VSTOP            0001
V_RUN            89DB
V_STOP_CHK       89CB
WAKE             0003
WOT_CNT          013C
ZERO_SLOPE       8BE5
